url,id,number,title,state,comments,created_at,updated_at,closed_at,body,login,type,total_count,label_0,label_1,label_2,label_3,label_4,label_5,label_6,label_7,label_8
https://api.github.com/repos/rails/rails/issues/50958,9632282,50958,Add missing alias to errors array,open,0,2024-02-03 01:01:09+00:00,2024-02-03 01:01:13+00:00,,"it used to be that the << operator was able to add error messages during the validation process, this restores that functionality.

<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created because errors in active record validations seem to be missing the << functionality it used to have

### Detail

This Pull Request changes the array returned by ar errors

### Additional information

Just wanted to restore the alias of >> to 'add'

### Checklist

Before submitting the PR make sure the following are checked:

* [ ] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",laomatt,User,0,activemodel,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50954,58818799,50954,esbuild precompilation error in rails 7.1.3,open,0,2024-02-02 14:43:34+00:00,2024-02-02 14:43:34+00:00,,"### Steps to reproduce
create a new rails 7.1.3 Project with esbuild.
```bash
 rails new app --javascript esbuild
```
and try to build the docker image without doing any changes
```bash
docker build -f Dockerfile -t app_test . && docker run -p 3000:3000 -v .:/rails app_test --env RAILS_MASTER_KEY=xxx
```

### Expected behavior
The image should build

### Actual behavior
yarn throws an error while precompiling the assets.

yarn run v1.22.21
$ esbuild app/javascript/*.* --bundle --sourcemap --format=esm --outdir=app/assets/builds --public-path=/assets
✘ [ERROR] Could not resolve ""@hotwired/turbo-rails""

    app/javascript/application.js:2:7:
      2 │ import ""@hotwired/turbo-rails""
      The command '/bin/sh -c SECRET_KEY_BASE_DUMMY=1 ./bin/rails assets:precompile' returned a non-zero code: 1

### System configuration
**Ubuntu version**: 22.04

**Rails version**: 7.1.3

**Ruby version**: ruby 3.0.2p107 (2021-07-07 revision 0db68f0233) [x86_64-linux-gnu]

**gem --version**: 3.3.5
",PhilippGsell,User,0,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50953,1773614,50953,Add webp as a default to active_storage.web_image_content_types,open,1,2024-02-02 12:51:26+00:00,2024-02-02 17:19:56+00:00,,"### Motivation / Background

Customers are uploading webp images to our app, and expect them to be rendered just like other images, instead of being converted to the fallback PNG format.

### Detail

Follows https://github.com/rails/rails/pull/38918 and https://github.com/rails/rails/pull/38988. At the time, webp browser support was limited. Now 96% of browsers support webp: https://caniuse.com/?search=webp

This PR adds webp as a default image type.

### Additional information

I think this is a sensible default in 2024, but alternatively each Rails app may choose:

```
Rails.application.configure do
  config.active_storage.web_image_content_types << ""image/webp""
end
```

**Changelog**

I've not added a changelog entry in line with https://github.com/rails/rails/pull/38918#discussion_r410527726, but I'd be happy to add one if it's felt useful now.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.

cc @jeremy 
",lewispb,User,0,railties,docs,activestorage,,,,,,
https://api.github.com/repos/rails/rails/issues/50951,4509402,50951,set default_enforce_utf8 to false,open,1,2024-02-02 11:11:21+00:00,2024-02-03 08:41:29+00:00,,"`enforce_utf8` is false by deault in `form_for` #30852
We normally don't need to consider old IE anymore.",ironsand,User,0,actionview,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50950,54796266,50950,Add class name to enum validation exception message,open,0,2024-02-02 11:07:18+00:00,2024-02-02 11:08:08+00:00,,"### Motivation / Background

In general validation errors should include more information on where it has happened.

### Detail

This PR updates `activerecord/lib/active_record/enum.rb` validation exception message and just adds class name.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",amkisko,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50949,82408,50949,Add a Rails Guide for tuning performance for deployment,open,0,2024-02-02 10:55:44+00:00,2024-02-02 15:02:20+00:00,,"This pull request adds a new Rails Guide called ""Tuning Performance for Deployment"".

### Motivation / Background

A few weeks ago there was [an issue to change the default thread count for Puma in Rails](https://github.com/rails/rails/issues/50450) and [a PR to make that change](https://github.com/rails/rails/pull/50669).

The PR mentioned that a performance tuning guide would be the right way to document some issues, but no such guide exists. I wrote a basic guide and incorporated a lot of feedback from @byroot (Jean Boussier), who wrote the thread count PR.

This pull request adds the suggested Rails Guide.

CC @nateberkopec - though I know you're very busy right now :-)

### Detail

It's impossible to have a detailed guide for all possible Rails deployment options. This guide focuses on Puma (the default server) and CRuby, and on giving a good start to people who don't already know deployment well. I've tried to mention core performance issues without explaining every possible configuration change.

Next time there is a deployment configuration change, there will be a place to document the tradeoffs.

### Checklist

Before submitting the PR make sure the following are checked:

* [X] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [X] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [X] Tests are added or updated if you fix a bug or add a feature.
* [X] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",noahgibbs,User,1,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50948,7265,50948,Destroying bi-directional has_one through association only works from one end,open,0,2024-02-02 10:14:36+00:00,2024-02-03 15:43:29+00:00,,"### Summary

Given a `has_one :through` association with `dependent: :destroy`, destroying the parent destroys the through record and the far end.  However if the association is bi-directional, destroying only works from one end – and the end which succeeds depends on the order of `belongs_to` declarations in the join model.  I believe it should work from both ends.

### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :lefts, force: true do |t|
  end

  create_table :rights, force: true do |t|
  end

  create_table :middles, force: true do |t|
    t.references :left, foreign_key: true
    t.references :right, foreign_key: true
  end
end

class Left < ActiveRecord::Base
  has_one :middle, dependent: :destroy
  has_one :right, through: :middle
end

class Middle < ActiveRecord::Base
  belongs_to :left, dependent: :destroy
  belongs_to :right, dependent: :destroy
end

class Right < ActiveRecord::Base
  has_one :middle, dependent: :destroy
  has_one :left, through: :middle
end

class BugTest < Minitest::Test
  def test_destroying_left_destroys_right
    left = Left.create!
    right = Right.create!
    middle = Middle.create! left: left, right: right

    left.destroy
    assert right.destroyed?
  end

  def test_destroying_right_destroys_left
    left = Left.create!
    right = Right.create!
    middle = Middle.create! left: left, right: right

    right.destroy
    assert left.destroyed?
  end
end
```

### Expected behavior

I expect:

- `left.destroy` to also destroy its `middle` and its `right`
- `right.destroy` to also destroy its `middle` and its `left`

### Actual behavior

- `right.destroy` destroys its `middle` and its `left`
-  `left.destroy` destroys its `middle` but does not destroy its `right`

However if I reverse the order of `Middle`'s `belongs_to` declarations, `right.destroy` stops working and `left.destroy` starts working.

### Patch

This patch fixes the behaviour and does not break any existing tests (via `bundle exec rake test:sqlite3`):

```diff
diff --git i/activerecord/lib/active_record/callbacks.rb w/activerecord/lib/active_record/callbacks.rb
index 29c72d1024..6e9c68b747 100644
--- i/activerecord/lib/active_record/callbacks.rb
+++ w/activerecord/lib/active_record/callbacks.rb
@@ -418,7 +418,7 @@ module ClassMethods
 
     def destroy # :nodoc:
       @_destroy_callback_already_called ||= false
-      return if @_destroy_callback_already_called
+      return true if @_destroy_callback_already_called
       @_destroy_callback_already_called = true
       _run_destroy_callbacks { super }
     rescue RecordNotDestroyed => e
```

Credit for the patch belongs to [Alex](https://stackoverflow.com/a/77917179/151007).

### System configuration

**Rails version**: 7.1.3

**Ruby version**: 3.3.0
",airblade,User,0,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50947,152256436,50947,ActiveStorage::IntegrityError (ActiveStorage::IntegrityError),open,0,2024-02-02 04:43:40+00:00,2024-02-02 04:43:59+00:00,,"### Steps to reproduce
I have upgraded my rails application from 5.2 to 6.0 and then 6.0 to 7.0 . So, I am getting ActiveStorage::IntegrityError (ActiveStorage::IntegrityError) while I am trying to get -
```ruby
 attachment.variant(resize_to_limit: resize).processed.url
```

### Expected behavior
It should not give this error.

### Actual behavior
Getting this  ActiveStorage::IntegrityError (ActiveStorage::IntegrityError) Error.

### System configuration
**Rails version**: 3.0.6

**Ruby version**:  7.0.8


Please provide me the solution to resolve this problem I am stuck on it since a week.
",raoehtesham03,User,0,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50946,3733470,50946,Fix error raised when running `db:schema:load:#{name}` and test DB config is missing,open,0,2024-02-02 03:17:31+00:00,2024-02-02 14:50:46+00:00,,"### Motivation / Background

Fixes #50672

### Detail

The task `db:schema:load:#{name}` depends on `db:test:purge:#{name}` since adb64db which requires the DB config to be present, otherwise an error is raised.

```
$ bin/rails db:schema:load:one --trace
** Invoke db:schema:load:one (first_time)
** Invoke db:test:purge:one (first_time)
** Invoke db:load_config (first_time)
** Invoke environment (first_time)
** Execute environment
** Execute db:load_config
** Invoke db:check_protected_environments (first_time) ** Invoke db:load_config
** Execute db:check_protected_environments
** Execute db:test:purge:one
** Execute db:schema:load:one
```

This commit fixes the problem by returning early when the DB config is indeed missing.

### Additional information

The task `db:schema:load` may need to be updated to depend on `db:test:purge` too, to keep it consistent with `db:schema:load:#{name}`.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",ricardotk002,User,0,activerecord,railties,,,,,,,
https://api.github.com/repos/rails/rails/issues/50945,547754,50945,Introduce today_or_future? method,open,0,2024-02-02 00:44:50+00:00,2024-02-02 00:44:53+00:00,,"### Motivation / Background

This Pull Request introduces a convenient helper to check if a date/time is either today or in the future.

Drawing inspiration from https://github.com/rails/rails/pull/46786 which introduces `.local?` helper for environment check.

### Detail

This Pull Request changes:
- `ActiveSupport::TimeWithZone`
-  `DateAndTime::Calculations`

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",olimart,User,0,activesupport,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50944,6014046,50944,Enable DependencyTracker to evaluate interpolated paths,open,2,2024-02-01 23:46:28+00:00,2024-02-02 19:50:39+00:00,,"Previously, neither the PrismRenderParser nor the RipperRenderParser would consider an interpolated string as a dependency. The RubyTracker even included a line to explcitly filter out interpolated paths returned from the RipperRenderParser since they would end in a ""/"". However, the RubyTracker does include the ability to evaluate explicit ""Template Dependency"" comments with wildcard nodes.

This commit extends the RipperRenderParser and PrismRenderParser to convert interpolated strings into wildcard globs. Additionally, it changes the RubyTracker to evaluate wildcards the same for both implicit and explicit dependencies. This enables the RubyTracker to identify potential dependencies for interpolated renders, which it was previously unable to do.

cc @jhawthorn if you think this is a good idea I can try to apply it to ActionView::Precompiler as well
",skipkayhil,User,0,actionview,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50943,55164724,50943,Setup jemalloc in default Dockerfile to optimize memory allocation,open,0,2024-02-01 22:55:15+00:00,2024-02-01 22:59:51+00:00,,"[Ruby's use of `malloc` can create memory fragmentation problems, especially when using multiple threads](https://www.speedshop.co/2017/12/04/malloc-doubles-ruby-memory.html) like Puma does. Switching to an allocator that uses different patterns to avoid fragmentation can decrease memory usage by a substantial margin.",northeastprince,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50941,39735028,50941,Retry `ActionableError`s when running tests,open,2,2024-02-01 21:50:43+00:00,2024-02-02 14:23:24+00:00,,"### Motivation / Background

This Pull Request has been created because I want to make it easier to retry actionable errors that occur when running tests. Rails already knows how to recover these errors, so lets make it possible for the user to recover from them and run their tests without exiting the process.

### Detail

Allow Actionable Errors encountered when running tests to be retried. This can be configured by `config.actionable_command_line_errors` and is `true` in the test environment unless the `""CI""` env variable is set, and false otherwise.

    
    Migrations are pending. To resolve this issue, run:
    
            bin/rails db:migrate
    
    You have 1 pending migration:
    
    db/migrate/20240201213806_add_a_to_b.rb
    Run pending migrations? [Yn] Y
    == 20240201213806 AddAToB: migrating =========================================
    == 20240201213806 AddAToB: migrated (0.0000s) ================================
    
    Running 7 tests in a single process (parallelization threshold is 50)
    Run options: --seed 22200
    
    # Running:
    
    .......
    
    Finished in 0.243394s, 28.7600 runs/s, 45.1942 assertions/s.
    7 runs, 11 assertions, 0 failures, 0 errors, 0 skips
    

### Additional information

Right now this is only implemented in the Test Runner, but I'd also like to follow up with a similar implementation for `Rails::Command::CorrectableNameError`s.

Also we could introduce a new framework default for the configuration if this is the direction in this PR is acceptable.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",andrewn617,User,0,activesupport,railties,docs,,,,,,
https://api.github.com/repos/rails/rails/issues/50939,58794487,50939,Should there be a RAILS_MASTER_KEY_DUMMY like SECRET_KEY_BASE_DUMMY?,open,0,2024-02-01 14:57:42+00:00,2024-02-01 14:57:42+00:00,,"### Steps to reproduce

Have a rails app with `config.require_master_key = true`

```
RAILS_ENV=production SECRET_KEY_BASE_DUMMY=1 bin/rails assets:precompile
```

### Expected behavior

It ignores the master key requirement?

### Actual behavior

Error:

```
Missing encryption key to decrypt file with. Ask your team for your master key and write it to /rails/config/master.key or put it in the ENV['RAILS_MASTER_KEY'].
```

### System configuration
**Rails version**: Rails 7.1.3
**Ruby version**: ruby 3.2.3 (2024-01-18 revision 52bb2ac0a6) [arm64-darwin23]

----

What about a RAILS_MASTER_KEY_DUMMY=1?",dorianmariefr,User,0,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50938,19192189,50938,Refactor QueryCache to be owned by the pool,open,0,2024-02-01 13:40:41+00:00,2024-02-01 13:40:44+00:00,,"Ref: https://github.com/rails/rails/pull/50793

If we want to stop caching the checked out connections, then we must persist the cache in the pool, and assign it to the connection when it's checked out.

The pool become responsible for managing the cache lifecycle.

This also open the door to sharing the cache between multiple connections, which is valuable for read replicas, etc.

This change only really make sense if we go through with no longer caching checked out connections. Otherwise it's just extra complexity.
",casperisfine,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50935,5657035,50935,Add ability to see on which shard the migration is being run,open,2,2024-02-01 11:23:15+00:00,2024-02-01 22:51:30+00:00,,"Currently, when the app uses sharding and the migration is run, there is not way to tell on which shard it is being run.
This is a problem, because when the migration adds a unique index and we have some duplicates, the migration blows up (with a `ActiveRecord::RecordNotUnique` error) and there is no way to easily know on which shard exactly. 

The problem can be solved in at least 2 ways:
1. somehow `puts` shard info when running a migration
2. we have a `connection_pool` object attached to the mentioned `ActiveRecord::RecordNotUnique` error (thanks to https://github.com/rails/rails/pull/48295), but the error message is not include this info (https://github.com/rails/rails/pull/48295#issuecomment-1570702063), so needs to fix that

I would like to provide a PR, but need a suggestion on which path to choose. 
@byroot you helped to implement the linked PR, can you please suggest? ",fatkodima,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50932,157491032,50932,Rails 7.1 undefined method purge & same for variant using ruby 3.3.0-dev,open,1,2024-02-01 05:45:14+00:00,2024-02-01 10:02:08+00:00,,"irb(main):047> image
=> 
#<ActiveStorage::Attachment:0x00007ff81133c0a0
 id: 4,
 name: ""images"",
 record_type: ""News"",
 record_id: 2,
 blob_id: 4,
 created_at: Wed, 31 Jan 2024 12:00:01.463996000 UTC +00:00>
irb(main):048> 
irb(main):049> 
irb(main):050> image.class
=> ActiveStorage::Attachment(id: integer, name: string, record_type: string, record_id: integer, blob_id: integer, created_at: datetime)
irb(main):051> 
irb(main):052> 
irb(main):053> 
irb(main):054> image.purge
/home/lap-053/.rbenv/versions/3.3.0-dev/lib/ruby/gems/3.4.0+0/gems/activemodel-7.1.3/lib/active_model/attribute_methods.rb:489:in `method_missing': undefined method `purge' for an instance of ActiveStorage::Attachment (NoMethodError)
",kashifcodility,User,0,activestorage,more-information-needed,,,,,,,
https://api.github.com/repos/rails/rails/issues/50930,816749,50930,Rails 7.1 doesn't render Enumerator in view correctly,open,0,2024-02-01 02:21:08+00:00,2024-02-01 02:22:27+00:00,,"Prior to Rails 7.1, returning an Enumerator in a view rendered the content correctly. However, starting from Rails 7.1, it appears to render only the Enumerator's string representation (Enumerator#to_s), resulting in a response like `""#<Enumerator:0xXXXXXX>""`.

Setting `self.response_body = Enumerator.new` in an action works for both 7.0 and 7.1 (fixed in https://github.com/rails/rails/issues/49588).

### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # gem ""rails"", ""~> 7.0.0"" # => works
  gem ""rails"", ""~> 7.1.0"" # => fails
end

require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    get ""enumerator_in_action"", controller: :test
    get ""enumerator_in_view"", controller: :test
  end
end

class TestController < ActionController::Base
  def enumerator_in_action
    self.response_body = Enumerator.new do |buff|
      10.times { buff << _1.to_s }
    end
  end

  def enumerator_in_view
    render inline: <<~EOS, layout: false, type: :ruby
      Enumerator.new do |buff|
        10.times { buff << _1.to_s }
      end
    EOS
  end
end

require ""minitest/autorun""
require ""rack/test""

class BugTest < Minitest::Test
  include Rack::Test::Methods

  def test_enumerator_in_action
    get ""/enumerator_in_action""
    assert_equal ""0123456789"", last_response.body
  end

  def test_enumerator_in_view
    get ""/enumerator_in_view""
    assert_equal ""0123456789"", last_response.body
  end

  private

    def app
      Rails.application
    end
end
```

### Expected behavior

The content should be rendered by evaluating the Enumerator.

I'm not sure whether it is guaranteed behavior in specification when it's returned from view, but I expect it works as was the case until Rails 7.0.

### Actual behavior

It currently renders the Enumerator's string representation, such as ""#<Enumerator:0xXXXXXX>"".

### System configuration
**Rails version**: 7.1.3

**Ruby version**: 3.2.2",kuwabarahiroshi,User,0,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50928,79303,50928,Fixes race condition for multiple preprocessed video variants,open,1,2024-01-31 18:49:44+00:00,2024-02-01 02:00:54+00:00,,"This fixes race condition in Active Storage when multiple preprocessed variants are defined for a `Previewable` file is attached.

## Background

When a variant is specified for a ""previewable"" file type (e.g. video  or PDF) attachment, a `preview_image` attachment is first created and attached on the original blob and then any user-specified variants are derived from _that_ preview image. When those variants are named and have `preprocessed: true`, the jobs to create those variants are queued simultaneously.

Example from my case:

```ruby
  has_one_attached :file, dependent: :purge_later do |attachable|
    attachable.variant :preview, resize_to_fill: [400, 400], preprocessed: true
    attachable.variant :still, format: ""jpg"", saver: {quality: 85}, preprocessed: true
  end
```

## The issue

When a `Previewable` attachment is created (a video, in my case), `TransformJob.perform_later` is called for each named variant with `preprocessed: true`. Unless your queue adapter is synchronous (e.g. :inline or :test), this results in a race condition in which every such variant's worker will check `processed?`, see that no `preview_image` attachment exists yet on the `ActiveStorage::Blob`, and:

1. Redundantly download the file from storage
2. Create duplicative ActiveStorage::Attachment and `ActiveStorage::Blob` records for the `preview_image` attachment (all but one of which will be orphaned from the original blob's `has_one_attached :preview_image`)
3. Create variant blobs (and associated `ActiveStorage::VariantRecord`) that are similarly orphaned (by virtue of being a variant of an orphaned `preview_image` blob)

As a result, if the video is ever purged, `PurgeJob` will only find the current `has_one_attached :preview_image` and whatever variant demanded it into existence, then leave the rest as orphaned records in the database and in storage.

## The fix

Pretty simple: wrap the first step of the job in `blob.with_lock {}`. By pessimistically locking on the blob, we can prevent processing the preview image multiple times by multiple `TransformJob` jobs running concurrently.

Alternate approaches would all be more work:

* Queuing a `PreviewImage` job instead of N `TransformJob` and have it, only after `preview_image` is attached, enqueue those `TransformJob` jobs
* Batching up all the named variant transformations into a single meta-job

## Testing caveat 

Writing a test for this inside Rails would be difficult because it would require running the resulting TransformJob jobs concurrently. I [started a test](https://github.com/searls/rails/blob/fix-video-duplicate-preview-variants/activestorage/test/models/variant_with_record_test.rb#L348-L367) but failed to reproduce, in part because the test queue adapter will perform enqueued jobs inline instead of concurrently. In order to write a test that replicated the issue appropriately, we might first need a new option for `perform_enqueued_jobs(async: true) { … }`

If you're interested, [this gist](https://gist.github.com/searls/5b8298abe88b3206f670ea3c6d574aab) includes a driver script and output before and after the patch showing it working.

## Evaluating impact on existing Active Storage users

I only found this because I'm a total cheapskate and was literally counting records in my S3 bucket to ensure `PurgeJob` worked. Then I wasted the next two days trying to figure out why before landing on this. I strongly suspect that ActiveStorage users who host video and take advantage of `preprocessed: true` named variants will have a lot of orphaned stuff floating around their buckets.

To see if you have any such ""zombie"" preview_images (and presumably, associated variants) floating around your application that would survive calls to `purge` on the owning attachment, you could write a query like this:

```
ActiveStorage::Attachment
  .joins(""INNER JOIN active_storage_attachments as other_attachments ON
          active_storage_attachments.record_id = other_attachments.record_id AND
          active_storage_attachments.id != other_attachments.id"")
  .where(
    :name => ""preview_image"",
    :record_type => ""ActiveStorage::Blob"",
    ""other_attachments.name"" => ""preview_image"",
    ""other_attachments.record_type"" => ""ActiveStorage::Blob""
  )
  .distinct
```

Clearing out one's production database and backend storage to get this all right-sized should be a fun exercise for the reader.",searls,User,0,activestorage,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50920,1734607,50920,Support encrypting binary columns,open,1,2024-01-30 10:53:34+00:00,2024-02-02 14:07:16+00:00,,"
### Motivation / Background

ActiveRecord Encryption doesn't prevent you from encrypting binary columns but it doesn't have proper support for it either.

When the data is fed through encrypt/decrypt it is converted to a String. This means that the the encryption layer is not transparent to binary data - which should be passed as Type::Binary::Data.

As a result the data is not properly escaped in the SQL queries or deserialized correctly after decryption.

However it just happens to work fine for MySQL and SQLite because the MessageSerializer doesn't use any characters that need to be encoded. However if you try to use a custom serializer that does then it breaks.

PostgreSQL on the other hand does not work - because the Bytea type is passed a String rather than a Type::Binary::Data to deserialize, it attempts to unescape the data and either mangles it or raises an error if it contains null bytes.

### Detail

The commit fixes the issue, by reserializing the data after encryption and decryption. For text data that's a no-op, but for binary data we'll convert it back to a Type::Binary::Data.
",djmb,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50919,12777550,50919,Add negative_scopes option to ActiveRecord's enum method,open,0,2024-01-30 09:11:41+00:00,2024-01-30 09:40:23+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

In certain situation, we might need to store and query `negative` values. Having the option to bypass the auto-generated negative scopes can avoid the conflicts.

### Detail

Add `negative_scopes` option to `ActiveRecord::Enum#enum`, this offers the flexibility to optionally skip the creation of negative scopes.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",Jay0921,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50916,325974,50916,Unexpected controller prefix path de-duplication in view partial lookup paths,open,2,2024-01-30 04:10:56+00:00,2024-01-30 04:22:29+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

Create nested controller and nested object views where there is overlap between the controller and object namespaces. For example:

- `Courses::Quiz::Question` and `Courses::Quiz::QuestionsController`
- `Courses::Quiz::Question` and `Learning::Quiz::Extra::QuestionsController`
- `Courses::Quiz::Question` and `Learning::Courses::Quiz::QuestionsController`

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  gem ""rails""
end

require ""action_controller/railtie""
require ""active_model/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    get ""/unrelated"" => ""learning/questions#new""
    get ""/duplication"" => ""courses/quiz/questions#new""
    get ""/collision"" => ""learning/quiz/extra/questions#new""
    get ""/repetition"" => ""learning/courses/quiz/questions#new""
  end
end

module Courses
  module Quiz
    class Question
      include ActiveModel::Model

      attr_accessor :name
    end

    class QuestionsController < ActionController::Base
      def new
        render partial: ::Courses::Quiz::Question.new(name: ""partial"")
      end
    end
  end
end

module Learning
  class QuestionsController < ActionController::Base
    def new
      render partial: ::Courses::Quiz::Question.new(name: ""partial"")
    end
  end

  module Quiz
    module Extra
      class QuestionsController < ActionController::Base
        def new
          render partial: ::Courses::Quiz::Question.new(name: ""partial"")
        end
      end
    end
  end

  module Courses
    module Quiz
      class QuestionsController < ActionController::Base
        def new
          render partial: ::Courses::Quiz::Question.new(name: ""partial"")
        end
      end
    end
  end
end

require ""minitest/autorun""
require ""rack/test""

class BugTest < Minitest::Test
  include Rack::Test::Methods

  def setup
    super
    @views = Dir.mktmpdir
    ActionController::Base.prepend_view_path @views
  end

  # ✅ PASSES
  def test_unrelated_partial
    view_file ""learning/courses/quiz/questions/_question.html.erb"", ""Nested <%= question.name %>""

    get ""/unrelated""
    assert_equal ""Nested partial"", last_response.body
  end

  # ✅ PASSES
  def test_duplication
    view_file ""courses/quiz/questions/_question.html.erb"", ""De-duplicated <%= question.name %>""

    get ""/duplication""
    assert_equal ""De-duplicated partial"", last_response.body
  end

  # ❌ FAILS
  # AbstractRenderer#merge_prefix_into_object_path breaks after the first match, skips 'extra'
  def test_collision
    view_file ""learning/courses/quiz/questions/_question.html.erb"", ""Harmful de-duplication <%= question.name %>""
    view_file ""learning/courses/extra/courses/quiz/questions/_question.html.erb"", ""Nested <%= question.name %>""

    get ""/collision""
    assert_equal ""Collision partial"", last_response.body
  end

  # ❌ FAILS
  # AbstractRenderer#merge_prefix_into_object_path fails to find overlap because offsets do not align
  def test_repetition
    view_file ""learning/courses/quiz/questions/_question.html.erb"", ""De-duplicated <%= question.name %>""
    view_file ""learning/courses/quiz/courses/quiz/questions/_question.html.erb"", ""Nested <%= question.name %>""

    get ""/repetition""
    assert_equal ""De-duplicated partial"", last_response.body
  end

  private

  def app
    Rails.application
  end

  def view_file(name, content)
    path = Pathname.new(@views).join(name)
    path.dirname.tap(&:mkpath)
    path.write(content)
  end
end
```

### Expected behavior

- Courses::Quiz::Question and Courses::Quiz::QuestionsController
   module duplication is detected and removed
- Courses::Quiz::Question and Learning::Quiz::Extra::QuestionsController
   `quiz/extra` suffix on the controller does not match the `quiz` prefix on the model so no de-duplication is performed. Partial should be `learning/courses/extra/courses/quiz/questions/_question.html.erb`
- Courses::Quiz::Question and Learning::Courses::Quiz::QuestionsController
   `courses/quiz` suffix on controller matches `courses/quiz` prefix on model so repetition is removed. Partial should be `learning/courses/quiz/questions/_question.html.erb`

### Actual behavior

- ✅ Courses::Quiz::Question and Courses::Quiz::QuestionsController
   module duplication is detected and removed
- ❌ Courses::Quiz::Question and Learning::Quiz::Extra::QuestionsController
   `Quiz` is detected as overlap and `Extra` is dropped from the partial path, this is confusing and inconsistent
- ❌ Courses::Quiz::Question and Learning::Courses::Quiz::QuestionsController
   no module duplication is detected, so full module path to controller is prefixed on the object path – deep repetition

### System configuration
**Rails version**: 7.1.0

**Ruby version**: 3.2.3
",sfnelson,User,0,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50914,39735028,50914,Generate devcontainer files by default,open,2,2024-01-29 23:03:25+00:00,2024-02-01 23:57:12+00:00,,"https://github.com/rails/rails/issues/50566

### Motivation / Background

This Pull Request has been created to generate `devcontainer` files for new Rails apps.

### Detail

This Pull Request adds templates for devcontainer files (`devcontainer.json`, `Dockerfile` and `docker-compose.yml`) to be generated on `rails new`.

By default the devcontainer contains the following:
- A redis container for Sidekiq and Action Cable
- A database (SQLite, Postgres, MySQL or MariaDB)
- A Headless chrome container for system tests
- Active Storage configured to use the local disk and with preview features working

If `rails new` is called with options to skip any of the above they will be removed from the dev container config.

The dev container can be skipped entirely with the `--skip_devcontainer` option.

### Additional information

A few changes are needed to other files generated by rails new to make sure new Rails apps can be developed both in a container and locally.

- Differentiate `CABLE_REDIS_URL` and `JOBS_REDIS_URL` instead of just using `REDIS_URL` for both (A PR will need to be opened to turbo-rails to make this change as well)
- For MariaDB and MySQL use the `RAILS_DATABASE_HOST` if it's set (which it will be in a container) and fallback to `localhost`
- For Postgres set the host (`RAILS_DATABASE_HOST`), username and password when in a container

For system tests, we need to configure the `Capybara` host and port to the selenium container. Rather than expose the implementation details of `Capybara` to the developer, we created a new `served_by` method on `SystemTestCase` to configure these.

`db:system:change` re-generates `database.yml`. I added a `skip-devcontainer` option to this generator with a default of `true`. So, any existing apps that use this command will not get devcontainer config in their db yaml. Users can opt in to have devcontainer config added to the new db yml by adding `--skip-devcontainer=false`.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",andrewn617,User,0,actionpack,railties,activestorage,actionmailbox,actiontext,,,,
https://api.github.com/repos/rails/rails/issues/50909,40373,50909,[ci skip] [docs] make increment requirement explicit,open,1,2024-01-29 00:07:29+00:00,2024-01-29 00:20:53+00:00,,"### Motivation / Background

As of December, [ActionController::Metal::RateLimiting](https://github.com/rails/rails/blob/main/actionpack/lib/action_controller/metal/rate_limiting.rb) provides rate limiting through the `increment` method of any cache store. RateLimiting relies on a feature of the underlying store. This feature needs to be documented, so that it remains supported, and so alternative stores know to support it.

This PR has been created to document this behavior.

### Detail

The feature is that `increment`, when passed `expires_in`, will set expiration time when the key is first created, and ignore that option if the key already exists.

That functionality is already tested [here](https://github.com/rails/rails/blob/cf26c5482924babca573e6c01594d77e3321ae58/activesupport/test/cache/behaviors/cache_increment_decrement_behavior.rb#L34), in the `CacheIncrementDecrementBehavior` test module.

This Pull Request changes the documentation of `ActiveSupport::Cache::Store.increment` to reflect a now-required feature of existing stores.",jamiemccarthy,User,1,activesupport,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50901,54629302,50901,[Fix #50897] Autosaving `has_one` sets foreign key attribute when unchanged,open,0,2024-01-28 09:30:20+00:00,2024-01-30 10:42:10+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

Fixes https://github.com/rails/rails/issues/50897
Similar to https://github.com/rails/rails/pull/46759

### Detail

Updates `ActiveRecord::AutosaveAssociation#save_has_one_association` to only update the foreign key attribute on the child record if it has changed. This makes its behaviour consistent with `belongs_to` associations and ensures that `ActiveRecord::ReadOnlyAttributeError` isn't raised when no changes have been made to the attribute.

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

None.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",joshuay03,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50897,14981592,50897,Incorrectly raising `ReadonlyAttributeError` when autosaving `has_one` association with readonly foreign key,open,4,2024-01-27 12:29:15+00:00,2024-01-28 20:15:02+00:00,,"Rails 7.1 sets `raise_on_assign_to_attr_readonly` to true. In the following repro I set a column unrelated to `attr_readonly` yet the error is still being set. If I stop setting this column the error goes away.

### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""

  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord.raise_on_assign_to_attr_readonly = true

ActiveRecord::Schema.define do
  create_table :forum_topics, force: true do |t|
    t.integer :updater_id
    t.text :title
  end

  create_table :forum_posts, force: true do |t|
    t.integer :updater_id
    t.integer :forum_topic_id
    t.text :body
  end
end

class ForumTopic < ActiveRecord::Base
  has_one :original_forum_post, -> { order(""forum_posts.id asc"") }, class_name: ""ForumPost"", inverse_of: :forum_topic
  validates_associated :original_forum_post
  accepts_nested_attributes_for :original_forum_post
end

class ForumPost < ActiveRecord::Base
  attr_readonly :forum_topic_id
  belongs_to :forum_topic

  before_validation do |rec|
    # next # Skipping setting this column makes the error go away
    if persisted?
      rec.updater_id = 456
    else
      rec.updater_id = 123
    end
  end
end

class BugTest < Minitest::Test
  def test_readonly_attr_exception
    topic = ForumTopic.create!(title: ""Hi!"", original_forum_post_attributes: { body: ""What's up?"" })
    topic.update(title: ""nevermind"") # => ActiveRecord::ReadonlyAttributeError: forum_topic_id
    assert_equal(456, topic.original_forum_post.updater_id)
  end
end
```

### System configuration
**Rails version**: master

**Ruby version**: 3.2.2",Earlopain,User,0,activerecord,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/50895,25781337,50895,Enhanced ActiveStorage variant tracking control,open,0,2024-01-27 04:41:38+00:00,2024-01-27 04:42:19+00:00,,"### Motivation / Background

#### My Specific Use Case

In my project, where `ActiveStorage.track_variants = true`, I needed to generate a variant of an image (a thumbnail for a room on a floorplan) but did not want to create a variant record of the original image record. This is because I intended to save the variant on a child relation, separate from the original image record.

#### The Challenge
With `ActiveStorage.track_variants = true` every variant generated through `ActiveStorage` is automatically tracked in the database to the original record. There are cases in this application where we **do** want to track these variant records so I was unable to change the default configuration. This meant to properly generate my variant I had to use `ImageProcessing::Vips` directly to not generate the variant record. This worked but generated two concerns for me:

1. This specific code is dependent on `ImageProcessing::Vips` and if we were to ever migrate to another image processor we would have to remember to update this code as well instead of just relying on the `ActiveStorage` default processor.
2. It strays enough from the standard pattern when generating `ActiveStorage` variants that without good documentation it can become confusing to maintain.

### Detail

This pull request adds the `track` option to the `variant` method which allows for overriding of the `ActiveStorage.track_variants`. This is useful when in cases where you want to stray from the application's standard configuration.

```ruby
ActiveSupport.track_variants
# => true
user.avatar.variant(track: false, resize_to_limit: [100, 100])
# => #<ActiveStorage::Variant:0x00007f4e0004ffb0> 
```
and
```ruby
ActiveSupport.track_variants
# => false
user.avatar.variant(track: true, resize_to_limit: [100, 100])
# => #<ActiveStorage::VariantWithRecord:0x00007f4e0004ffb0> 
```

### Additional information

This is my first time contributing to Rails and I appreciate anyone who takes the time to read all this. I tried my best to follow all conventions and to keep all current functionality, but in the case that I missed something I'd be happy to discuss and fix whatever is needed.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",JaceBayless,User,1,activestorage,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50894,545604,50894,Add cost argument to has_secure_password,open,0,2024-01-26 22:52:13+00:00,2024-01-27 05:30:09+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

There may be instances where a developer is working in an environment where a higher cost than the default (12) for BCrypt is required either due to arbitrary security requirements or the recommended minimum changes and the version of bcrypt used isn't updated.

### Detail

This change adds a `cost:` argument to `has_secure_password`. If provided, it will use that value for the password cost. Its value is validated to make sure it's between `BCrypt::Engine::MIN_COST` and `BCrypt::Engine::MAX_COST`.

Additionally `[password attribute]_cost` is exposed as a convenience method to determine the cost used for the set password hash. This can be used to review the current costs from a user record and either transparently upgrade the user's password or force a password reset.

### Additional information

I'm not 100% married to using `cost` as the argument name as it affects only new passwords created for the record going forward.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",t27duck,User,0,activemodel,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50892,140453075,50892,Documentation: Expand documentation on has_one_attached method [ci-skip].,open,4,2024-01-26 20:02:30+00:00,2024-01-30 18:45:39+00:00,,"### Motivation / Background

Give further context about the requirements for using the has_one_attached method. 

I have an application that does not have an ActiveJob::Backend queue adapter. When I tried to destroy a record, it raised an error that I needed a queue adapter. There is a dependency between the has_one_attached method and a queue adapter. 

That is why adding more context about the functionality and requirements about using the has_one_attached method is important. 

### Checklist

Before submitting the PR make sure the following are checked:

* [X] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [X] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [X] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",Takahashi-Seiji,User,0,activestorage,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50889,2575027,50889,Introduce `ActiveSupport::TestCase.around`,open,11,2024-01-26 15:29:23+00:00,2024-01-29 19:58:05+00:00,,"### Motivation / Background

When discussing testing frameworks for new projects, the absence of `around` hooks is usually a focal point of the conversation that pushes consensus toward alternative test harnesses.

Minitest itself [will not support built-in `around` hooks](https://github.com/minitest/minitest/issues/892). While the [minitest-hooks](https://github.com/jeremyevans/minitest-hooks) gem provides support for `around`, Active Support's callback system makes adding `around` hooks fairly trivial, and is guaranteed to be implemented in the same way as all other callbacks (Controller, Jobs, Mailers, etc.).


### Detail

Add a callback, which runs around `TestCase#setup`, the `test` block, and `TestCase#teardown`. Yields the test class instance and the test case to the block:

```ruby
class Test < ActiveSupport::TestCase
  around do |test_case, &block|
    Client.with(stubbed: true, &block)
  end
end
```

### Additional Information

To support this change, rename the `activesupport/test/testing/after_teardown_test.rb` file to `activesupport/test/testing/callbacks_test.rb`.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,4,activesupport,docs,,,,,,,
https://api.github.com/repos/rails/rails/issues/50886,54629302,50886,"[Fix #50812] Don't duplicate selects, inner and outer joins when merging with STI",open,0,2024-01-26 13:54:50+00:00,2024-01-30 10:41:26+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

Fixes https://github.com/rails/rails/issues/50812

### Detail

This Pull Request changes `#merge_select_values`, `#merge_joins` and `#merge_outer_joins` in `ActiveRecord::Relation::Merger` to unionise selects, inner and outer joins when the two sources of a `merge` are related via STI.

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

The only similar case left in `ActiveRecord::Relation::Merger` is when [merging preloads](https://github.com/rails/rails/blob/68eade83c87ae309191add6dfa4959d7d7e07464/activerecord/lib/active_record/relation/merger.rb#L101).

I don't think that is similar to these cases since the preload values are simply used to preload associations. I thought I would just mention it anyway.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",joshuay03,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50885,122306143,50885,Document Attached::Model#attachment_changes [ci skip],open,3,2024-01-26 13:18:39+00:00,2024-01-26 14:14:49+00:00,,"### Motivation / Background

Adds documentation for the `attachment_changes` method of Active Storage.


### Checklist

Before submitting the PR make sure the following are checked:

* [X] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [X] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",tsvallender,User,0,docs,activestorage,,,,,,,
https://api.github.com/repos/rails/rails/issues/50883,19192189,50883,Put plural inverse association inference behind a configuration flag,open,1,2024-01-26 09:19:56+00:00,2024-01-26 17:23:32+00:00,,"Ref: https://github.com/rails/rails/pull/50284

While having the inverse association configured it generally positive as it avoid some extra queries etc, infering it may break legecy code, as evidenced by how it broke `ActiveStorage::Blob` in https://github.com/rails/rails/pull/50800

As such we can't just enable this behavior immediately, we need to provide and upgrade path for users.

At this stage this PR is just a quick draft to discuss how exactly we should gate this. We can just make it a regular framework default, but perhaps emitting a deprecation warning when we would have infered the inverse relation would help users upgrade?  cc @rafaelfranca as you generally have great insights on this kind of new framework default.

",casperisfine,User,0,activerecord,railties,,,,,,,
https://api.github.com/repos/rails/rails/issues/50879,47848,50879,Transform actionpack documentation to Markdown,open,0,2024-01-25 19:53:03+00:00,2024-01-25 22:29:37+00:00,,"Related to #50759

`./tools/rdoc-to-md -a --only=actionpack` to reproduce the results.",rafaelfranca,User,0,actionpack,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50873,519226,50873,dump schema: ignore tables from any postgres schema,open,0,2024-01-25 13:31:52+00:00,2024-01-25 13:41:01+00:00,,"### Motivation / Background

this pull request improve the current implementation of ignoring table during the schema dump by allowing to ignore tables from other postgres schema than ""public"".

### Detail

This Pull Request changes [REPLACE ME]

### Additional information

the proposed implementation lack the ability to specify exactly from which schema, the table is ignored but I think that even do, it's better than the current implementation.

- [pg_dump documentation](https://www.postgresql.org/docs/current/app-pgdump.html)
- [pattern documentation](https://www.postgresql.org/docs/current/app-psql.html#APP-PSQL-PATTERNS

### Checklist

* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.

I feel that the code change is too small to request updating CHANGELOG or writing new tests",gagalago,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50868,4335742,50868,Comparing `Time` object with an integer doesn't throw an error ,open,2,2024-01-24 22:29:19+00:00,2024-01-30 04:47:17+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails""
  # If you want to test against edge Rails replace the previous line with this:
  # gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""active_support""
require ""active_support/core_ext/time""
require ""minitest/autorun""

class BugTest < Minitest::Test
  def test_stuff
    # This would have raise an argument error in Ruby for trying to compare a Time object with an Integer
    assert Time.now >= Time.now.to_i - 999_999

    assert Time.now.to_i >= Time.now.to_i - 999_999
  end
end
```

### Expected behavior

I'm not sure but I would expect one of the following:

1. Raise an argument error like what Ruby does when trying to compare a `Time` object with an `Integer`
2. Convert the `Time` object to an `Integer` before comparing
3. Convert the `Integer` to a `Time` object before comparing

### Actual behavior

No errors are raised and the code will always evaluate to `false`.

### System configuration
**Rails version**: 7.1.3

**Ruby version**: 3.2.2
",tgxworld,User,0,activesupport,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/50867,1322013,50867,Initialize ActiveRecord::Migrator.migrations_paths at application initialization,open,1,2024-01-24 17:44:10+00:00,2024-01-24 17:46:06+00:00,,"This is already done in rake tasks in the `load_config` task. However, if migrations want to be manipulated/used by a non-rake program this initialization would miss any extra directories configured by the user.

We move the initialization to an initializer block. With this we can remove the rake config since it depends on `environment` anyway.

### Motivation / Background

In our app we use schema-based multitenancy which means we need to setup and migrate for each tenant. We have created
a few helpers to aid in this task. 
Recently, we began modularizing our app, and started moving our migrations into packs. 
Then we started facing issues with migrations that tried to run more than once.
We diagnosed the root cause that our tenant creation command was not invoking `db:load_config` before loading the schema.
This resulted in ""packed"" migrations not being recorded in the initial seed of the `schema_migrations` table. Then when we attempted to run migrations on that tenant those migrations would try to run and fail. 

This Pull Request has been created because a fix for this is to ensure whenever the app is loaded, the correct default paths
are loaded.

### Detail

This Pull Request changes the initialization from a rake task to the app initialization process.


### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",fsateler,User,3,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50862,99586,50862,Accept Tempfile as ActiveStorage attachable,open,0,2024-01-24 10:31:28+00:00,2024-01-29 23:50:09+00:00,,"`File` is already accepted as an attachable, so why not?",shouichi,User,0,activestorage,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50861,5238698,50861,ActionView: Raise on invalid format,open,0,2024-01-24 08:37:24+00:00,2024-01-24 08:37:47+00:00,,"### Motivation / Background

Fixes #45636 

### Detail

This Pull Request adds a check in `ActionView::PathSet#find_all` to ensure all passed formats are valid.

Since `#find_all` is used by `#exists?` and `#find`, the check is extended to all the public methods in the class that search templates.

### Additional information

.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",3v0k4,User,0,actionview,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50858,5657035,50858,Support options for ActionMailer delivery callbacks,open,0,2024-01-23 23:16:27+00:00,2024-01-23 23:16:31+00:00,,"Closes https://github.com/rails/rails/issues/50830.

The code works, but docs/tests etc are currently missing. I want to validate the approach before proceeding.

Inside action mailer I am reusing private methods from the implementation of callbacks from the action controller, see https://github.com/rails/rails/blob/main/actionpack/lib/abstract_controller/callbacks.rb.

The questions to consider are:
1. Should the mailer callbacks really depend on the internals of controller callbacks, considering that it already includes it https://github.com/rails/rails/blob/776626ff987a96201b0bdbd86d716ca6698fa8b3/actionmailer/lib/action_mailer/base.rb#L493
2. Controllers callbacks have a `raise_on_missing_callbacks_action`, see https://github.com/rails/rails/blob/776626ff987a96201b0bdbd86d716ca6698fa8b3/actionpack/lib/abstract_controller/callbacks.rb#L36 which can be set via `config.action_controller. raise_on_missing_callbacks_action`. This kinda makes sense for action mailer too, so should we introduce `config.action_mailer.raise_on_missing_callbacks_action` config? 
3. Controller callbacks use the word `""controller""`, see https://github.com/rails/rails/blob/776626ff987a96201b0bdbd86d716ca6698fa8b3/actionpack/lib/abstract_controller/callbacks.rb#L54, while for mailer we should use the `""mailer""` word or should we make the message text more generic? 

cc @bensheldon ",fatkodima,User,0,actionmailer,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50856,29010172,50856,Document autosave validation behavior for ActiveRecord associations [ci skip],open,1,2024-01-23 19:41:36+00:00,2024-01-23 21:03:11+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
This Pull Request needs to be merged to document the behavior of autosave: true enabling validations for belongs_to and has_one associations in ActiveRecord. Currently, this behavior is implemented in the code but not mentioned in the official documentation. This can lead to confusion for developers who rely on the Rails guides for accurate information on how ActiveRecord associations work. Including this information will improve the clarity and comprehensiveness of the Rails documentation.
-->

### Detail

This Pull Request adds documentation comments to the belongs_to and has_one methods in ActiveRecord::Associations to explain that autosave: true also enables validations by default. This is to reflect the actual behavior of these methods, as described in the source code and observed in application behavior.

### Additional information

Reference to the issue discussed in Rails: Undocumented - validations enabled by autosave #50807
Inline gemfile with bundler example -
``` ruby
require ""bundler/inline""

gemfile do
  source ""https://rubygems.org""
  gem ""rails"", ""7.1.3""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :authors do |t|
    t.string :name
  end

  create_table :books do |t|
    t.belongs_to :author
    t.string :title
  end
end

class Author < ActiveRecord::Base
  has_one :book, autosave: true
end

class Book < ActiveRecord::Base
  belongs_to :author
  validates :title, presence: true
end

class BugTest < Minitest::Test
  def test_autosave_with_validations
    author = Author.new(name: ""J.K. Rowling"")
    author.build_book # Not setting a title to trigger validation failure

    refute author.save, ""Author should not be saved due to book validation failure""
    assert author.book.errors.full_messages.include?(""Title can't be blank""), ""Book should contain error on title""
  end
end

```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change, specifically the addition of documentation for autosave: true behavior.
* [x] Commit message includes a detailed description of the changes, for example: [Doc #50807] Document autosave validation behavior for associations.
* [x] Tests are not required as this is a documentation update.
* [x] CHANGELOG is not updated since this is a minor documentation change and does not affect library behavior.
",Dmoment,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50852,2575027,50852,Action View: Fallback to existing partial when possible,open,0,2024-01-23 15:19:52+00:00,2024-01-23 15:27:15+00:00,,"Closes [#50844][]

Motivation / Background
---

A controller declared in the top-level module can render a top-level Active Model instance whose partial is declared in the root view directory (like `articles/_article.html.erb`).

A controller scoped within a module can render an Active Model instance whose partial is similarly scoped within view directory (like `scoped/articles/_article.html.erb`).

A controller scoped within a module cannot render an Active Model instance whose partial is declared in the root view directory (like `articles/_article.html.erb`), despite the absence of a similarly scoped partial.

This is intended behavior that's powered by
[`config.action_view.prefix_partial_path_with_controller_namespace = true`][prefix_partial_path_with_controller_namespace] (`true` by default).

This change was introduced in March of 2012 as part of [#5625][].

Detail
---

As a consumer of Action View, my intuition is that the lookup would fallback, in the same way that a controller that inherits from `ApplicationController` could define its own view, then rely on fallback to render an `app/views/application` partial.

This commit modifies the behavior to gracefully fall back to the root-level view partial.

Checklist
---

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.

[#59844]: https://github.com/rails/rails/issues/50844
[prefix_partial_path_with_controller_namespace]: https://guides.rubyonrails.org/configuring.html#config-action-view-prefix-partial-path-with-controller-namespace
[#5625]: https://github.com/rails/rails/pull/5625
",seanpdoyle,User,0,actionview,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50850,1564376,50850,belongs_to association doesn't work with composite `primary_key` option,open,4,2024-01-23 10:56:14+00:00,2024-01-25 15:00:48+00:00,,"### Steps to reproduce
I have an aggregator model that represents the same entity from different providers. This model has a single primary but some of the providers have a composite key. So I must use 2 columns to be able to build the reflection

```
class Ticker < ApplicationRecord
  # this model has gvkey and iid but they are not the primary key. just fields to build the relation
  has_many :co_actions, primary_key: [:gvkey, :iid], query_constraints: [:gvkey, :iid]
end

class CoAction
  # this model has gvkey and iid as a foreign key
  belongs_to :ticker, primary_key: [:gvkey, :iid], query_constraints: [:gvkey, :iid]
end
```

When I run
```
CoAction.take.ticker
```
it returns
```
/activerecord-7.1.3/lib/active_record/reflection.rb:576:in `check_validity!': Association CoAction#ticker primary key [:gvkey, :iid] doesn't match with foreign key [""gvkey"", ""iid""]. Please specify query_constraints, or primary_key and foreign_key values. (ActiveRecord::CompositePrimaryKeyMismatchError)
```
but I would expect to receive the ticker model instead. The composite_primary_key gem does what expected but rails 7.1.3 relation builder converts the primary key into a string instead. So what you see in the message is a string `""[:gvkey, :iid]""`. (ActiveRecord::Reflection::BelongsToReflection#association_primary_key)

### System configuration
**Rails version**: 7.1.3

**Ruby version**: 3.2.1
",bguban,User,1,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50849,24068,50849,Fixes ActionView::Template::Error when pasting images via Trix,open,0,2024-01-23 02:14:58+00:00,2024-01-23 02:15:02+00:00,,"The asset pipeline really shouldn't be checked for remote images regardless, but this also happens to fix an issue with images pasted into Trix that get serialized as action-text-attachments with ""blob:"" urls.
",schristm,User,0,actiontext,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50848,1080592,50848,O(N^2) operation in `CollectionAssociation#replace_common_records_in_memory` and **another** O(N^2) operation in `ActiveStorage::Attached::Many#attach`,open,0,2024-01-23 01:29:33+00:00,2024-01-23 01:39:19+00:00,,"### Steps to reproduce
Apologies for not following the template. I wasn't sure how to include my half-baked fix with it... I have full repro and additional information here: [malavbhavsar/rails#1](https://github.com/malavbhavsar/rails/pull/1) 

```ruby
user_1 = User.create!(name: ""Jason"")
user_1.highlights.attach(
  1000.times.map do |i|
    {
      io: StringIO.new(""Example string inside text_file_#{i}""),
      filename: ""text_file_#{i}.txt"",
      content_type: ""text/plain"",
    }
  end
)
user_1.save!
user_1.reload

# Below operation takes 5 seconds
Benchmark.bm(30) do |x|
  x.report(""attach performance without fix"") do
    user_1.highlights.attach(
      {
        io: StringIO.new(""another text file. wow.""),
        filename: ""text_file_another.txt"",
        content_type: ""text/plain"",
      }
    )
  end
end
```

### Expected behavior
Execution time of `#attach` should not depend on how big a collection is.

### Actual behavior
On a big `has_many_attached` collection, `#attach` takes a long time. If there are 1000 existing attachments, it will take 5 seconds to attach a new one.

### System configuration
**Rails version**: `main`

**Ruby version**: `3.1.4`

### Explanation
When we call `#attach` on an already big activestorage collection, it first calls `record.public_send(""#{name}="", blobs + attachables.flatten) # e.g. record.highlights=...`. This eventually ends up calling `CollectionAssociation#replace_common_records_in_memory` which has been discovered as a performance problem in #46652. It ends up calling `Array#index` **n** times and `#==` **(n*n1)/2** times. In this case, `499500` times.

For ActiveRecord has_many collections, this is not a huge problem because, in my experience, `post.comments = new_comments` is not a common pattern. The general use case is `post.comments << new_comment`, which does pretty well performance-wise.

Unfortunately for `has_many_attached` collection, calling `#attach` is a common use case and it calls `record.things_attachments=` under the hood. Aside - seems like people are running into this [problem](https://discuss.rubyonrails.org/t/attach-pictures-gets-very-slow/81684).

### Flamegraph
![flamegraph_1](https://github.com/rails/rails/assets/1080592/0bef4acf-aaa7-44b8-a830-daf4a6717ab5)

### Possible solutions
- Get #46652 merged
- If we are concerned about the increased complexity of `@target_index_map` in #46652, I tried the [same approach with a local variable](https://github.com/malavbhavsar/rails/pull/1/files#diff-ceff30ddab4e756e3a70ece45076eb17ff2f587a068dae657d2ad3a265a3f0d6) and it helped.

### ANOTHER problem
As flamegraph shows, there is another O(N^2) in `#attach`. That one is coming from `Attached::Changes::CreateOneOfMany#find_attachment`. I haven't figured out a possible solution for it... I don't understand the change tracking(?) active storage is doing but if someone can help me understand I can try fixing it. I assume this will probably need a new `Attached::Changes::AttachMany` and `Attached::Changes::AttachOne`?

### Workaround
I have found that creating blobs and attachments manually gets rid of BOTH problems and doesn't leave `highlights_attachments` and `highlights_blobs` stale.

```ruby
user_3 = User.create!(name: ""Lauren"")
user_3.highlights.attach(
  1000.times.map do |i|
    {
      io: StringIO.new(""Example string inside text_file_#{i}""),
      filename: ""text_file_#{i}.txt"",
      content_type: ""text/plain"",
    }
  end
)
user_3.save!
user_3.reload

# Below operation takes 0.02 second
ApplicationRecord.transaction do
  blob = ActiveStorage::Blob.create_and_upload!(
    io: StringIO.new(""another text file. wow.""),
    filename: ""text_file_another.txt"",
    content_type: ""text/plain"",
  )
  user_3.highlights_attachments.create!(
    blob_id: blob.id,
    name: 'highlights',
  )
  user_3.save!
end
```

### Final performance stats

```
                                              user     system      total        real
attach performance without fix            4.711782   0.013564   4.725346 (  4.760098)
                                              user     system      total        real
attach performance with half-ish fix      1.855833   0.009120   1.864953 (  1.901090)
                                              user     system      total        real
attach performance manual                 0.024790   0.002624   0.027414 (  0.030269)
```

cc: @jonathanhefner, @jeffcarbs, @danny-pflughoeft",malavbhavsar,User,0,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50846,1946610,50846,Set ActiveRecord::RecordNotFound#id when raised from a call to #reload a deleted record,open,0,2024-01-23 00:04:37+00:00,2024-01-23 16:49:20+00:00,,"### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created because I am writing some tests for my app around records being deleted by calling `reload`, and there was no easy way to assert that the record raising the `ActiveRecord::RecordNotFound` exception was the record I was expecting

### Detail

This Pull Request changes `raise_record_not_found_exception!` to find IDs based on the primary key from the where condition, if no IDs are explicitly passed

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",segiddins,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50844,2575027,50844,`ActionView::Template::Error`: Missing Active Model partial when rendered from Controller declared in module,open,2,2024-01-22 22:05:18+00:00,2024-01-23 15:20:29+00:00,,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails""
  # If you want to test against edge Rails replace the previous line with this:
  # gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""active_model/railtie""
require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    get ""/"" => ""test#index""
    get ""/scoped"" => ""scoped/test#index""
  end
end

class Model
  include ActiveModel::Model
end

class TestController < ActionController::Base
end

module Scoped
  class TestController < ActionController::Base
  end
end

require ""minitest/autorun""
require ""rack/test""

class BugTest < Minitest::Test
  include Rack::Test::Methods

  def setup
    super
    @views = Dir.mktmpdir
    ActionController::Base.prepend_view_path @views

    view_file ""models/_model.html.erb"", ""Rendered""
    view_file ""test/index.html.erb"", ""<%= render Model.new %>""
    view_file ""scoped/test/index.html.erb"", ""<%= render Model.new %>""
  end

  # ✅ PASSES
  def test_controller_renders_unscoped_partial
    view_file ""models/_model.html.erb"", ""Rendered""
    view_file ""test/index.html.erb"", ""<%= render Model.new %>""

    get ""/""

    assert_predicate last_response, :ok?
    assert_equal last_response.body, ""Rendered""
  end

  # ✅ PASSES
  def test_scoped_controller_renders_scoped_partial
    view_file ""scoped/models/_model.html.erb"", ""Rendered""
    view_file ""scoped/test/index.html.erb"", ""<%= render Model.new %>""

    get ""/scoped""

    assert_predicate last_response, :ok?
    assert_equal last_response.body, ""Rendered""
  end

  # 🔴 FAILS
  def test_scoped_controller_renders_unscoped_partial
    view_file ""models/_model.html.erb"", ""Rendered""
    view_file ""scoped/test/index.html.erb"", ""<%= render Model.new %>""

    get ""/scoped""

    assert_predicate last_response, :ok?
    assert_equal last_response.body, ""Rendered""
  end

  private
    def app
      Rails.application
    end

    def view_file(name, content)
      path = Pathname.new(@views).join(name)
      path.dirname.tap(&:mkpath)
      path.write(content)
    end
end
```

### Expected behavior

A controller declared in the top-level module (as exercised by `test_controller_renders_unscoped_partial`) can render a top-level Active Model instance whose partial is declared in the root view directory (like `models/_model.html.erb`).

A controller scoped within a module (as exercised by `test_scoped_controller_renders_scoped_partial`) can render an Active Model instance whose partial is similarly scoped within view directory (like `scoped/models/_model.html.erb`).

A controller scoped within a module (as exercised by `test_scoped_controller_renders_unscoped_partial`) should be able to render an Active Model instance whose partial is declared in the root view directory (like `models/_model.html.erb`), despite the absence of a similarly scoped partial. **It should gracefully fall back to the root-level view partial).

### Actual behavior

The `test_scoped_controller_renders_unscoped_partial` test raises an Action View error:

```
ActionView::Template::Error (Missing partial scoped/models/_model with {:locale=>[:en], :formats=>[:html], :variants=>[], :handlers=>[:raw, :erb, :html, :builder, :ruby]}.
                                                                                                          
Searched in:                                                                                              
  * ""/var/folders/4q/q308vb3s12x2rzrgppdsz0540000gn/T/d20240122-19453-6bve0b""
):                                                                                                        
    1: <%= render Model.new %>                                                                            
                                          
```

It cannot resolve the `models/_model` partial, since the rendering controller is namespaced within `scoped/`.

### System configuration
**Rails version**: `7.1.3`

**Ruby version**: `3.2.0`
",seanpdoyle,User,0,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50842,40461477,50842,How to use Azure Managed Identity for authentication and authorization for Ruby On Rails Active Storage?,open,0,2024-01-22 16:41:34+00:00,2024-01-22 16:41:34+00:00,,"Current setup
```yaml
azure:
  service: AzureStorage
  storage_account_name: <%= VaultService.get_secret(""AZURE-STORAGE::AZURE-STORAGE-ACCOUNT-NAME"") %>
  storage_access_key: <%= VaultService.get_secret(""AZURE-STORAGE::AZURE-STORAGE-ACCOUNT-ACCESS-KEY"") %>
  container: <%= VaultService.get_secret('AZURE-ATTACHMENTS-BUCKET-NAME') %>
```

Given the implementation of accessing Azure Storage using Access Token. [Link](https://github.com/azure/azure-storage-ruby/tree/master/blob#access-token)
 
```ruby
require ""azure/storage/common""

access_token = <your initial access token>

# Creating an instance of `Azure::Storage::Common::Core::TokenCredential`
token_credential = Azure::Storage::Common::Core::TokenCredential.new access_token
token_signer = Azure::Storage::Common::Core::Auth::TokenSigner.new token_credential
blob_token_client = Azure::Storage::Blob::BlobService.new(storage_account_name: <your_account_name>, signer: token_signer)
```


Given the implementation of Active Storage for Ruby on Rails. It uses azure-storage-blob gem under the hood.
[link](https://github.com/rails/rails/blob/61d6eb119fc53678d8f5028bd73ae77e69b91fb6/activestorage/lib/active_storage/service/azure_storage_service.rb#L16)

```ruby
    def initialize(storage_account_name:, storage_access_key:, container:, public: false, **options)
      @client = Azure::Storage::Blob::BlobService.create(storage_account_name: storage_account_name, storage_access_key: storage_access_key, **options)
      @signer = Azure::Storage::Common::Core::Auth::SharedAccessSignature.new(storage_account_name, storage_access_key)
      @container = container
      @public = public
    end
```

New Setup, config/storage.yml

```yaml
azure:
  service: AzureStorage
  storage_account_name: <%= VaultService.get_secret(""AZURE-STORAGE::AZURE-STORAGE-ACCOUNT-NAME"") %>
  container: <%= VaultService.get_secret('AZURE-ATTACHMENTS-BUCKET-NAME') %>
```

Monkey patched to use the above information to use active storage using managed identity

```ruby
module ActiveStorage
  class Service::AzureStorageService < Service
    def initialize(storage_account_name:, container:, public: false, **options)
      access_token = AzureAd::ManagedIdentityTokenProvider.new('https://storage.azure.com/', client_id: ENV['AKS_MANAGED_IDENTITY_ID']).get_authentication_header.split(' ').last
      # Creating an instance of `Azure::Storage::Common::Core::TokenCredential`
      token_credential = ::Azure::Storage::Common::Core::TokenCredential.new access_token
      token_signer = ::Azure::Storage::Common::Core::Auth::TokenSigner.new token_credential
      @client = Azure::Storage::Blob::BlobService.create(storage_account_name: storage_account_name, signer: token_signer, **options)
      user_delegation_key = @client.get_user_delegation_key(DateTime.now - 1.minute, DateTime.now + 6.day + 23.hours)
      @signer = Azure::Storage::Common::Core::Auth::SharedAccessSignature.new(storage_account_name: storage_account_name, user_delegation_key: user_delegation_key )
      @container = container
      @public = public
    rescue StandardError => e
      raise e unless Rake.respond_to?(:application) && (!Rake.application.top_level_tasks.exclude?('assets:precompile') || !Rake.application.top_level_tasks.exclude?('source_map:upload_source_map'))
    end
  end
end
```


Is this approach correct? (I am yet to test this.). Also, is there any other approach on how to achieve this? I have posted the question on [stackoverflow](https://stackoverflow.com/questions/77846948/can-we-connect-active-storage-in-ruby-on-rails-with-azure-using-managed-identity) as well.



### System configuration
**Rails version**: Rails 6.1.7.3

**Ruby version**: ruby 3.2.2
",avivansh,User,0,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50838,5077225,50838,Fix SQLite table definition parsing bug to handle commas in default function definitions,open,0,2024-01-22 13:18:21+00:00,2024-01-22 13:18:26+00:00,,"### Motivation / Background

This Pull Request fixes a bug in the low-level SQLite adapter introspection logic. I came across the bug when working with virtual columns and JSON, but there are many possible cases where this would cause problems. Here is one reproducible bug script though:

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"");
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.json :payload, null: false, default: {}
    t.virtual :external_id, type: :string, as: ""JSON_EXTRACT(payload, '$.id')"", stored: true, null: false, index: true
  end
end

class Post < ActiveRecord::Base; end

class BugTest < Minitest::Test
  def test_virtual_column_with_comma_in_definition_is_autopopulated
    post = Post.create!(payload: { id: 'pst_1' })

    assert_equal 'pst_1', post.external_id
  end
end
```

### Detail

This Pull Request more intelligently parses the SQL string description of the table to ensure that we only split by commas that mark a new column definition. In order to accomplish this, the table parsing method needs the list of column names for the table. When `table_structure_sql` is called by `table_structure_with_collation`, these can be supplied as they are already present; when it is called by `foreign_keys`, however, they are not present and thus must be fetched.

I also added a simple regression test as a part of the virtual column test case.

### Additional information

This bug has existed for a long time, but I most recently touched the relevant code in https://github.com/rails/rails/pull/49376.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.

cc: @byroot (this is related to #49346), @tenderlove (this is related to https://github.com/rails/rails/pull/49290), @yahonda (this is related to https://github.com/rails/rails/pull/49376)
",fractaledmind,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50837,5657035,50837,Ensure pre-7.1 migrations use legacy index names when using `rename_table`,open,0,2024-01-22 12:59:01+00:00,2024-01-28 20:19:02+00:00,,"Fixes https://github.com/rails/rails/issues/50833.
Follow up to https://github.com/rails/rails/pull/47753 and https://github.com/rails/rails/pull/47863.

The easiest way to preserve the old behavior is to rename indexes back after the `rename_table` was run.",fatkodima,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50835,152256436,50835,ActiveStorage::FileNotFoundError (ActiveStorage::FileNotFoundError),open,1,2024-01-22 10:07:53+00:00,2024-01-23 13:33:32+00:00,,"### Steps to reproduce
I have upgraded my rails application from 6.0 to 6.1 . Since then when I am  executing below queries

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
 d = Document.find(768365)
 d.page_image.variant(resize_to_limit: Document::PAGE_IMAGE_STYLES[:small]).processed

```
I am getting this error
### Actual behavior
  ActiveStorage::FileNotFoundError (ActiveStorage::FileNotFoundError)

### System configuration
**Rails version**: 7.0.8

**Ruby version**: 3.0.6
",raoehtesham03,User,0,more-information-needed,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50833,111689,50833,`ActiveRecord::Migration[7.0]`'s `rename_table` uses 7.1's new truncated index name format,open,1,2024-01-22 02:09:26+00:00,2024-01-23 03:17:22+00:00,,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", ""7.1.3""
  # If you want to test against edge Rails replace the previous line with this:
  # gem ""rails"", github: ""rails/rails"", branch: ""main""

  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
end

class Post < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_index_name_after_rename_table_with_long_table_name
    long_table_name = ""a"" * 48

    migration_class = Class.new(ActiveRecord::Migration[7.0]) do
      define_method :migrate do |x|
        create_table :posts do |t|
          t.string :title
          t.index :title
        end
        rename_table :posts, long_table_name
      end
    end
    migration = migration_class.new

    ActiveRecord::Migrator.new(
      :up,
      [migration],
      ActiveRecord::Base.connection.schema_migration,
      ActiveRecord::Base.connection.internal_metadata
    ).migrate

    assert_equal ""index_#{long_table_name}_on_title"", ActiveRecord::Base.connection.indexes(long_table_name).first.name
  end
end
```

### Expected behavior

The above test should pass.

This means that since the index name was renamed to `index_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_on_title` in Rails 7.0 and earlier, if `ActiveRecord::Migration[7.0]` or earlier is specified, the same name should be used even in Rails 7.1 or later.

### Actual behavior

The above test fails with the following output:

```
F

Failure:
BugTest#test_index_name_after_rename_table_with_long_table_name [example.rb:53]:
--- expected
+++ actual
@@ -1 +1 @@
-""index_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_on_title""
+""idx_on_title_0b3d36c24b""



bin/rails test example.rb:32



Finished in 0.026827s, 37.2753 runs/s, 37.2753 assertions/s.
1 runs, 1 assertions, 1 failures, 0 errors, 0 skips
```

As a result, if db/migrate contains `rename_table`, the index names created between Rails 7.0 and 7.1 may be different.

### System configuration
**Rails version**: 7.1.3

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]

### Other information

This is due to the following change:

- https://github.com/rails/rails/pull/47753

I think a similar change to the following is needed for `#rename_table`:

- https://github.com/rails/rails/pull/47863
",r7kamura,User,0,activerecord,attached PR,With reproduction steps,,,,,,
https://api.github.com/repos/rails/rails/issues/50830,39729785,50830,Add support for `ActionMailer.*_delivery` callback `only` and `except` options,open,2,2024-01-21 12:31:43+00:00,2024-01-21 18:59:17+00:00,,"### Steps to reproduce

Currently ActionMailer's `*_delivery` callbacks do not support `only` and `except` filters, which are quite useful because some callback actions are required for a subset of mailer methods. Technically, only/except can be emulated via `if` option, but another problem is that's not clear from the documentation which options can be passed (currently `only` and `except` are simply ignored).

I believe that many developers might except `ActionMailer` to behave just like `ActionController`,  so current API implementation might lead to unexpected bugs.

Note that documentation on `before_action` (and similar callbacks) explicitly refer to possible options:

> before_action(names, block)[Link](https://api.rubyonrails.org/v7.1.3/classes/AbstractController/Callbacks/ClassMethods.html#method-i-before_action)
> Append a callback before actions. See [_insert_callbacks](https://api.rubyonrails.org/v7.1.3/classes/AbstractController/Callbacks/ClassMethods.html#method-i-_insert_callbacks) for parameter details.

### Expected behavior
At least some explicit info on possible `*_delivery` callback options, or (which would be better) support for `only` and `except` options.

### Actual behavior
Mentioned options are simply ignored, no documentation on possible options.

### System configuration
**Rails version**: 7.1.3

**Ruby version**: 3.0.6
",viralpraxis,User,0,actionmailer,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50829,6979737,50829,Fix query references for non-hash association where clause values,open,3,2024-01-21 06:11:40+00:00,2024-01-30 22:33:07+00:00,,"### Detail

This PR fixes an issue where non-hash where-clause values for associations would not set `references_values`. This could (and often does) end up causing hard-to-debug SQL errors due to association name vs table name mismatch, e.g. querying on a singular association name while the actual join table is plural, or vice-versa due to a prior scope.

More detailed reproduction script:  https://gist.github.com/ezekg/5969735eb8c5092fb25198bd8fac4053

#### Before

```rb
scope = Comment.where(post: { id: post })
scope.references_values # => [""post""]

scope = Comment.where(post: post)
scope.references_values # => []
```

I'd expect these to be synonymous since [`#id` is called on `post`](https://github.com/ezekg/rails/blob/c37450b76b24cac7951032c4210db17a9c1b7f51/activerecord/lib/active_record/relation/predicate_builder.rb#L58) for the second case.

#### After

```rb
scope = Comment.where(post: { id: post })
scope.references_values # => [""post""]

scope = Comment.where(post: post)
scope.references_values # => [""post""]
```

With this patch, they're now more or less synonymous, both setting `references_values`.

Since this is likely a breaking change (it broke a few tests in [keygen-sh/keygen-api](https://github.com/keygen-sh/keygen-api) when testing against the patch), this may require some more thought. But it is worth noting that all broken tests were related to various workarounds for this particular bug.

Let me know what you guys think is the best course of action here.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",ezekg,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50828,22231095,50828,Add examples for form helper tags [ci skip],open,5,2024-01-21 05:48:04+00:00,2024-02-01 04:02:20+00:00,,"### Detail

This Pull Request add examples for `FormTagHelper` methods.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",akhilgkrishnan,User,0,actionview,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50827,286604,50827,System tests not working on Rails 7.1.3 running on a remote machine/docker container.,open,4,2024-01-21 00:44:06+00:00,2024-01-30 12:48:39+00:00,,"### Steps to reproduce

I've been running my system tests using a remote browser (on a docker container) since Rails 7.0 without a problem, with the following set up.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
class ApplicationSystemTestCase < ActionDispatch::SystemTestCase
  driven_by :selenium,
            using: :chrome,
            screen_size: [1400, 1400],
            options: { browser: :remote,
                       url: 'http://chrome-server:4444' } do |driver_option|
    driver_option.add_argument 'disable-dev-shm-usage'
  end
```

It looks like the problem was introduced in #49908 and related issues/fixes.

I fixed it locally just monkeypatching `Selenium::Webdriver::DriverFinder.path` just to return nil.

Having a look at the code, I think that it would be nice to avoid `Browser#preload` when browser is `:remote` in:

https://github.com/rails/rails/blob/3064d4f53a48beb107a549a2249820350e698050/actionpack/lib/action_dispatch/system_testing/driver.rb#L19

If you think it's the right way to tackle it, I could post a fix.

### Actual behavior
After a while, an exception is raised:

```
Selenium::WebDriver::Error::SessionNotCreatedError: Could not start a new session. Error while creating session with the driver service. Stopping driver service: Could not start a new session. Response code 500. Message: unknown error: no chrome binary at /root/.cache/selenium/chrome/linux64/120.0.6099.109/chrome 
Host info: host: 'c3260b1b08ce', ip: '192.168.16.3'
Build info: version: '4.10.0', revision: 'c14d967899'
System info: os.name: 'Linux', os.arch: 'aarch64', os.version: '6.5.11-linuxkit', java.version: '11.0.18'
Driver info: driver.version: unknown
Build info: version: '4.10.0', revision: 'c14d967899'
System info: os.name: 'Linux', os.arch: 'aarch64', os.version: '6.5.11-linuxkit', java.version: '11.0.18'
Driver info: driver.version: unknown
    [remote server] org.openqa.selenium.grid.node.config.DriverServiceSessionFactory(DriverServiceSessionFactory.java):210:in `apply'
    [remote server] org.openqa.selenium.grid.node.config.DriverServiceSessionFactory(DriverServiceSessionFactory.java):69:in `apply'
    [remote server] org.openqa.selenium.grid.node.local.SessionSlot(SessionSlot.java):147:in `apply'
    [remote server] org.openqa.selenium.grid.node.local.LocalNode(LocalNode.java):467:in `newSession'
    [remote server] org.openqa.selenium.grid.distributor.local.LocalDistributor(LocalDistributor.java):643:in `startSession'
    [remote server] org.openqa.selenium.grid.distributor.local.LocalDistributor(LocalDistributor.java):560:in `newSession'
    [remote server] org.openqa.selenium.grid.distributor.local.LocalDistributor$NewSessionRunnable(LocalDistributor.java):814:in `handleNewSessionRequest'
    [remote server] org.openqa.selenium.grid.distributor.local.LocalDistributor$NewSessionRunnable(LocalDistributor.java):773:in `lambda$run$1'
    [remote server] java.util.concurrent.ThreadPoolExecutor(ThreadPoolExecutor.java):1128:in `runWorker'
    [remote server] java.util.concurrent.ThreadPoolExecutor$Worker(ThreadPoolExecutor.java):628:in `run'
    [remote server] java.lang.Thread(Thread.java):829:in `run'
    /usr/local/bundle/ruby/3.2.0/gems/selenium-webdriver-4.16.0/lib/selenium/webdriver/remote/response.rb:55:in `assert_ok'
    /usr/local/bundle/ruby/3.2.0/gems/selenium-webdriver-4.16.0/lib/selenium/webdriver/remote/response.rb:34:in `initialize'
    /usr/local/bundle/ruby/3.2.0/gems/selenium-webdriver-4.16.0/lib/selenium/webdriver/remote/http/common.rb:83:in `new'
    /usr/local/bundle/ruby/3.2.0/gems/selenium-webdriver-4.16.0/lib/selenium/webdriver/remote/http/common.rb:83:in `create_response'
    /usr/local/bundle/ruby/3.2.0/gems/selenium-webdriver-4.16.0/lib/selenium/webdriver/remote/http/default.rb:103:in `request'
    /usr/local/bundle/ruby/3.2.0/gems/selenium-webdriver-4.16.0/lib/selenium/webdriver/remote/http/common.rb:59:in `call'
    /usr/local/bundle/ruby/3.2.0/gems/selenium-webdriver-4.16.0/lib/selenium/webdriver/remote/bridge.rb:601:in `execute'
    /usr/local/bundle/ruby/3.2.0/gems/selenium-webdriver-4.16.0/lib/selenium/webdriver/remote/bridge.rb:53:in `create_session'
    /usr/local/bundle/ruby/3.2.0/gems/selenium-webdriver-4.16.0/lib/selenium/webdriver/common/driver.rb:317:in `block in create_bridge'
    <internal:kernel>:90:in `tap'
    /usr/local/bundle/ruby/3.2.0/gems/selenium-webdriver-4.16.0/lib/selenium/webdriver/common/driver.rb:316:in `create_bridge'
    /usr/local/bundle/ruby/3.2.0/gems/selenium-webdriver-4.16.0/lib/selenium/webdriver/common/driver.rb:74:in `initialize'
    /usr/local/bundle/ruby/3.2.0/gems/selenium-webdriver-4.16.0/lib/selenium/webdriver/remote/driver.rb:38:in `initialize'
    /usr/local/bundle/ruby/3.2.0/gems/selenium-webdriver-4.16.0/lib/selenium/webdriver/common/driver.rb:57:in `new'
    /usr/local/bundle/ruby/3.2.0/gems/selenium-webdriver-4.16.0/lib/selenium/webdriver/common/driver.rb:57:in `for'
    /usr/local/bundle/ruby/3.2.0/gems/selenium-webdriver-4.16.0/lib/selenium/webdriver.rb:89:in `for'
    /usr/local/bundle/ruby/3.2.0/gems/capybara-3.39.2/lib/capybara/selenium/driver.rb:83:in `browser'
    /usr/local/bundle/ruby/3.2.0/gems/actionpack-7.1.3/lib/action_dispatch/system_testing/driver.rb:55:in `block in register_selenium'
    <internal:kernel>:90:in `tap'
    /usr/local/bundle/ruby/3.2.0/gems/actionpack-7.1.3/lib/action_dispatch/system_testing/driver.rb:54:in `register_selenium'
    /usr/local/bundle/ruby/3.2.0/gems/actionpack-7.1.3/lib/action_dispatch/system_testing/driver.rb:41:in `block in register'
    /usr/local/bundle/ruby/3.2.0/gems/capybara-3.39.2/lib/capybara/session.rb:105:in `driver'
    /usr/local/bundle/ruby/3.2.0/gems/capybara-3.39.2/lib/capybara/session.rb:91:in `initialize'
    /usr/local/bundle/ruby/3.2.0/gems/capybara-3.39.2/lib/capybara.rb:421:in `new'
    /usr/local/bundle/ruby/3.2.0/gems/capybara-3.39.2/lib/capybara.rb:421:in `block in session_pool'
    /usr/local/bundle/ruby/3.2.0/gems/capybara-3.39.2/lib/capybara.rb:317:in `current_session'
    /usr/local/bundle/ruby/3.2.0/gems/capybara-3.39.2/lib/capybara/dsl.rb:46:in `page'
    /usr/local/bundle/ruby/3.2.0/gems/actionpack-7.1.3/lib/action_dispatch/system_testing/test_helpers/screenshot_helper.rb:106:in `save_image'
    /usr/local/bundle/ruby/3.2.0/gems/actionpack-7.1.3/lib/action_dispatch/system_testing/test_helpers/screenshot_helper.rb:36:in `take_screenshot'
    /usr/local/bundle/ruby/3.2.0/gems/actionpack-7.1.3/lib/action_dispatch/system_testing/test_helpers/screenshot_helper.rb:47:in `take_failed_screenshot'
    /usr/local/bundle/ruby/3.2.0/gems/actionpack-7.1.3/lib/action_dispatch/system_testing/test_helpers/setup_and_teardown.rb:8:in `before_teardown'
```

### System configuration
**Rails version**: 7.1..3

**Ruby version**: 3.2.2 (2023-03-30 revision e51014f9c0) [aarch64-linux]
",srabuini,User,0,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50826,707418,50826,[docs] Add more examples to `#in_order_of` [ci-skip],open,1,2024-01-21 00:21:26+00:00,2024-01-31 16:16:51+00:00,,"### Motivation / Background

`#in_order_of` is an excellent method and makes ordering enum columns easier, and many complex order case/when queries can be refactored to use it.

This PR was created because I believe having more examples would help people understand this method a bit better.

Also, I think it's useful to document that this method will order results, but also FILTER them, excluding rows in which the column doesn't match any of the given values.

So I expanded the description and added these examples:
- what happens when dealing with `enum` +columns+
- what happens when passing `nil` as a +value+ for nullable columns

Here's a gist with some tests: https://gist.github.com/thdaraujo/7d9aa5ffd1b61bf57604ded14535e357

I'd be happy to add other examples for other usecases you think are relevant, just let me know!

### Detail

This Pull Request expands the documentation for [in_order_of](https://api.rubyonrails.org/classes/ActiveRecord/QueryMethods.html#method-i-in_order_of)

### Additional information

n/a

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* ~[ ] Tests are added or updated if you fix a bug or add a feature.~ not applicable
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",thdaraujo,User,4,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50823,16135423,50823,Add methods to `ActiveRecord::Relation::FinderMethods` to determine if it contains exactly/more than/less than N records,open,10,2024-01-20 16:56:20+00:00,2024-02-01 14:30:49+00:00,,"### Motivation / Background

I've had to check in a few places if a relation had exactly or less than or more than N records. On top of that, if the collection contains a lot of records, counting on the entire collection not only is slower but also unnecessary and limiting the count the first N or N+1 records is sufficient and faster.

### Detail

Adds the following methods to `ActiveRecord::Relation::FinderMethods`:
  * `exactly?` returns true if the relation contains exactly N records, false otherwise.
  * `at_least?` returns true if the relation contains at least N records, false otherwise.
  * `at_most?` returns true if the relation contains at most N records, false otherwise.
  * `less_than?` returns true if the relation contains less than N records, false otherwise.
  * `more_than?` returns true if the relation contains more than N records, false otherwise.

These methods perform a `limit(M).count` (where M = N or N + 1) under the hood.

### Additional information

I think the naming of these methods is fine as is. Don't know if others would prefer to prefix these with `has_` or `contains_`, ie `has_exactly?` or `contains_exactly?`.

With regards to performance of doing the count with and without the limit. Without the limit when there are 8M records I get:

```sql
  Referral Count (135.2ms)  SELECT COUNT(*) FROM ""referrals"" WHERE ""referrals"".""company_id"" = $1  [[""company_id"", ""29f1dfa2-01d0-4e5d-b482-7aa1f3ba7535""]]
=> 8467786
```

With a limit of a 100:

```sql
  Referral Count (0.4ms)  SELECT COUNT(*) FROM (SELECT 1 AS one FROM ""referrals"" WHERE ""referrals"".""company_id"" = $1 LIMIT $2) subquery_for_count  [[""company_id"",""29f1dfa2-01d0-4e5d-b482-7aa1f3ba7535"", [""LIMIT"", 100]]
=> 100
```

So it's 300x faster even when doing an index only scan:

```sql
explain SELECT COUNT(*) FROM ""referrals"" WHERE ""referrals"".""company_id"" ='29f1dfa2-01d0-4e5d-b482-7aa1f3ba7535';

                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=136744.58..136744.59 rows=1 width=8)
   ->  Gather  (cost=136744.36..136744.57 rows=2 width=8)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=135744.36..135744.37 rows=1 width=8)
               ->  Parallel Index Only Scan using index_referrals_on_company_id_and_conversion_state on referrals  (cost=0.56..127008.31 rows=3494420 width=0)
                     Index Cond: (company_id = '29f1dfa2-01d0-4e5d-b482-7aa1f3ba7535'::uuid)
```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",jordinl,User,2,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50820,78952006,50820,docs: Update validation status based on autosave status,open,0,2024-01-20 09:24:46+00:00,2024-01-22 07:16:22+00:00,,"This Pull Request has been created to enlighten users that validations are enabled by default when autosave is True for the  `has_one` and `belongs_to`.
",MONSURU-rgb,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50815,11673,50815,Add format constraints for generated pwa routes,open,0,2024-01-19 23:10:41+00:00,2024-01-22 12:00:23+00:00,,"### Motivation / Background

As a followup to #50528, which added default pwa manifest and service worker routes and files to the new app generator, I'd like to associate the new routes with the expected mime types.

### Detail

We expect the `pwa#manifest` request to be limited to json, i.e. `manifest.json` and we expect the `pwa#service_worker` request to be limited to js, i.e. `service-worker.js`. This change adds format constraints to the generated routes.

### Additional information

I didn't see associated tests with the previous change but would be open to adding some if desired.

### Checklist

Before submitting the PR make sure the following are checked:

* [ ] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",rossta,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50812,7896757,50812,Redundant JOIN produced when merging relations from STI classes,open,1,2024-01-19 20:59:12+00:00,2024-01-26 14:10:08+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
Merging relations with joins to the same association by different classes in an STI tree results in duplicated, redundant JOINs in the emitted SQL.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails""
  # If you want to test against edge Rails replace the previous line with this:
  # gem ""rails"", github: ""rails/rails"", branch: ""main""

  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string :type
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
    t.boolean :published
  end
end

class Post < ActiveRecord::Base
  has_many :comments

  scope :with_comments, -> { joins(:comments).where(comments: { published: true }) }
end

class CustomPost < Post
end

class Comment < ActiveRecord::Base
  belongs_to :post
end

class BugTest < Minitest::Test
  def test_merge_base_case
    posts_with_comments1 = CustomPost.with_comments
    posts_with_comments2 = CustomPost.with_comments

    assert_equal [:comments], posts_with_comments1.joins_values
    assert_equal [:comments], posts_with_comments2.joins_values

    combined_scope = posts_with_comments1.merge(posts_with_comments2)

    puts combined_scope.to_sql
    assert_equal [:comments], combined_scope.joins_values
  end

  def test_merge_sti_case
    posts_with_comments = Post.with_comments
    custom_posts_with_comments = CustomPost.with_comments

    assert_equal [:comments], posts_with_comments.joins_values
    assert_equal [:comments], custom_posts_with_comments.joins_values

    combined_scope = posts_with_comments.merge(custom_posts_with_comments)

    puts combined_scope.to_sql
    # FAILS! two joins are generated
    assert_equal [:comments], combined_scope.joins_values
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->
A query with a single join to the foreign table is produced
e.g.
```sql
SELECT
  ""posts"".*
FROM
  ""posts""
  INNER JOIN ""comments"" ON ""comments"".""post_id"" = ""posts"".""id""
WHERE
  ""posts"".""type"" = 'CustomPost'
  AND ""comments"".""published"" = 1
```

### Actual behavior
<!-- Tell us what happens instead -->
A query with two redundant joins to the foreign table is produced
```sql
SELECT
  ""posts"".*
FROM
  ""posts""
  INNER JOIN ""comments"" ON ""comments"".""post_id"" = ""posts"".""id""
  INNER JOIN ""comments"" ""comments_posts"" ON ""comments_posts"".""post_id"" = ""posts"".""id""
WHERE
  ""posts"".""type"" = 'CustomPost'
  AND ""comments"".""published"" = 1
```
This duplicated join is not referenced by the rest of the query in any way

### System configuration
**Rails version**: Rails 7.1.0

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]
",mintyfresh,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50811,47484308,50811,Add multiple databases AR bug template [ci skip],open,0,2024-01-19 12:54:28+00:00,2024-01-19 12:58:25+00:00,,"### Motivation / Background

This Pull Request has been created because there are a few PRs we'd like to open that relate to the multiple database code in Rails but there was no existing template for a multiple database setup. 🙂 

### Detail

This commit adds a new bug report template that's based off of the existing [Active Record bug report
template](https://github.com/rails/rails/blob/main/guides/bug_report_templates/active_record.rb) but creates a multiple database setup.

The template creates an `UnshardedModel` abstract `ActiveRecord` model that connects to a single database (with a replica configured) and a `ShardedModel` abstract `ActiveRecord` model that has two shards configured, each with their own replica.

Each sqlite3 in-memory database is separate because [opening multiple database connections each with the filename "":memory:"" will create independent in-memory databases](https://www.sqlite.org/inmemorydb.html).

Note, that while replica databases are configured, sqlite3 does not support database replication and therefore records written to the writer databases will not auto-populate on the replica/reader databases. The replica configurations are included to allow for testing role switching, not for validating replication itself.

### Additional information

You can test that the template works by running:

 `ruby guides/bug_report_templates/active_record_multiple_databases.rb` 

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",HeyNonster,User,0,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50807,347921,50807,Undocumented - validations enabled by autosave,open,0,2024-01-19 10:47:52+00:00,2024-01-20 17:25:36+00:00,,"Validations are enabled by default when autosave is true:

    belongs_to :foo, autosave: true
    has_one :foo, autosave: true

https://github.com/rails/rails/blob/9c3ffab47c3bf59320ba08e9dafdb0275cf91a5a/activerecord/lib/active_record/reflection.rb#L653-L658

However, this is not documented in `has_one` or `belongs_to`:

https://github.com/rails/rails/blob/9c3ffab47c3bf59320ba08e9dafdb0275cf91a5a/activerecord/lib/active_record/associations.rb#L1660-L1669

https://github.com/rails/rails/blob/9c3ffab47c3bf59320ba08e9dafdb0275cf91a5a/activerecord/lib/active_record/associations.rb#L1830-L1840",semaperepelitsa,User,0,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50793,44640,50793,PoC: Add an option to disable connection checkout caching,open,5,2024-01-18 16:54:17+00:00,2024-01-19 22:11:55+00:00,,"### Context

In part for performance and simplicity reasons, and in part because of its historical lack of threading support, Active Record rely quite heavily on `ActiveRecord::Base.connection` checking out and holding a connection inside a thread of fiber local variable.

Concretly, every request or job lazily checkout connections when it needs to perform a database operations, and then holds onto it until the request or job completes, at which point the `Executor` hook automatically check it back in the pool.

For the overwhelming majority of Rails application, which don't do enough IOs to benefit from more than a handful of threads, it's a perfectly adequate solution, as it pretty much remove connection management as a concern.

However for applications that spent most of their time on IOs others than the database (e.g. 3rd party APIs), and would benefit from much higher levels of concurrency, this strategy is problematic because it requires about as many database connections as there is threads or fibers, even though most connections are idle but can't be used because they checked out of the pool and held by another thead or fiber.

### Goal

I believe the current model is still preferable for the vast majority of Rails users, and changing the way `ActiveRecord::Base.connection` behaves would break a ton of code anyway. So I believe it should remain the default.

However I think we could support an alternative mode, in which `ActiveRecord::Base.connection` doesn't hold onto the connection until the end of the request cycle, but instead immediately check it back in, allowing it to be re-used immediately.

### Implementation

First, nothing changes unless you disable `ActiveRecord.cache_connection_checkout`.

Then, since a lot of code in Rails itself, in third party libraries, and in private Rails applications do rely on `Model.connection.something()`, we must make it work without caching the connection.

To solve this, when caching is disabled, `Model.connection` returns a proxy object, that delegates the methods it receive to a freshly checked out connection, and then check it back in. See `LazyConnectionProxy` in `connection_pool.rb` for the details.

That is the key to permitting this feature while retaining backward compatibility. It's not perfect, as code might assume that subsequent calls to `Model.connection` will return the same connection instance, but in most case it's not necessary.

Also, while the proxy holds the connection, it caches in on the thread or fiber, so subsequent calls to `Model.connection` will return the same connection until it's checked back in. This solves most of the statefulness issues, like opening a transaction etc, as long as the APIs are blocked based.

### Status

This is a proof of concept, it's nowhere near ready to merge, it's mostly to explore whether it's doable with some work, or just not possible.

Most of the Active Record test suite passes against Sqlite3, except for 3 tests that do disconnect and reconnect. In general all the tests had to be opted out of the feature, I still need to dig into why exactly.

I also had to disable the feature for a few test suites that rely too much on the caching, and would need a bit of refactoring to pass without, but at first glance it doesn't look like a fundamental incompatibility.

### Concerns

There is a number of Active Record methods that currently cause more than one checkout/checkin cycle and would benefit from a strategically placed `with_connection do` call to optimize that. But that is mostly a performance concern, not a fundamental incompatibility.

One more major concern is the query cache. As it stand it's pretty much useless when checkout caching is disabled, because when we check the connection back in, we have to clear the cache, so it's pretty much always empty. To make it usable again, we need a substantial refactoring. At first glance it looks possible, just not trivial.

### Conclusion

I'm a bit on the fence about this. I think we can make it work, but I already spent most of one day on just the proof of concept, and would need substantially more work to iron out all the issues.

The actual code changes needed in Active Record itself are relatively small, it's really all the test suite and 3rd party code that would need to be updated to properly work with this option that is the big can of worm I'm worried about.
",byroot,User,2,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50792,13721821,50792,`app:update` from Rails 7.1.2 to 7.1.3 creates `new_framework_defaults_7_1.rb`,open,2,2024-01-18 16:15:11+00:00,2024-01-19 09:40:06+00:00,,"### Steps to reproduce
I made an update from Rails 7.1.2 to 7.1.3 by changing the rails version number to 7.1.3 in the gemfile and running `bundle update`. After that i ran `rails app:update` which produced the file `config/initializers/new_framework_defaults_7_1.rb`. I already have `config.load_defaults 7.1` in my `config/application.rb`, so I think, this file shouldn't be generated?

### Expected behavior
The file `config/initializers/new_framework_defaults_7_1.rb` should not be created, if `config.load_defaults 7.1` is already present in `config/application.rb`.

### Actual behavior
The file `config/initializers/new_framework_defaults_7_1.rb` is created after  `rails app:update`, despite `config.load_defaults 7.1` is already present in `config/application.rb`.

### System configuration
**Rails version**: 7.1.3

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x64-mingw-ucrt]
",GitToTheHub,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50785,1148320,50785,Add note about `params` hash in Action Controller Overview [ci skip] ,open,0,2024-01-18 01:26:00+00:00,2024-01-18 17:22:33+00:00,,"### Motivation / Background

Newbies tend to misunderstand `params` hash is a plain old Hash. So I added a note that `params` hash is ActionController::Parameters.

### Detail

This Pull Request changes ""4 Parameters"" in Action Controller Overview.

![Screenshot 2024-01-18 at 10 31 55](https://github.com/rails/rails/assets/1148320/de0dc860-35d1-4d3b-b209-ab4abbac5a17)

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.

",JunichiIto,User,1,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50780,986290,50780,Preserve `--asset-pipeline propshaft` when running `app:update`,open,0,2024-01-17 12:02:43+00:00,2024-01-28 20:30:34+00:00,,"### Motivation / Background

This Pull Request has been created because `skip_sprockets?` wasn't being preserved when running `app:update` in a project using `propshaft`. Helpful when #50444 lands.

### Detail

This Pull Request sets `options[:asset_pipeline]` in `AppUpdater` based on whether Sprockets/Propshaft Railtie is defined.

Without this change, `app:update` will suggest injecting sprocket configuration in a propshaft project.",zachasme,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50772,623008,50772,Tests can't run without yarn,open,3,2024-01-16 21:11:58+00:00,2024-01-29 19:27:28+00:00,,"### Steps to reproduce

1. Create a new rails app that uses yarn
2. `docker build -t testimage:1 .`
3. `docker run -it testimage:1 /bin/bash`
4. `bin/rails test`

### Expected behavior

As the image already contains all precompiled assets I would expect the tests to be able to run successfully even without precompiling first.

### Actual behavior

`bin/rails test` now always runs `test:prepare`, which tries to compile the assets and therefore crashes, because the default Dockerfile doesn't keep yarn in the image.

I want an option to skip running `test:prepare` when running tests.

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.1.4",arusa,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50768,11378424,50768,The `counter_cache_column?` method is depending of initialisation order.,open,0,2024-01-16 15:54:58+00:00,2024-01-20 17:21:11+00:00,,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  gem ""rails"", github: ""rails/rails"", branch: ""main""

  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :people, force: true do |t|
    t.integer :cars_count, default: 0
  end

  create_table :cars, force: true do |t|
    t.belongs_to :person
  end
end

class Car < ActiveRecord::Base
  belongs_to :person, counter_cache: true
end

# If the `Person` class was defined before, the test below would work
class Person < ActiveRecord::Base
  has_many :cars
end

class BugTest < Minitest::Test
  def test_counter_cache_column?
    assert Person.counter_cache_column?(""cars_count"")
    assert_not Car.counter_cache_column?(""cars_count"")
  end
end
```

### Expected behavior

the `Person` class should identify clearly `cars_count` as a counter cache column

### Actual behavior

Since `Person` is initialized afterwards, when running `belong_to`, the `cars_count` column is not added to its counter_cache

### System configuration
**Rails version**: found in `7.1.2`, present in edge as well

**Ruby version**: 3.2.1

### Notes

In the actual ActiveRecord test suite, this test could fall if in the future a file requiring first `models/car` is loaded before the `counter_cache_test` file.

Also I'd be so glad to work on the solution. It seems to me that the issue is that [this expression](https://github.com/rails/rails/blob/0656787be644d7d5550e82450153403853c73014/activerecord/lib/active_record/associations/builder/belongs_to.rb#L39C5-L39C5) can return `nil`. I'm just not sure how it should be solved (by raising, autoloading, warning, ...)
",BuonOmo,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50763,101501,50763,Allow custom domain extractor class on ActionDispatch::Http::URL,open,5,2024-01-15 23:32:04+00:00,2024-01-18 20:47:53+00:00,,"In these last years we have been using a monkey patch at our company that smartly detects domain and subdomains according to the [Public Suffix database](https://publicsuffix.org/). There are a few gems in our ecosystems like [public_suffix](https://github.com/weppos/publicsuffix-ruby) and [mini_suffix](https://github.com/discourse/mini_suffix) that does exactly that. But Rails uses an older and primitive method that splits the domain tld using `config.action_dispatch.tld_length` option. This pull request changes that by allowing developers to specify a custom domain extractor class.

This is really useful for any SaaS company that offers custom domain and subdomains.",rainerborene,User,0,actionpack,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50761,28561,50761,Improve documentation of ActiveRecord::Core.configurations,open,0,2024-01-15 21:18:15+00:00,2024-01-16 12:15:00+00:00,,"### Motivation / Background

The documenation of `ActiveRecord::Core.configurations=` [reads](https://edgeapi.rubyonrails.org/classes/ActiveRecord/Core.html#method-c-configurations-3D) like the documentation for the getter instead of the setter.
It should not describe what is returned, but what arguments are expected.

This changes moves the documentation of the setter to the getter and adds a new comment to the setter.

This commit has 2 separate commits to make sure the diffs only apply to documentation and not the code.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",p8,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50759,47848,50759,Migrate Rails API doc to use Markdown instead of RDoc format,open,0,2024-01-15 21:02:56+00:00,2024-01-15 21:02:57+00:00,,"### NOTE: We aren't going to accept any PR doing this migration

From time to time, we have to remember that while documenting some method on Rails, using `+foo+` to denote a method name or argument sometimes need to change to be `<tt>foo</tt>` in order to be documented. We also sometimes receive PRs with people accidentally introducing backticks that doesn't have any effect in the documentation.

Our guides also uses Markdown syntax, so contributors need to know they need to change syntax when writting documentation.

Text editors, like VScode don't know how to highlight RDoc code so often see Rails documentation formatted like this when you hover over a class

<img width=""802"" alt=""Screenshot 2024-01-15 at 4 01 03 PM"" src=""https://github.com/rails/rails/assets/47848/2e31157d-dd86-487d-83d6-c34e4c013151"">
<img width=""810"" alt=""Screenshot 2024-01-15 at 4 02 00 PM"" src=""https://github.com/rails/rails/assets/47848/435e899b-8cfc-4bf4-9b8c-dfd7383fd867"">

Nowadays, RDoc supports Markdown as syntax. So we can avoid all those problems migrating all our API documentation to use Markdown.

### NOTE: We aren't going to accept any PR doing this migration",rafaelfranca,User,6,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50755,902714,50755,Action Mailbox mistakes attachment as body if no body exists,open,2,2024-01-15 08:23:19+00:00,2024-01-17 18:28:53+00:00,,"I have set up a mailbox to process DMARC reports. This has been working fine in most cases, but it seems that sometimes Google doesn't include body text in the email—only a zipped XML file as an attachment.

When this happens, Action Mailbox decodes the Base64 encoding of the attachment and assigns the string representation of the binary data to the body of the message without adding the file as an attachment. I have noticed that the email also isn't recognised as being multipart.

### Steps to reproduce

I've created [a gist which includes the unedited email source](https://gist.github.com/HashNotAdam/f5d08e370e70e9e39105fa765563c5b3) as copied from the EML file stored by Active Storage

### Expected behavior
The body of the message should include the Base64 encoding of the attachment and there should be 1 attachment representing a ZIP file

### Actual behavior
Calling `body.to_s` on the underlying `Mail::Message` will return a string representation of the binary data which can be unzipped to return the XML. If the EML file were to be opened in an email client, this would be presented as an attachment

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.2.2",HashNotAdam,User,0,actionmailbox,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50754,8156,50754,Allow named variants to evaluate dynamic transformation options,open,0,2024-01-15 01:18:24+00:00,2024-01-18 00:07:51+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

Sometimes you want to build a transformation based on the user input, or information persisted in the database (i.e.: add a watermark to a picture, crop based on user input)

### Detail

This PR allow the transformations to be built based on user input:

```ruby
class User < ApplicationRecord
  has_one_attached :photo do |attachable|
    attachable.variant :default, crop: :crop_positions
    attachable.variant :thumb, crop: :crop_positions,
                               resize_to_limit: [100, 100]
  end

  def crop_positions
    [crop_x1, crop_y1, crop_x2, crop_y2]
  end
end
```

### Checklist

Before submitting the PR make sure the following are checked:

- [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
- [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
- [x] Tests are added or updated if you fix a bug or add a feature.
- [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",xjunior,User,1,activestorage,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50744,39912547,50744,docs: Update FormHelper comments to use `form_with` instead of `form_for` [ci skip],open,0,2024-01-13 17:32:39+00:00,2024-01-13 17:32:43+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created because comments in `ActionView::Helpers::FormHelper` refer to the deprecated `form_for` instead of the recommended `form_with`. This could potentially cause confusion for developers consulting the Rails API documentation, such as [Action View Form Builder page](https://api.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html).

### Detail

This Pull Request changes  the comments in `ActionView::Helpers::FormHelper`, replacing instances of `form_for` with `form_with`.

### Additional information

The Rails guide has already documented the usage of `form_with` on the [form_helpers page](https://guides.rubyonrails.org/form_helpers.html).

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",takatea,User,0,actionview,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50734,54689845,50734,docs: Adjust composite primary keys documentation [skip ci],open,0,2024-01-12 18:49:57+00:00,2024-01-17 18:36:00+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created because the documentation for composite primary keys wasn't correct. 

### Detail

While working on `shoulda-matchers` I noticed that the documentation is not correct. We actually need to declare the `query_constraints` option in the `has_many` association using the same attribute name as the ones in the associated object.

```ruby
class Author < ApplicationRecord
  self.primary_key = [:first_name, :last_name]
  # This was incorrect as `first_name` and `last_name` don't exist on the `Book` model.
  has_many :books, query_constraints: [:first_name, :last_name] 
  
  # Correct way
  has_many :books, query_constraints: [:author_first_name, :author_last_name]
end

class Book < ApplicationRecord
  belongs_to :author, query_constraints: [:author_first_name, :author_last_name]
end
```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",matsales28,User,0,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50731,99700,50731,Document passing hash as id option on create_table,open,0,2024-01-12 17:21:32+00:00,2024-01-12 17:21:36+00:00,,"### Motivation / Background

The `id` keyword argument passed to [create_table](https://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_table) method allow to receive a hash with options for column creation but it's not documented.",javierav,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50727,2575027,50727,Action View Tests: Use `#with_routing` helper,open,0,2024-01-12 14:36:26+00:00,2024-01-29 14:25:41+00:00,,"### Motivation / Background

Follow-up to [#49819][]

### Detail

Since [#49819][] resolves an issue with
`ActionDispatch::IntegrationTest#with_routing` helper support, Action View's `test/abstract_unit.rb` file can rely on routing being reset within the block argument.

This means that the `RoutedRackApp` class and `.build_app` method is can be made unnecessary.

[#49819]: https://github.com/rails/rails/pull/49819
",seanpdoyle,User,0,railties,actionview,,,,,,,
https://api.github.com/repos/rails/rails/issues/50722,1100408,50722,Downcase the model name in the system scaffolds,open,7,2024-01-12 10:51:23+00:00,2024-01-15 02:43:38+00:00,,"### Motivation / Background

I noticed there is an inconsistency in the system test scaffold where the model name is sometimes capitalised. This fixes the two instances where the model name is humanised.

```rb
test ""should create user""
test ""should update User""
test ""should destroy User""
```

Considering all the other scaffolds use lowercase text I think it's right these two are downcased in the same way.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",dwightwatson,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50721,1734607,50721,Pool disabled query cache handling,open,1,2024-01-12 09:06:56+00:00,2024-01-30 07:46:13+00:00,,"### Motivation / Background

For [Solid Cache](https://github.com/rails/solid_cache), we want to be able to read and write from the cache database without using the query cache. 

We also don't want to expire the query cache on other connection pools when we write. Writing to the Rails cache shouldn't invalidate the main query cache.

This is an alternative to https://github.com/rails/rails/pull/50695, based on @byroot's [suggestion here](https://github.com/rails/rails/pull/50695#issuecomment-1885312807).

### Detail

After a database write we clear the query cache on all connection pools. The change here is that we will now only do that if either the connection pool or the connection itself has the query cache enabled.

The query cache is [enabled on all connection pools](https://github.com/rails/rails/blob/cff2eb1be11cb729382b3674e3caa2bd198ec55e/activerecord/lib/active_record/query_cache.rb#L28-L42) by the executor hooks, so to take advantage of this we'll need to add another executor hook that disables the query cache on the Solid Cache connection pool (but only when it has a dedicated pool). 

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",djmb,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50717,28561,50717,Expand documentation for ActiveRecord::Core #dup and #clone,open,2,2024-01-11 19:46:53+00:00,2024-01-17 10:26:04+00:00,,"Splits the examples for `#clone` into separate sections for easier scanability.

Adds examples to `#dup` to clarify the difference with `#clone`.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",p8,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50710,5122678,50710,Update `ActionDispatch::Routing::Mapper:Scoping#constraints` documentation,open,0,2024-01-11 16:50:31+00:00,2024-01-11 16:50:36+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

The previous recommendation to place constraints in `lib/constraints` did not work in practice on a default Rails install, as it will raise the following:

```
uninitialized constant Iphone (NameError)
```

Instead, recommend placing constraints in `app/constraints` such that they will be eager loaded.

### Additional information

Alternatively, we could update the documentation to elaborate that `lib/constraints` would need to be explicitly eager loaded.

```ruby
config.eager_load_paths << Rails.root.join(""lib/constraints"")
```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",stevepolitodesign,User,1,actionpack,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50705,19192189,50705,Backport: Define missing attribute methods from `method_missing`,open,0,2024-01-11 08:26:24+00:00,2024-01-11 08:26:29+00:00,,"Ref: https://github.com/rails/rails/pull/50594

Opening a PR because the backport is non-trivial, so I want CI coverage. Also @ghiculescu pointed a possible issue in https://github.com/rails/rails/commit/d429bfb3b6fd2794f0d859b68e5dee24578d405f so I'd like to get to the bottom of that before merging the backport.

cc @rafaelfranca ",casperisfine,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50703,4468155,50703,Add warning for non-existent directories in autoload paths for Zeitwerk,open,1,2024-01-11 07:28:26+00:00,2024-01-17 12:05:41+00:00,,"### Motivation / Background

This Pull Request has been created because I noticed that Rails does not warn the user when they specify a non-existing directory in the `config.autoload_paths` or `config.autoload_once_paths` settings. This can lead to confusion and hard-to-debug errors when the user expects some files to be loaded but they are not.

### Detail

This Pull Request add a warning message when specified paths for `config.autoload_paths` and `config.autoload_once_paths` are not existing directories.
Below is the example message:

```
config.autoload_paths must be existing directories.
'/wrong/path/to/load' is not an existing directory.
```

### Additional information

Since this PR does not change the behavior itself, I believe existing tests cover this PR.

The warning message has been inspired by the following code.
https://github.com/rails/rails/blob/91968e5a185927b8216b82c860a48b6367285456/railties/lib/rails/application/bootstrap.rb#L23-L30

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",aeroastro,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50695,1734607,50695,Ignore the query cache in a block,open,7,2024-01-10 10:47:07+00:00,2024-01-30 04:11:32+00:00,,"### Motivation / Background

This PR allow the Query cache to be ignored in a block.

For Solid Cache queries we want to be able to completely disable the query cache (see https://github.com/rails/solid_cache/issues/123).

Solid Cache uses the database as the Rails cache so it gets the automatic query cache behaviour by default. 

We'd like to avoid this because the local cache already handles caching repeated reads and having Rails cache writes clear the AR query cache is not desirable.

`uncached` works for disabling reads doesn't disable clearing the cache for writes.

### Detail

We add a `ignore_query_cache` method to the connection. It takes a block and within that block:
- queries will not be cached in the query cache
- queries will not be read from the query cache
- writes will not clear the query cache
- cached/uncached blocks will be ignored

Example usage:

```ruby
ActiveRecord::Base.connection.ignore_query_cache do
  post = Post.find 1
  post.touch
end
```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",djmb,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50672,40032,50672,db:schema:load:<name> purges test database,open,2,2024-01-09 13:43:19+00:00,2024-01-10 09:19:37+00:00,,"Commit [adb64db43d](https://github.com/rails/rails/commit/adb64db43dba5cad1007ce57e25df67f8b3e91f8#diff-4a42b5efdab725af0936f94b4a84dcf6a8be8738e28ed265e0a3e74f275f5048R491) changed task `db:schema:load:<name>` to invoke `db:test:purge:<name>`.

Because of that Rails 7.1 breaks my workflow for initializing a local environment:

- create database with `db:create`
- run custom SQL to create Postgres extensions, schemas and triggers
- load schema with `db:schema:load:<name>`

Strangely, `db:schema:load` keeps the old behavior, and I could not find the explanation for the change in the commit message or in related Github issues.

Also, it _requires_ a test database to be configured in `database.yml`; otherwise the task fails:

```
$ RAILS_ENV=development bin/rails db:schema:load:primary
bin/rails aborted!
TypeError: Invalid type for configuration. Expected Symbol, String, or Hash. Got nil (TypeError)

        raise TypeError, ""Invalid type for configuration. Expected Symbol, String, or Hash. Got #{config.inspect}""
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Tasks: TOP => db:schema:load:primary => db:test:purge:primary
(See full trace by running task with --trace)
```

Can someone confirm the change was intentional?

**Steps to reproduce the failure**

- `$ rails new rails_bug`
- `$ cd rails_bug`
- use the following `database.yml`:

```
development:
  one:
    adapter: sqlite3
    database: storage/development.sqlite3
  two:
    adapter: sqlite3
    database: storage/development_two.sqlite3
    migrations_paths: db/migrate_two
```
- `$ bin/rails db:migrate:one`
- `$ bin/rails db:schema:load:one`

**Expected behavior**

No error.

**Actual behavior**

TypeError invoking database task.

**System configuration**

Rails 7.1.2
Ruby 3.2.2
",romuloceccon,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/50666,42948054,50666,"`rails credentials:edit` lets you pass an unknown editor, without issuing any error report",open,1,2024-01-09 05:15:43+00:00,2024-01-09 13:23:42+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", ""7.1.2""
  # If you want to test against edge Rails replace the previous line with this:
  # gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""active_support""
require ""active_support/core_ext/object/blank""
require ""minitest/autorun""

class BugTest < Minitest::Test
  def test_credentials_edit_command
    # test with ed editor
    # assert_equal system(""VISUAL=ed rails credentials:edit << EOF\nEOF""), true
    # test with an unknown editor
    assert_equal system(""VISUAL=abc rails credentials:edit""), false
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->

$? = 1, with an error report

### Actual behavior

output:

```
Editing config/credentials.yml.enc...
File encrypted and saved.
```

$? = 0

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.3.0
",ArthurPV,User,0,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50645,137036598,50645,Rails 7.1 Create model with has_many with lambda incorrect default,open,4,2024-01-08 14:54:30+00:00,2024-01-24 09:51:09+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
In Rails 7.1, when I create new model with lambda in `has_many` association without passing value to the parameter, it puts serialized value of array that passed in `where` in a lambda.
Rails 7.0 just put `nil` in this case.


<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby

# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", ""7.1.2""
  # If you want to test against edge Rails replace the previous line with this:
  # gem ""rails"", github: ""rails/rails"", branch: ""main""

  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end

  create_table :users, force: true do |t|
  end

  create_table :post_accesses, force: true do |t|
    t.string :access_type
    t.references :post
    t.references :user
  end
end

class PostAccess < ActiveRecord::Base
  ROLES = %w[viewer editor owner]
  STAFF_ROLES = %w[editor owner]

  belongs_to :user
  belongs_to :post
end

class Post < ActiveRecord::Base
  has_many :post_accesses
  has_many :staff_post_accesses,
           -> { where(access_type: PostAccess::STAFF_ROLES) },
           class_name: 'PostAccess'

  has_many :staff_users, through: :staff_post_accesses, class_name: 'User', source: :user
end

class User < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_association_stuff
    user = User.create!
    post = Post.create!(staff_users: [user])

    assert_equal nil, post.post_accesses.first.access_type
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->
It should put `nil`, or one of the possible value

### Actual behavior
<!-- Tell us what happens instead -->
It put serialized array:
'[""editor"", ""owner""]'

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.2.2
",nikita-railsware,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/50637,54629302,50637,Experiment | [Fix #47809] `load_async` support for collection associations,open,0,2024-01-08 03:24:48+00:00,2024-01-09 03:10:34+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

Mostly an experiment to fix #47809 while trying to avoid a large refactor which [might be the ideal solution](https://github.com/rails/rails/issues/47809#issuecomment-1489832287). This only tackles collection associations.

### Detail

TODO

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

TODO

### Checklist

Before submitting the PR make sure the following are checked:

* [ ] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",joshuay03,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50633,31287923,50633,Make `group`/`regroup` inside `merge` be applied to the merged relation,open,0,2024-01-07 19:25:39+00:00,2024-01-17 22:36:17+00:00,,"### Motivation / Background

When using `group` inside `merge`, the `group` is applied to the outermost relation instead of the merged relation, which is unexpected. The same is true for `regroup`.

### Detail

Now, `group` inside `merge` is applied to the merged relation, as intended. The behavior was changed for `regroup` as well, and documented.

Before:

```rb
Product.joins(:items).group(:id).merge(Item.group(:title))
# SELECT ""products"".* FROM ""products""
# INNER JOIN ""items"" ON ""items"".""product_id"" = ""products"".""id""
# GROUP BY ""products"".""id"", ""products"".""title""

Product.joins(:items).group(:id).merge(Item.group(:title).regroup(:id))
# SELECT ""products"".* FROM ""products""
# INNER JOIN ""items"" ON ""items"".""product_id"" = ""products"".""id""
# GROUP BY ""products"".""id""

Product.joins(:items).group(:id).merge(Item.group(:title).regroup(:id)).regroup(:title)
# SELECT ""products"".* FROM ""products""
# INNER JOIN ""items"" ON ""items"".""product_id"" = ""products"".""id""
# GROUP BY ""products"".""title""
```

After:
```rb
Product.joins(:items).group(:id).merge(Item.group(:title))
# SELECT ""products"".* FROM ""products""
# INNER JOIN ""items"" ON ""items"".""product_id"" = ""products"".""id""
# GROUP BY ""products"".""id"", ""items"".""title""

Product.joins(:items).group(:id).merge(Item.group(:title).regroup(:id))
# SELECT ""products"".* FROM ""products""
# INNER JOIN ""items"" ON ""items"".""product_id"" = ""products"".""id""
# GROUP BY ""products"".""id"", ""items"".""id""

Product.joins(:items).group(:id).merge(Item.group(:title).regroup(:id)).regroup(:title)
# SELECT ""products"".* FROM ""products""
# INNER JOIN ""items"" ON ""items"".""product_id"" = ""products"".""id""
# GROUP BY ""products"".""title""
```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",joaomarcos96,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50623,2575027,50623,Pass render options and block to calls to `#render_in`,open,5,2024-01-06 20:46:09+00:00,2024-01-30 03:15:45+00:00,,"### Motivation / Background

Closes [#45432][]

Support for objects that respond to `#render_in` was introduced in [#36388][] and [#37919][]. Those implementations assume that the instance will all the context it needs to render itself. That assumption doesn't account for call-site arguments like `locals: { ... }` or a block.

### Detail

This commit expands support for rendering with a `:renderable` option to incorporate locals and blocks. For example:

```ruby
class Greeting
  def render_in(view_context, **options, &block)
    if block
      view_context.render html: block.call
    else
      view_context.render inline: <<~ERB.strip, **options
        Hello, <%= name %>
      ERB
    end
  end
end

render(Greeting.new)                    # => ""Hello, World""
render(Greeting.new, name: ""Local"")     # => ""Hello, Local""
render(Greeting.new) { ""Hello, Block"" } # => ""Hello, Block""
```

Since existing tools depend on the `#render_in(view_context)` signature
without options, this commit deprecates that signature in favor of one
that accepts options and a block.

[#45432]: https://github.com/rails/rails/pull/45432
[#36388]: https://github.com/rails/rails/pull/36388
[#37919]: https://github.com/rails/rails/pull/37919

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,0,actionpack,railties,docs,actionview,,,,,
https://api.github.com/repos/rails/rails/issues/50610,4910785,50610,Don't fail for uploads with content-type parameters in the ActiveStorage::DiskController,open,0,2024-01-05 23:32:34+00:00,2024-01-08 20:20:22+00:00,,"Fixes #50600 by parsing the string content-type before comparing it to the `Mime::Type`. This comparison will ignore the parameters.

@alexandergitter I added you as co-author for the reproduction test case.",codergeek121,User,1,actionpack,activestorage,,,,,,,
https://api.github.com/repos/rails/rails/issues/50608,820759,50608,allow dom_id method to accept an array of records_or_classes,open,1,2024-01-05 19:12:49+00:00,2024-01-08 14:17:58+00:00,,"# Context

See also: https://github.com/hotwired/turbo-rails/pull/476

[hotwired/turbo-rails/pull/476](https://github.com/hotwired/turbo-rails/pull/476) removed the ability to pass multiple ids/models to the `turbo_frame_tag` helper method. In that PR it was suggested by @skipkayhil that this ability be passed down to the `dom_id` method (which is a part of rails core) method rather than the `turbo_frame_tag` helper (which is a part of turbo-rails).

ref: https://discuss.rubyonrails.org/t/allow-dom-id-method-to-accept-multiple-ids-models/84408

# Changes

If the first argument of the `dom_id` is an array, this change will loop through each value and form a singular dom ID, then join the parts together. This change will allow turbo frame tags to accept multiple models (similar to the `cache` helper from ActionView).

```
<%= turbo_frame_tag [customer, field] do %>
  <!-- code -->
<% end %>
```

***

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.",jwilsjustin,User,1,actionview,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50606,58582,50606,[Fix #50604] Restore compatibility of Active Record Encryption configs with eager loading mode,open,4,2024-01-05 18:03:09+00:00,2024-01-31 12:08:16+00:00,,"
<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

Fixes #50604

This Pull Request fixes a source of incompatibility between the loading order of Active Record Encryption configs and the loading of AR models in eager loading mode.

### Detail

This Pull Request removes an occurrence of `after_initialize` introduced in https://github.com/rails/rails/pull/48530, which is not fully compatible with the eager loading mode.

Previous concerns were raised in [a discussion from the same PR](https://github.com/rails/rails/pull/48530/files#r1237624233).

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",maximerety,User,0,activerecord,railties,,,,,,,
https://api.github.com/repos/rails/rails/issues/50604,58582,50604,Active Record Encryption configs not ready in eager loading mode,open,1,2024-01-05 17:50:05+00:00,2024-01-17 12:55:31+00:00,,"### Description

The introduction of `after_initialize` in Active Record Encryption configuration setup in https://github.com/rails/rails/pull/48530 (also see [that discussion in the same PR](https://github.com/rails/rails/pull/48530/files#r1237624233)) is not fully compatible with the eager loading mode: https://github.com/rails/rails/blob/6b446bee63c401364d193920f3426af0bfe75650/activerecord/lib/active_record/railtie.rb#L385

In eager loading mode, the models from the application are loaded before the `after_initialize` hook has a chance to run, as visible here (hint: you need to scroll in the code snippet): https://github.com/rails/rails/blob/b0b1eb5a1847c1de5616a55c1d7c78f11eb08cd8/railties/lib/rails/application/finisher.rb#L77-L95

As a result, some configurations may not be ready at the time Active Record Encryption's helper `encrypts` needs them during model loading.

For example, the following methods are called in order: `encrypts` ->  `encrypt_attribute` -> `scheme_for` -> `global_previous_schemes_for`:

https://github.com/rails/rails/blob/e0a55b038f7f2f50d1467876558be183be6cedaa/activerecord/lib/active_record/encryption/encryptable_record.rb#L78-L82

If `ActiveRecord::Encryption.config.previous_schemes` is not defined yet, then the encrypted attribute is not properly configured.

### Example 1

#### Steps to reproduce

In this example, a previous encryption scheme is provided globally, as described in https://guides.rubyonrails.org/active_record_encryption.html#global-previous-encryption-schemes:

```ruby
# config/application.rb
config.active_record.encryption.previous = [ { key_provider: MyOldKeyProvider.new } ]
config.eager_load = true

# app/models/article.rb
class Article < ApplicationRecord
  encrypts :title
end
```

#### Expected behavior

The previous encryption scheme should always be taken into account when line `encrypts :title` is reached.

#### Actual behavior

When lazy loading the application, everything is fine and the `Article` model is lazily loaded after the previous encryption scheme is defined by the `after_initialize` hook and the `:title` attribute can benefit from that previous encryption scheme.

When eager loading the application however, the `Article` model is eager loaded before the previous scheme is defined and that config gets ignored.

### Example 2

#### Steps to reproduce

In this example, a custom key provider is configured when declaring the attribute, as described in https://guides.rubyonrails.org/active_record_encryption.html#model-specific-key-providers:

```ruby
# config/application.rb
config.eager_load = true

# app/models/article.rb
class Article < ApplicationRecord
  encrypts :title, key_provider: CustomKeyProvider.new(ActiveRecord::Encryption.config.primary_key)
end
```

#### Expected behavior

The custom key provider should be able to use the `primary_key` configured  when line `encrypts :title` is reached.

#### Actual behavior

When lazy loading the application, everything is fine and the `Article` model is lazily loaded after the `primary_key` is defined by the `after_initialize` hook and the `:title` attribute can be set up normally.

When eager loading the application however, the `Article` model is eager loaded before the `primary_key` is defined by the `after_initialize` hook, and the model fails to load with the following exception:

```
activerecord-7.1.2/lib/active_record/encryption/config.rb:43:in `block (2 levels) in <class:Config>':
  Missing Active Record encryption credential: active_record_encryption.primary_key (ActiveRecord::Encryption::Errors::Configuration)
```

### System configuration

**Rails version**: `7.1.2` / `7.1.3` / `main`

**Ruby version**: `3.2.2` / `3.3.0`

### Possible fixes

1. Get rid of `after_initialize` if not really necessary (see [previous discussions](https://github.com/rails/rails/pull/48530/files#r1237624233))
2. Otherwise, keep `after_initialize` and attempt to patch the eager loading mode (using `config.before_eager_load`?)",maximerety,User,1,activerecord,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/50600,816758,50600,ActiveStorage::DiskController fails for uploads when Content-Type / media type contains a parameter,open,6,2024-01-05 14:01:29+00:00,2024-01-10 05:24:26+00:00,,"`ActiveStorage::DiskController#update` returns a 422 error when the submitted content contains a parameter in its Content-Type / media type, for example `audio/ogg; codecs=opus`.

This issue appears to have been introduced in https://github.com/rails/rails/commit/5fb4703471ffb11dab9aa3855daeef9f592f6388

### Steps to reproduce
Here's a test case that fails in `ActiveStorage::DiskControllerTest`:

```ruby
test ""directly uploading blob with content type parameters"" do
  data = ""Something else entirely!""
  blob = create_blob_before_direct_upload(
    byte_size: data.size, checksum: OpenSSL::Digest::MD5.base64digest(data), content_type: ""audio/ogg; codecs=opus"")

  put blob.service_url_for_direct_upload, params: data, headers: { ""Content-Type"" => ""audio/ogg; codecs=opus"" }
  assert_response :no_content
  assert_equal data, blob.download
end
```

(The test passes when the `; codecs=opus` part is omitted.)

### Expected behavior
The upload succeeds, since the content type from the uploaded content matches the content type in the direct upload token.

### Actual behavior
The request fails with 422 Unprocessable Content.

### System configuration
**Rails version**: 7.2.0.alpha (1702b6cbfd)

**Ruby version**: 3.2.2",alexandergitter,User,0,attached PR,With reproduction steps,activestorage,,,,,,
https://api.github.com/repos/rails/rails/issues/50598,80978,50598,Document `upsert`/`upsert_all` `on_duplicate: :skip` option,open,0,2024-01-05 13:49:07+00:00,2024-01-09 13:38:24+00:00,,"### Detail

I've stumbled on this when writing an `upsert` call that must produce a `ON CONFLICT () DO NOTHING` fragment.

Using `update_only: []` didn't worked as it does update all columns on the table, but reading `InsertAll` I noticed the use of `:skip` internally that worked for this scenario, but it isn't mentioned on the public docs.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",lucasmazza,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50583,24071,50583,Active Storage Variant causing Aws::S3::Errors::NoSuchKey error when deleting an attachment,open,7,2024-01-04 18:44:36+00:00,2024-01-31 22:09:47+00:00,,"I am not sure if this is a bug or something is not configured correctly. 

### Steps to reproduce

Using Active Storage with a S3-compatible object storage from digital ocean or scaleway configured along the rails guide for active storage.

Active Storage configuration

```
digitalocean:
  service: S3
  access_key_id: <%= ENV.fetch(""DIGITALOCEAN_S3_ACCESS_KEY_ID"") %>
  secret_access_key: <%= ENV.fetch(""DIGITALOCEAN_S3_ACCESS_KEY_SECRET"") %>
  bucket: <%= ENV.fetch(""DIGITALOCEAN_S3_BUCKET_NAME"") %>
  endpoint: <%= ENV.fetch(""DIGITALOCEAN_S3_ENDPOINT"") %>
```

enabled with 

```
# config/environments/development.rb
config.active_storage.service = :digitalocean
```

having a User model with 

```ruby
has_one_attached :avatar do |attachable|
  attachable.variant(:thumb, resize_to_fill: [350, 350])
end
```

After uploading a file from the edit form the variant gets created when accessing the show view. 

Logs look like this

```
ActiveStorage::VariantRecord Create (1.8ms)  INSERT INTO ""active_storage_variant_records"" (""blob_id"", ""variation_digest"") VALUES ($1, $2) RETURNING ""id""  [[""blob_id"", 116], [""variation_digest"", ""cAfAf5iAxm52Ff0Mw7wXY2F9d4A=""]]
ActiveStorage::Blob Load (1.2ms)  SELECT ""active_storage_blobs"".* FROM ""active_storage_blobs"" INNER JOIN ""active_storage_attachments"" ON ""active_storage_blobs"".""id"" = ""active_storage_attachments"".""blob_id"" WHERE ""active_storage_attachments"".""record_id"" = $1 AND ""active_storage_attachments"".""record_type"" = $2 AND ""active_storage_attachments"".""name"" = $3 LIMIT $4  [[""record_id"", 51], [""record_type"", ""ActiveStorage::VariantRecord""], [""name"", ""image""], [""LIMIT"", 1]]
ActiveStorage::Attachment Load (0.2ms)  SELECT ""active_storage_attachments"".* FROM ""active_storage_attachments"" WHERE ""active_storage_attachments"".""record_id"" = $1 AND ""active_storage_attachments"".""record_type"" = $2 AND ""active_storage_attachments"".""name"" = $3 LIMIT $4  [[""record_id"", 51], [""record_type"", ""ActiveStorage::VariantRecord""], [""name"", ""image""], [""LIMIT"", 1]]
ActiveStorage::Blob Create (0.3ms)  INSERT INTO ""active_storage_blobs"" (""key"", ""filename"", ""content_type"", ""metadata"", ""service_name"", ""byte_size"", ""checksum"", ""created_at"") VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING ""id""  [[""key"", ""1dousqzwcx79wlpkfn0o0f1sjfci""], [""filename"", ""sigma-16mm.jpg""], [""content_type"", ""image/jpeg""], [""metadata"", ""{\""identified\"":true}""], [""service_name"", ""digitalocean""], [""byte_size"", 52716], [""checksum"", ""d9vmvbLEGDR2ZLzl7XNgUg==""], [""created_at"", ""2024-01-04 17:49:27.381653""]]
ActiveStorage::Attachment Create (0.4ms)  INSERT INTO ""active_storage_attachments"" (""name"", ""record_type"", ""record_id"", ""blob_id"", ""created_at"") VALUES ($1, $2, $3, $4, $5) RETURNING ""id""  [[""name"", ""image""], [""record_type"", ""ActiveStorage::VariantRecord""], [""record_id"", 51], [""blob_id"", 117], [""created_at"", ""2024-01-04 17:49:27.382925""]]
TRANSACTION (0.4ms)  COMMIT
S3 Storage (120.4ms) Uploaded file to key: 1dousqzwcx79wlpkfn0o0f1sjfci (checksum: d9vmvbLEGDR2ZLzl7XNgUg==)
```

Attachments are being displayed, everything is fine, until deleting an attachment where I get the following exception

```
DEBUG -- :   TRANSACTION (0.2ms)  BEGIN
DEBUG -- :   ActiveStorage::Attachment Exists? (1.7ms)  SELECT 1 AS one FROM ""active_storage_attachments"" WHERE ""active_storage_attachments"".""blob_id"" = $1 LIMIT $2  [[""blob_id"", 119], [""LIMIT"", 1]]
DEBUG -- :   ActiveStorage::VariantRecord Load (0.5ms)  SELECT ""active_storage_variant_records"".* FROM ""active_storage_variant_records"" WHERE ""active_storage_variant_records"".""blob_id"" = $1  [[""blob_id"", 119]]
DEBUG -- :   ActiveStorage::Attachment Load (0.8ms)  SELECT ""active_storage_attachments"".* FROM ""active_storage_attachments"" WHERE ""active_storage_attachments"".""record_id"" = $1 AND ""active_storage_attachments"".""record_type"" = $2 AND ""active_storage_attachments"".""name"" = $3 LIMIT $4  [[""record_id"", 119], [""record_type"", ""ActiveStorage::Blob""], [""name"", ""preview_image""], [""LIMIT"", 1]]
DEBUG -- :   ActiveStorage::Blob Destroy (1.4ms)  DELETE FROM ""active_storage_blobs"" WHERE ""active_storage_blobs"".""id"" = $1  [[""id"", 119]]
DEBUG -- :   TRANSACTION (6.7ms)  COMMIT
 INFO -- :   S3 Storage (100.6ms) Deleted file from key: 5qag8y7y3qqol4wrgo9iapy2z8oy
 INFO -- :   S3 Storage (38.1ms) Deleted files by key prefix: variants/5qag8y7y3qqol4wrgo9iapy2z8oy/
ERROR -- : Error performing ActiveStorage::PurgeJob (Job ID: 508059d0-a343-4377-ae75-c89195417e61) from Sidekiq(default) in 161.91ms: Aws::S3::Errors::NoSuchKey (Aws::S3::Errors::NoSuchKey):
```

I see this error twice in my logs. One time for the original and one time for the variant.

Active Storage uploads the blobs without any prefix. See logs on top. 

Am I doing something wrong? Is my application not configured correctly? What am I missing? Thank you 🙏 

### Expected behavior

Deleting an attachment should not throw errors

Variants are being uploaded to a `variants` subfolder 

### Actual behavior

Deleting an attachment throws an `Aws::S3::Errors::NoSuchKey (Aws::S3::Errors::NoSuchKey)` error as with the used key `variants/5qag8y7y3qqol4wrgo9iapy2z8oy/` no objects can be found.

This is where Active Storage tries to delete the prefixed variants which have never been created before: https://github.com/rails/rails/blob/main/activestorage/app/models/active_storage/blob.rb#L325

### System configuration

**Rails version**: 7.1.2

**Ruby version**: 3.2.2
",basiszwo,User,1,activestorage,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50580,2575027,50580,Port `ActiveRecord::AttributeMethods::Query` to Active Model,open,3,2024-01-04 16:07:32+00:00,2024-01-04 17:01:36+00:00,,"### Motivation / Background

Related to https://github.com/rails/rails/issues/50568

The backport of [type_for_attribute][] from Active Record to Active Model enables the backport of `ActiveRecord::AttributeMethods::Query` to define predicate methods for both Active Model and Active Record using the same code paths.

### Detail

This commit renames `Active{Record,Model}::AttributeMethods::Query` then includes it into both into the original
`ActiveRecord::AttributeMethods::Query` and into
`ActiveModel::Attributes` by default.

The test coverage was copied directly from the [Active Record test suite][], then modified to work in a database-less environment.

### Additional information

The `_query_attribute` method defined in
`ActiveRecord::AttributeMethods::Query` is specific to Active Record, so do not include it in the migration.

[type_for_attribute]: https://github.com/rails/rails/commit/83f543b8760308081ab1b58c25804c45c2597844
[Active Record test suite]: https://github.com/rails/rails/blob/a73cbbea6a082cdd320ecc92e3c6f1d46fe6af74/activerecord/test/cases/attribute_methods_test.rb#L494-L596

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,0,activemodel,activerecord,,,,,,,
https://api.github.com/repos/rails/rails/issues/50579,6014046,50579,CI: SQLite adapter is running in Trilogy tests,open,1,2024-01-04 15:49:54+00:00,2024-01-04 15:56:29+00:00,,"Ref #49373

https://buildkite.com/rails/rails/builds/103367#018cd514-4e51-4bac-be7c-c8656888c21e

I'm pretty sure this means that some other test is leaking, but I have not dug in at all.",skipkayhil,User,0,activerecord,ci issues,,,,,,,
https://api.github.com/repos/rails/rails/issues/50578,12740,50578,Document find_sole_by edge cases and correct syntax mistake [skip ci],open,0,2024-01-04 15:17:25+00:00,2024-01-15 19:09:00+00:00,,"### Motivation / Background

This Pull Request has been created because contributing to rails documentation says: Explore and document edge cases.

### Detail

This Pull Request changes activerecord/lib/active_record/relation/finder_methods.rb (documentation only). The % symbol should NOT be there to use the method. The syntax mistake has been corrected.

### Additional information

Edge cases has been tested with:

```ruby
# frozen_string_literal: true

require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem 'rails', github: 'rails/rails'
  gem 'sqlite3'
end

require 'active_record'
require 'minitest/autorun'
require 'logger'

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new($stdout)

ActiveRecord::Schema.define do
  create_table :articles, force: true do |t|
    t.string :title
    t.integer :rating
  
    t.datetime :published_at  
  end
end

class Article < ActiveRecord::Base
end

# 
# Input
# 
# In `ActiveRecord find_sole_by(arg, *args)`, the input parameters are:
#
# - `arg`: Typically a hash specifying the attributes and their values to match in a record. 
#          For example, `{name: 'John', status: 'active'}`.
# - `*args`: A splat operator allowing additional arguments, often used for more complex queries 
#            with SQL conditions and placeholders. 
#            For example, `find_sole_by(""created_at > ?"", Date.yesterday)`.

# The `find_sole_by` method returns the only record matching the criteria or 
# raises an error if multiple records match or no record matches.

class FindSoleBy < Minitest::Test
  def setup
    Article.create!(title: 'First Article', published_at: Time.now - 5.days, rating: 5)
  end

  def teardown
    Article.destroy_all
  end

  # Documents the input and output of the method.
  #
  # @param input [Integer, String, Array<Integer>, Array<String>] The input to be passed to the find method.
  # @return ActiveRecord the output type is ActiveRecord object.
  def test_interface
    result = Article.find_sole_by([""rating = ?"", 5])

    assert_equal Article, result.class
  end

  # Tests the behavior of the method when a non-existent record ID is passed as an argument.
  #
  # @raise [ActiveRecord::RecordNotFound] if the record with the given ID does not exist.
  def test_non_existent_record
    assert_raises(ActiveRecord::RecordNotFound) do
      Article.find_sole_by([""rating = ?"", 1])
    end
  end

  # Tests the behavior of the method when nil is passed as an argument.
  #
  # @return ActiveRecord object if the argument is nil.
  # Generated SQL: SELECT ""articles"".* FROM ""articles"" ORDER BY ""articles"".""id"" ASC LIMIT ?  [[""LIMIT"", 2]]
  def test_find_with_nil
    result = Article.find_sole_by(nil)

    assert_equal 'First Article', result.title
  end

  # Tests the behavior of the method when no argument is passed.
  # 
  # The first argument is required. 
  # The second argument is optional.
  # 
  # @raise ArgumentError Message: <""wrong number of arguments (given 0, expected 1+)""> if no argument is provided.
  def test_find_with_no_argument
    assert_raises(ArgumentError) do
      Article.find_sole_by
    end
  end

  # Tests the behavior of the method when an empty array is passed as an argument.
  #
  # @return [Array] An empty array.
  def test_find_with_empty_array
    result = Article.find_sole_by([])

    assert_equal 'First Article', result.title
  end

  # Tests the behavior of the method when there are multiple records that match the search criteria.
  #
  # @raise [ActiveRecord::SoleRecordExceeded] if multiple records match the search criteria.
  def test_multiple_records_case
    Article.create!(title: 'First Article', published_at: Time.now - 5.days, rating: 5)

    assert_raises(ActiveRecord::SoleRecordExceeded) do
      Article.find_sole_by([""rating = ?"", 5])
    end
  end
end
```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",bparanj,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50568,47848,50568,Publish ActiveModel::Attributes API,open,3,2024-01-03 23:05:22+00:00,2024-01-19 14:22:06+00:00,,"`ActiveModel::Attributes` is public API of the framework since 7.1, but wasn't advertised in guides mostly because there are a few features missing, like [attribute composition](https://gist.github.com/rafaelfranca/d54e7a1e8beb40ae1ac79bbb779970fa).

- [ ] `ActiveModel::Model` should include `ActiveModel::Attribute` by default when it is made public.
- [ ] Merge `Model` support https://github.com/rails/rails/pull/44380
- [ ] Merge `Collection` attribute https://github.com/rails/rails/pull/44324
- [ ] Merge `validates_model` https://github.com/rails/rails/pull/49534
- [ ] Decide what to do with `ActiveModel::NestedAttributes` https://github.com/rails/rails/pull/49637
- [ ] Decide if we want a Boolean attribute type https://github.com/rails/rails/pull/46376
- [ ] Write guide about this new feature
- [ ] Decide what to do with https://github.com/rails/rails/pull/49675",rafaelfranca,User,14,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50566,47848,50566,Generate devcontainer files by default,open,20,2024-01-03 22:54:55+00:00,2024-01-17 14:00:14+00:00,,"Make easier for users to setup their development environments for Rails applications.

https://containers.dev/

Note: This ticket serves as a placeholder for the intention to do this work. Not as an open invitation to feature requests. Before we engage in broad discussion of what should or shouldn't be in such a generator, the core team will propose a solution first, so there's something tangible to discuss.",rafaelfranca,User,23,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50565,47848,50565,Require Rack 3,open,1,2024-01-03 22:53:34+00:00,2024-01-14 17:23:32+00:00,,"As this is a major version, let's drop support to Rack 2 and keep pushing the ecosystem forward.",rafaelfranca,User,19,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50562,2286046,50562,Incorrect notification order in ActiveRecord transactions,open,3,2024-01-03 20:50:58+00:00,2024-01-06 18:23:37+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem 'rails'
  # If you want to test against edge Rails replace the previous line with this:
  #
  # first bad commit:
  # gem 'rails', github: 'rails/rails', ref: '542f0951dddac49bf06f7da35d990db4f3829307'

  # The parent commit of the above ref will pass this test:
  # gem 'rails', github: 'rails/rails', ref: 'bb68040de45754b27f5064c5635f6d0944cfc727'

  gem 'sqlite3'
end

require 'active_record'
require 'minitest/autorun'
require 'logger'

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new(STDOUT)

class Subscriber
  attr_reader :events

  def initialize
    @events = []
  end

  def start(_name, _id, payload)
    return if payload[:name] == 'SCHEMA'

    # substitution here to strip out the new default return on the main branch
    events << [:start, payload[:sql].sub(/ RETURNING ""id""/, '')]
  end

  def finish(_name, _id, payload)
    return if payload[:name] == 'SCHEMA'

    events << [:finish, payload[:sql].sub(/ RETURNING ""id""/, '')]
  end

  def publish(*); end

  def publish_event(*); end
end

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end
end

class Post < ActiveRecord::Base
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post
end

class BugTest < Minitest::Test
  def test_association_stuff
    subscriber = Subscriber.new
    ActiveSupport::Notifications.subscribe('sql.active_record', subscriber)

    post = Post.create!

    post.destroy

    create_events = subscriber.events.slice!(0, 6)
    destroy_events = subscriber.events

    expected_create_order = [
      [:start, 'begin transaction'],
      [:finish, 'begin transaction'],
      [:start, 'INSERT INTO ""posts"" DEFAULT VALUES'],
      [:finish, 'INSERT INTO ""posts"" DEFAULT VALUES'],
      [:start, 'commit transaction'],
      [:finish, 'commit transaction']
    ]

    expected_destroy_order = [
      [:start, 'begin transaction'],
      [:finish, 'begin transaction'],
      [:start, 'DELETE FROM ""posts"" WHERE ""posts"".""id"" = ?'],
      [:finish, 'DELETE FROM ""posts"" WHERE ""posts"".""id"" = ?'],
      [:start, 'commit transaction'],
      [:finish, 'commit transaction']
    ]

    assert_equal(create_events, expected_create_order)
    assert_equal(destroy_events, expected_destroy_order)
  end
end

```

### Expected behavior
The evented notifications should appear in the order of the database executions, i.e.:

- begin transaction
- execute statement
- commit transaction

### Actual behavior

The statement execution is wrapped around `begin`, with `commit` trailing after both:

- execute statement
  - begin transaction
- commit transaction

Or, to put it in terms of start/finish:

- start execute statement
- start begin
- finish begin
- finish execute statement
- start commit
- finish commit

This behavior changed in https://github.com/rails/rails/pull/44576. For loggers or other subscribers that receive a single notification per event, this probably did not change anything, as the 'finishes' are still in the correct order. However, for subscribers that process `start` and `finish` events individually (e.g., tracers), this ordering implies that ""execute statement"" is a parent event of ""begin"" — which is not correct in terms of how this was previously understood.

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.3.0
",zvkemp,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50557,2575027,50557,Improve documentation for `action_text:install` task,open,2,2024-01-03 16:15:17+00:00,2024-01-14 01:51:58+00:00,,"### Detail

First, mimic the documentation and guidance provided for the `active_storage:install` task, including nudges the execute the command when tables are missing.

Similarly, adjust the source code text in the generator itself. By removing the newlines, the generator won't inject the JS and CSS source more than once if it already exists.

### Additional information

This commit includes a diff scoped to `test/dummy` that was generated by executing the following:

```bash
cd test/dummy
bin/rails action_text:install
bin/rails db:migrate
```",seanpdoyle,User,0,actionpack,railties,docs,actiontext,,,,,
https://api.github.com/repos/rails/rails/issues/50553,26396425,50553,Fix instantiation of inherited classes when querying,open,1,2024-01-03 12:49:56+00:00,2024-01-11 14:43:26+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created because https://github.com/rails/rails/issues/50499

### Detail

Previously, querying from the base class resulted in an object of the inherited type, with 'ignored_columns' included in the 'attributes' method.

This behavior was inconsistent, as it did not occur when querying directly from the inherited class. This fix ensures consistent behavior in the attributes between the two ways of instantiate inherited classes during querying.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",jvlara,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50509,12740,50509,Add Dockerfile section in the docs [skip ci],open,2,2023-12-31 20:15:53+00:00,2024-01-03 00:26:24+00:00,,"### Motivation / Background

Getting started rails edge guide is missing details about Docker.

This Pull Request has been created because developers are opening issues due to lack of documentation on how to use it to run their Rails app.

### Detail

This Pull Request changes guides/source/getting_started.md

### Additional information

The section is based on Rafael's post: https://rubyonrails.org/2023/10/5/Rails-7-1-0-has-been-released

### Checklist

Before submitting the PR make sure the following are checked:

* [ ] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",bparanj,User,0,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50499,26396425,50499,"When quering on a base class that has inheritance, childs instantiate with full attributes including ignored columns",open,2,2023-12-31 06:57:22+00:00,2024-01-03 14:54:24+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""
  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }
  gem ""rails""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string :title
    t.string :exclusive_chile_column
    t.string :type
  end
end

class Post < ActiveRecord::Base
end

class Post::Chile < Post
end

class Post::Peru < Post
  self.ignored_columns += [:exclusive_chile_column]
end



class BugTest < Minitest::Test
  def test_association_stuff
    post_peru = Post::Peru.create!(title: 'hola')


    # Correct behavior, the column is ignored when assigning the attributes from sti class
    post_peru_called_from_sti = Post::Peru.find(post_peru.id)
    assert post_peru_called_from_sti.attributes.keys.exclude?('exclusive_chile_column')
    assert post_peru_called_from_sti.attributes.keys.size == Post::Peru.column_names.size

    # This is the bug, the column is not being ignored when assigning the attributes from base class
    post_peru_called_from_base_class = Post.find(post_peru.id)
    assert post_peru_called_from_base_class.instance_of? Post::Peru
    # fails 
    assert post_peru_called_from_base_class.attributes.keys.exclude?('exclusive_chile_column')
    # also fails 
    assert post_peru_called_from_base_class.attributes.keys.size == Post::Peru.column_names.size
  
  end
end
```

### Expected behavior
Sti classes when instantiated from the base_class on quering should not have ignored columns on the attributes associated with the records

### Actual behavior
Sti classes when instantiated from the base_class on quering method have ignored columns associated whose is inconsistent with the behaviour on calling the same quering method directly on the sti class 
This inconsistency results in instances of the STI class having different attributes, as demonstrated in the script above.


### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.2.2

### Contributing
I am considering submitting a pull request to address this issue because we use a monkey patch on our software. However, before proceeding, I would like to hear your thoughts. Do you think this is something that can be changed?
",jvlara,User,0,activerecord,attached PR,With reproduction steps,,,,,,
https://api.github.com/repos/rails/rails/issues/50487,699616,50487,Remove unnecessary to_a conversion for readonly_attributes method call,open,0,2023-12-30 04:06:50+00:00,2024-01-25 20:00:10+00:00,,"### Motivation / Background

In Rails 7.0 despite api documention, `readonly_attributes` returned a set:
https://github.com/rails/rails/blob/7-0-stable/activerecord/lib/active_record/readonly_attributes.rb#L26

This was fixed in 7.1:
https://github.com/rails/rails/blob/7-1-stable/activerecord/lib/active_record/readonly_attributes.rb#L31

However the usage of `readonly_attributes` was guarded with a .to_a which is now no longer needed https://github.com/rails/rails/blob/590a675c4ecfaa9b7b06787a30adeb0136524879/activerecord/lib/active_record/insert_all.rb#L195

### Detail

This Pull Request changes an unnecessary to_a call

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`

NA:
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",jprosevear,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50480,2741,50480,Add DB-backed Action Cable adapter as new default in Rails 8,open,8,2023-12-29 13:40:28+00:00,2024-02-02 22:45:15+00:00,,"Out of the box, Action Cable will only work with a single process setup using the in-memory adapter. If you run multiple processes, let alone multiple app servers, you have to add Redis to the mix or be running PostgreSQL. Redis is great, but it's another moving part, and PostgreSQL is also lovely, but it's only one out of our 3 supported databases. Action Cable should work with multiple processes out of the box regardless of which of the supported databases you use.

For ONCE #1, we built a tiny Active Record-based cable adapter, which works for both MySQL and SQLite. Plan is to extract this and add it in as the new default.",dhh,User,22,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50479,2741,50479,"Add Thruster to Docker setup to get HTTP/2, X-Sendfile, Caching by default in Rails 8",open,11,2023-12-29 13:31:03+00:00,2024-01-23 04:36:27+00:00,,"Puma does not support HTTP/2 out of the box, and there does not seem to be a short-term path to that changing. That means most people have to either stick nginx or a CDN in front of their app, which means more configuration and more moving parts.

As part of developing ONCE #1, we built a tiny, no-config Go-based proxy that sits in front of Puma to provide HTTP/2, public caching, and X-Sendfile setup. You run it by starting it with `airlock puma`, and that's it, you gain those speed upgrades without any hassle. This makes it a great fit for people who just want to run their Rails app off the default Dockerfile and with a minimum of fuss.",dhh,User,27,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50477,277819,50477,Active Storage can be configured by STORAGE_URL,open,0,2023-12-29 06:36:26+00:00,2023-12-31 23:17:14+00:00,,"Fixes #50448

NOTE: This is a proof-of-concept, that I came up with based on my understanding of ActiveRecord::DatabaseConfigurations and try to find a tiny seam to add support for this feature. Open to feedback and suggestions, but wanted to take a stab at this while it was fresh in my head.",zzak,User,0,activestorage,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50475,923418,50475,support dumping PostgreSQL inheritance & partitioning options to `schema.rb`,open,6,2023-12-28 21:23:47+00:00,2024-01-11 14:52:35+00:00,,"### Motivation / Background & Detail

[`create_table`](https://api.rubyonrails.org/v7.1.2/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_table) provides an `options:` key that allows you to append options to your table definition. One of the things you can do this way with PostgreSQL 10+ is use [native partitioning](https://www.postgresql.org/docs/current/ddl-partitioning.html) to declare partitioning definitions:

```
create_table :events, id: false, options: ""PARTITION BY LIST (account_id)"" do |t|
  t.bigint :account_id, null: false
  t.integer :kind, null: false
  t.datetime :occurred_at, null: false
end
```

Adding this to a migration and running it will properly create the partitioned table in development, but the dumped schema will not persist the specified partitioning options. Therefore, if you run your test suite which loads from `schema.rb`, your test database's table won't be properly partitioned.

This PR extends the PostgeSQL adapter's schema statements so that it can dump this partitioning definition as defined in the relevant system tables. 

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",waymondo,User,1,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50472,2575027,50472,Read `ActionText::Attachment.tag_name` in Action Text Fixtures,open,0,2023-12-28 13:54:36+00:00,2024-01-02 00:11:59+00:00,,"### Motivation / Background

Utilizing the [ActionText::FixtureSet.attachment][] method in consumer application's test suites relies on a hard-coded
`action-text-attachment` element tag name. While it's uncommon for that value to change, it _is_ possible to configure it with the `config.action_text.attachment_tag_name` configuration.

### Detail

This commit replaces the hard-coded name by interpolating `ActionText::Attachment.tag_name`.

Internal to the Rails test suite, Action Text's fixtures use HTML with `<p>` elements to wrap new blocks of text. Trix uses `<div>` elements by default for line breaking (and for [other historical reasons][]). This change is internal to this codebase, and will not affect users.

### Additional information

[ActionText::FixtureSet.attachment]: https://edgeapi.rubyonrails.org/classes/ActionText/FixtureSet.html#method-c-attachment
[other historical reasons]: https://github.com/basecamp/trix/issues/202#issuecomment-461166895

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,0,actiontext,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50461,701221,50461,"In rails 7.1  it is not possible to test path helpers in controllers tests when an application uses config.relative_url_root different to ""/""",open,4,2023-12-27 20:02:28+00:00,2024-01-30 15:10:56+00:00,,"### Steps to reproduce

Let's say I want to run an application on the mount point `/a/` and I want all my resources on that mount point (e.g `/a/users/`).

Using as I traditionally would:

1. `config.relative_url_root=""/a/""` and
2. `scope ""/a""` in `routes.draw` to recognize routes within the mount point ""/a""

At least with rails 6.x, 7.0 and 7.1 the resulting path helpers are different to the working routes as the following test case shows:

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails""
end

require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.secret_key_base = ""secret_key_base""
  config.relative_url_root = ""/a/""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    scope ""/a"" do
      get ""/"" => ""test#index"", as: :root
    end
  end
end

class TestController < ActionController::Base
  include Rails.application.routes.url_helpers

  def index
    render plain: ""Home""
  end
end

require ""minitest/autorun""
require ""rack/test""

class BugTest < Minitest::Test
  include Rack::Test::Methods
  include Rails.application.routes.url_helpers

  def test_workingroute_root_is_a_in_6_7_and_7_1
    get ""/a""  # This one works
    assert last_response.ok?
  end

  def test_root_path_different_to_workingroute_root_in_6_7_and_7_1
    puts root_path  # Will present ""/a/a""
    get root_path # No route matches [GET] ""/a/a""
    assert last_response.ok?
  end

  private
    def app
      Rails.application
    end
end
```

### Expected behavior

 `root_path` should be `/a`


### Actual behavior

The helper `root_path` is returning `/a/a` and that route in reality doesn't work, the route that works is `/a`.

With rails 7.1 and previous if I remove the `scope ""/a""` from `routes.draw`, `root_path` becomes `/` that is not what is needed.


### Remarks

Thinking in how to implement this in rails, I see two options:
1. not prefixing path helpers with `relative_url_root` since a `scope ""/a""` should be already present in `routes.draw` (maybe just presenting a warning when declared routes in `routes.draw`  are outside of `/a` ?).
2. not requiring `scope ""/a""` in `routes.draw` but rails should automatically parse routes starting with the prefix  `config.relative_url_root`

I guess that the first solution is simpler to implement and that was the behaviour for routes of mounted engines up to rails 7.0 (behaviour changed/broken in rails 7.1 as described at https://github.com/rails/rails/issues/49688  with this short PR by @bensheldon https://github.com/rails/rails/pull/45719 as described in the same issue ).


### System configuration

**Rails version**: 7.1  although this problema happened in 7.0 and 6.x also.

**Ruby version**: 3.2.2
",vtamara,User,0,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50454,2741,50454,Extract Action Notifier framework for push notifications,open,13,2023-12-27 00:58:14+00:00,2024-01-29 08:35:35+00:00,,"One of the most exciting developments in web standards this year was the full adoption of Web Push by Apple. This means we now have a reliable push notification standard that works in Safari, Chrome, and Firefox, which [reduces the need for native applications](https://world.hey.com/dhh/native-mobile-apps-are-optional-for-b2b-startups-in-2024-4c870d3e). But getting the service worker, web push configuration, and permission flow right is surprisingly complicated. We already have some great gems, like web-push, to handle some of the underlying plumbing, but putting it all together is far more complicated than it ought to be. So let's compress that complexity with a new dedicated framework.

While compressing the complexity of Web Push is the primary motivation for Action Notifier, it's also a great time to add an plugin setup that allows us to plug in adapters for services like pinpoint or other native platform protocols. But the intention is not to support every possible delivery format for notifications under the sun (like SMS and definitely not email, we have Action Mailer for that).

The first stab at this will be an extraction from ONCE #1. So until there's a first gem for this, let's hold any more detailed discussion of features or capabilities.

Prior art that'll be examined: https://github.com/palkan/active_delivery + [Notified](https://github.com/excid3/noticed)",dhh,User,40,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50453,2741,50453,Add a default LSP for better editor/IDE support in Rails 8,open,2,2023-12-27 00:33:27+00:00,2023-12-28 00:58:40+00:00,,"@tenderlove made [a very compelling argument](https://www.youtube.com/watch?v=GnqRMQ0iQTg&t=33m40s) for including an official Rails LSP in the framework at Rails World. Let's make it so.

Shopify is doing work in https://github.com/Shopify/ruby-lsp-rails.",dhh,User,79,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50452,2741,50452,Add structured logging next to developer logging,open,3,2023-12-27 00:26:24+00:00,2024-01-27 15:14:09+00:00,,"When you want to aggregate the data from your Rails application into a data analysis platform, it's a real pain trying to parse the developer-focused log lines that Rails spits out by default. In addition to these log lines, which are great in development and for manual inspection, we should add structured json logging on a per-request basis that can easily be digested by analytics.

Both Shopify and 37signals have been using in-house structured logging for a long time, so extracting something from those battle-tested scenarios is the path we intend to go.

cc @Jeremy @rafaelfranca ",dhh,User,79,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50451,2741,50451,Add a built-in benchmark tool,open,1,2023-12-27 00:17:01+00:00,2024-01-28 16:16:47+00:00,,"We should have a simple, built-in benchmark mechanism for people to evaluate different computing platforms. Whether they be cloud VMs, Raspberry Pis, or 96-core state-of-the-art owned server hardware. Think Geekbench or Speedometer. Run a big test suite, on a single machine, produce one comparable number. ""Oh, that new box we got? It does 3,456 on the Rails Speedrun!!"".

Easily comparable numbers make for better comparisons make for better buying decisions.",dhh,User,64,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50449,2741,50449,Run GC out-of-band by default,open,9,2023-12-26 23:16:01+00:00,2023-12-28 15:40:24+00:00,,"Ruby's GC can be a bit of a crude beast, and from the perspective of an application, it's awakened seemingly at random. When it runs, it smites that request with a serious penalty, and seemingly through no fault of its own. We've seen dramatic improvement in our P99 and P100 on HEY by running OOB GC, following @byroot's [excellent deep-div](https://shopify.engineering/adventures-in-garbage-collection)e into the Shopify OOB GC work.

So let's enable this great trick by default, and in case we need a few simple levers to control it, let's make them few and simple.

We can use https://www.rubydoc.info/gems/puma/Puma%2FDSL:out_of_band.

cc @byroot",dhh,User,0,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50448,2741,50448,Add STORAGE_URL to Active Storage,open,2,2023-12-26 22:44:02+00:00,2023-12-31 05:25:31+00:00,,"We can configure our database with DATABASE_URL, our Redis server with REDIS_URL, but our Active Storage still needs a yaml file. This makes it harder to specialize Active Storage in cases of one-application-multiple-deployments, and it needn't be so.

I propose that we follow the same format as DATABASE_URL. Here's a set of URLs that could be used:

```
disk://my/root/path
s3://access_key_id:secret_access_key@us-east-1/your-bucket
gcs://path/to/gcs.keyfile@your_project/your-bucket
azure://storage_access_key@storage_account_name/your-container
```",dhh,User,4,attached PR,activestorage,,,,,,,
https://api.github.com/repos/rails/rails/issues/50446,2741,50446,Add basic authentication generator,open,32,2023-12-26 22:31:21+00:00,2024-01-14 19:43:36+00:00,,"Rails now include all the key building blocks needed to do basic authentication, but many new developers are still uncertain of how to put them together, so they end up leaning on all-in-one gems that hide the mechanics. While these gems are great, and many people enjoy using them, they should not be seen as a necessity. We can teach Rails developers how to use the basic blocks by adding a basic authentication generator that essentially works as a scaffold, but for authentication.

Note: This ticket serves as a placeholder for the intention to do this work. Not as an open invitation to feature requests. Before we engage in broad discussion of what should or shouldn't be in such a generator, the core team will propose a solution first, so there's something tangible to discuss.

cc @rafaelfranca ",dhh,User,130,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50444,2741,50444,Make Propshaft the default asset pipeline in Rails 8,open,0,2023-12-26 22:20:28+00:00,2023-12-26 22:20:28+00:00,,"It's time to have [Propshaft](https://github.com/rails/propshaft) take over from our venerable Sprockets in Rails 8. Our primary approach with #nobuild Hotwire is a better fit for Propshaft, and it also works great with out jsbundling/cssbundling secondary approach.

We will need to thoroughly test, document, and work with popular gems/plugins to ensure compatibility. Propshaft contains a small subset of features from Sprockets, and undoubtedly some will depend on these features. If incompatibilities can't be corrected in all cases, we should make sure that error/guard messages are good.

If you're interested in helping with this effort, you can help us identify the incompatibilities in this issue.

cc @brenogazzola ",dhh,User,23,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50443,2741,50443,Solid Cache should be the default caching backend for Rails 8,open,27,2023-12-26 22:08:12+00:00,2024-01-09 14:44:48+00:00,,"Like with Solid Queue, [Solid Cache](https://github.com/rails/solid_cache) gives us a database-agnostic backend for Rails.cache that works well as an out-of-the-box default in production – without any configuration needed or dependencies (like Redis) required.

The tables should be setup out of the box with ""rails new"", but you should be able to avoid this using `--skip-solid-cache` or just `--skip-solid`.

Work outstanding:

- [ ] Add size-based trimming to prevent SC from filling up tiny DBs.
- [ ] Release Solid Cache 1.0

cc @djmb",dhh,User,13,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50442,2741,50442,Solid Queue should be the default Active Job backend for Rails 8,open,19,2023-12-26 22:04:32+00:00,2024-01-30 13:36:42+00:00,,"[Solid Queue](https://github.com/basecamp/solid_queue) should be the default Active Job backend for Rails 8 since it supports all our major databases and enables someone to run jobs in production without either additional dependencies (like Redis), using database-specific backends (like Good Job), or using commercially-restrained backends (like Sidekiq).

The necessary tables should be setup by default as part of rails new. The user should not have to do any configuration whatsoever to be able to deploy their application in production with Solid Queue as the job runner. We also need to figure out a standardized setup for running the worker jobs, especially as part of the default Dockerfile setup.

You should be able to avoid this using `--skip-solid-queue` or just `--skip-solid`.

cc @rosa",dhh,User,41,activejob,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50441,2741,50441,Setup Kamal by default for new applications,open,8,2023-12-26 21:59:36+00:00,2024-01-01 00:51:37+00:00,,"[Kamal](https://kamal-deploy.org) has given us the power to easily deploy Rails applications anywhere without any commercial entanglements. This should be the default path we recommend for new people getting started with Rails, so it should be configured by default. This basically just means adding kamal to the gemfile by default and running kamal init during setup. You should be able to turn this off using `--skip-kamal`.",dhh,User,52,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50437,277819,50437,Add a bug report for Action Cable,open,2,2023-12-25 12:05:15+00:00,2023-12-25 12:47:23+00:00,,"This was the first approach that came to mind, maybe would be interesting to demonstrate using the built-in [TestHelper](https://edgeapi.rubyonrails.org/classes/ActionCable/TestHelper.html).

There is probably some work to get this passing in CI, similar to #49527, too.",zzak,User,2,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50435,8801616,50435,Rails 7.1: ActiveRecord polymorphic raise error after add query_constraints,open,3,2023-12-25 09:39:34+00:00,2023-12-31 23:07:24+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
I got an error when I try to use Composite Primary Keys in Rails 7.1. When I add query_constraints to the model, the polymorphic won't work any more.
Is it a bug or may I do something wrong? 
<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""rails"", ""~> 7.1.0""
  gem ""sqlite3""
  gem ""debug""
end

require ""active_record""
require ""logger""
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :comments do |t|
    t.bigint :ts, null: false
    t.bigint :nonce, null: false
    t.string :owner_type, null: false
    t.string :owner_id, null: false

    t.timestamps
  end

  create_table :articles do |t|
    t.timestamps
  end
end

class Comment < ActiveRecord::Base
  query_constraints :ts, :nonce
  belongs_to :owner, polymorphic: true
end

class Article < ActiveRecord::Base
  has_many :comments, as: :owner
end

article = Article.new
article.save!
article.comments
```

### Expected behavior
<!-- Tell us what should happen -->
It should work well and won't raise error
### Actual behavior
<!-- Tell us what happens instead -->
raise error
```ruby
~/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.2/lib/active_record/reflection.rb:799:in `derive_fk_query_constraints': The query constraints on the `Comment` model does not include the primary key so Active Record is unable to derive the foreign key constraints for the association. You need to explicitly define the query constraints for this association. (ArgumentError)

            raise ArgumentError, <<~MSG.squish
```
### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.2.2
",azhaizhai,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50431,5657035,50431,Add `exclusion_constraint_exists?` and `unique_constraint_exists?` helpers,open,0,2023-12-22 22:18:21+00:00,2024-01-09 12:55:20+00:00,,"Exclusion constraints were added in https://github.com/rails/rails/pull/40224 and unique constraints were added in https://github.com/rails/rails/pull/46192.

Both lacks an ability to check if the constraint already exists, to make, for example, adding constraints idempotent. 
This ability already exists for check constraints, for example (same for foreign keys, indexes etc).",fatkodima,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50430,5122678,50430,Introduce predicate definition when defining scopes,open,2,2023-12-22 18:05:28+00:00,2023-12-24 01:55:51+00:00,,"### Motivation / Background

Creates parity between scopes and instances of records, similar to how [enums](https://guides.rubyonrails.org/active_record_querying.html#enums) automatically create instance methods that query whether the model belongs to that scope.

```ruby
class Book < ApplicationRecord
  scope :out_of_print, -> { where(out_of_print: true) }, predicate: true
  # Creates instance method named `within_out_of_print?`

  scope :in_print, -> { where(out_of_print: false) }, predicate: :in_print
  # Creates instance method named `in_print?`
end
```

```irb
irb> Book.out_of_print.first.within_out_of_print?
=> true

irb> Book.in_print.first.in_print?
=> true
```

### Detail

Adds `**options` argument to `scope` definition, allowing caller to optionally pass `predicate: true` or `predicate: :desired_predicate_name`.

The goal is to keep this feature opt-in to avoid automatically creating a method for each and every scope.

Additionally, we default to `within_<scope_name>` as to not conflict with the instance methods generated by [enums](https://guides.rubyonrails.org/active_record_querying.html#enums)

### Additional information

This should be compatible with [Composite Primary Keys](https://guides.rubyonrails.org/active_record_composite_primary_keys.html), but existing fixtures did not exist (as far as I could tell).

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",stevepolitodesign,User,1,activerecord,docs,,,,,,,
https://api.github.com/repos/rails/rails/issues/50429,277819,50429,[ActionMailbox] Replace test/dummy with railtie-like test harness,open,0,2023-12-22 07:30:52+00:00,2023-12-22 07:30:56+00:00,,See #50427 for context.,zzak,User,0,actionmailbox,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50428,277819,50428,[ActionText] Replace test/dummy with railtie-like test harness,open,0,2023-12-22 07:30:30+00:00,2023-12-22 07:30:34+00:00,,See #50427 for context.,zzak,User,0,actiontext,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50427,277819,50427,[ActiveStorage] Replace test/dummy with railtie-like test harness,open,1,2023-12-22 07:29:48+00:00,2024-01-19 05:21:54+00:00,,"This PR is a proof-of-concept for removing the dummy applications from [Active Storage, Action Mailbox, and Action Text]. I've split them up into separate PRs so that they are easier to review and rebase when necessary.

## Callouts

* This code is intended for feedback, on the approach and determine what follow-up work could be done
* There is still need for polish, like removing unnecessary boiler-plate, fixing CI, making sure we don't leak logs, etc.
* This doesn't replace the need for a true integration test where the application is generated at test time

## Motivation

The dummy apps were last updated in #47259 and previously in #42286.

There is an interest from inside the core team to get rid of them.

> In my option, It doesn't make sense to upgrade dummy apps inside the framework every time we change the framework itself. Probably those dummy apps get outdated daily, and it is very likely we will change Rails in a way that would break those frameworks but the test will not catch because the dummy app is outdated.
> 
> If you want to work in that direction, it would be great.

",zzak,User,0,activestorage,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50417,28561,50417,Add `to_sql` support for calculation methods like `count`,open,0,2023-12-21 10:53:01+00:00,2023-12-21 20:20:36+00:00,,"### Motivation / Background

As the calculation methods directly return a result, it's not possible to call `to_sql` on the query.

By allowing `to_sql` to take an operation and column name as argument we can return the SQL:

```ruby
User.all.to_sql(:count)
# => ""SELECT COUNT(*) FROM `users`""

User.all.to_sql(:maximum, :id)
# => ""SELECT MAX(`users`.`id`) FROM `users`""
```

### Additional information

Combining `count` with a `group` is not yet supported.
I'd like to add the same functionality to `explain`.
Related issue adding `:delete_all`: https://github.com/rails/rails/pull/37975

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",p8,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50414,2575027,50414,Improve Action Text System Test coverage,open,0,2023-12-21 01:41:54+00:00,2023-12-21 01:41:58+00:00,,"### Motivation / Background

Introduce the `ActionText::RichTextEditorTest` to exercise Action Text's integration with Active Storage. First, assert that Action Text renders an Active Storage blob preview of the image within the `<trix-editor>` element prior to persisting the rich-text record. Next, assert that Active Storage renders the uploaded file within the rendered rich-text content.

### Detail

In addition to expanding System Test coverage, this commit also alters the existing `ActionText::SystemTestHelperTest` coverage to utilize Capybara's built-in [:element][] selector as an alternative to CSS. The `:element` selector supports arbitrary keyword arguments as HTML attribute filters. For example, `input: true` as a filter translates to asserting the presence of any `[input]` attribute. Similarly, it enables assertions with Ruby strings instead of interpolating Ruby strings **into** CSS selectors.

[:element]: https://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Selector

### Additional information

Related to https://github.com/rails/rails/pull/49527 and https://github.com/rails/rails/pull/46807.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,0,actiontext,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50408,6014046,50408,Fix ensuring 7.2 defaults listed in configuring,open,0,2023-12-20 19:04:06+00:00,2023-12-21 22:20:20+00:00,,"Previously, because the 7.2 header was missing from configuring.md, railspect was not checking that newly introduced 7.2 framework defaults are listed.

This commit adds the header to ensure they get checked, and then also fixes an issue that occurs if a versioned section has no defaults listed.
",skipkayhil,User,0,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50406,5122678,50406,Change `active_model.i18n_customize_full_message` default from `false` to `true`,open,0,2023-12-20 13:18:26+00:00,2023-12-20 13:21:12+00:00,,"### Motivation / Background

Follow-up to #32956 and #35789

The introduction of this configuration in #32956 stated that:

> The goal of this PR is to make it easier for an app to transition from
a #{attribute} #{message} to a #{message}, full_message error format.

However, because the default value was set to `false`, this feature was difficult to discover.

Moving forward, consumers will be able to [override the format of an individual attribute](https://guides.rubyonrails.org/configuring.html#config-active-model-i18n-customize-full-message) by default.

```yml
en:
  activemodel: # or activerecord:
    errors:
      models:
        person:
          # Override the format for all Person attributes:
          format: ""Invalid %{attribute} (%{message})""
          attributes:
            age:
              # Override the format for the age attribute:
              format: ""%{message}""
              blank: ""Please fill in your %{attribute}""
```

### Detail

`config.active_model.i18n_customize_full_message` defaults to `true` for `config.load_defaults 7.2` and above

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",stevepolitodesign,User,1,activemodel,railties,docs,,,,,,
https://api.github.com/repos/rails/rails/issues/50405,6014046,50405,"Add condensed #inspect for Pool, Adapter, Config",open,0,2023-12-20 04:21:25+00:00,2023-12-28 17:22:17+00:00,,"### Motivation / Background

Previously, it was very easy to accidentally leak a database password in production logs if an error ends up calling inspect on a ConnectionPool or an individual connection (Adapter). This is due to the default `#inspect` output for Pools and Adapters being unnecessarily large, and both currently including passwords (through the DatabaseConfig of a Pool, and the internal configuration of an Adapter).

### Detail

This commit addresses these issues by defining a custom `#inspect` for ConnectionPool, AbstractAdapter, and DatabaseConfig. The condensed `#inspect` only includes a few valuable fields instead of all of the internals, which prevents both the large output and passwords from being included.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",skipkayhil,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50400,22918438,50400,Add `active_record.config.validate_migration_timestamps` config option.,open,0,2023-12-19 19:50:45+00:00,2023-12-19 20:06:30+00:00,,"### Motivation / Background

Take two of https://github.com/rails/rails/pull/50205, reverted [here](https://github.com/rails/rails/pull/50231).

As discussed in the revert PR, forward-dated migrations are the main reason hand-edited migrations can be problematic.
Rather than validating that a timestamp is a ""real"" timestamp in the form we expect, as proposed in the first PR, we reject any migrations with timestamp prefixes greater than ""one day from the current timestamp"". The `1.day` allows us to forward date migrations within a narrow range, when e.g. copying engine migrations, while preventing prefixes that would actually pose problems for future migration generation.

### Detail

Adds an `active_record.config.validate_migration_timestamps` config option. When set, an `ActiveRecord::InvalidMigrationTimestampError` will be raised if the timestamp prefix for a migration is more than a day ahead of the timestamp associated with the current time. This is done to prevent forward-dating of migration files, which can impact migration generation and other migration commands.

It is turned off by default, but will be turned on for applications starting in Rails 7.2.

### Additional information

There was some discussion in https://github.com/rails/rails/pull/50231 about string vs numeric based maxes. We are inconsistent with which one we use: `#next_migration_version` uses a string-based max:
https://github.com/rails/rails/blob/b0048c787ae44700ab4194251342dfe6f9fb0059/activerecord/lib/active_record/migration.rb#L1118-L1120

But `#current_version` uses a numeric one:
https://github.com/rails/rails/blob/b0048c787ae44700ab4194251342dfe6f9fb0059/activerecord/lib/active_record/migration.rb#L1302-L1305

For the purposes of this PR, I believe we should compare using numeric-based maxes: this ensures that migration prefixes that are too long (ie. more than 14 digits) will be flagged as invalid. There was a [previous PR](https://github.com/rails/rails/pull/43604) that changed `#next_migration_version` to use an integer-based maxed, but it was reverted because it broke existing migrations with timestamps that were too long (one of the cases we're trying to prevent with this PR). We may want to consider bringing in those changes so that we consistently assume ""current migration"" to mean ""migration with numeric-based max version"".

It's also worth noting that it's hard for existing applications to opt-into this if they already have problematic migrations (as we do at Shopify). Should we enforce that applications roll these migrations up, or modify the filenames? 

### Checklist

Before submitting the PR make sure the following are checked:

* [X] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [X] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [X] Tests are added or updated if you fix a bug or add a feature.
* [X] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.

cc @eileencodes @matthewd @fxn ",adrianna-chang-shopify,User,0,activerecord,railties,docs,,,,,,
https://api.github.com/repos/rails/rails/issues/50396,19192189,50396,Make the Relation -> Model delegation stricter,open,4,2023-12-19 10:50:02+00:00,2024-01-16 11:44:28+00:00,,"In https://github.com/rails/rails/pull/50395 I noticed lots of methods are delegated from `Relation` to the model. The intent of this code is to allow using use defined class methods like scopes.

But because of this autmated delegation it allowed calling any `ActiveRecord::Base` class method on a `Relation`, which in itself may be desireable, however we very wastefully define the delegator on the first call, and worse we wrap it with a current scope setter.

So I think we should be more strict about it.

NB: this of course breaks a tons of test, so I need to find more time to finish this, and it likely need a config flag and a deprecation notice of some sort. Or alternatively we can just accept this API, but delegate all the `AR::Base` class methods eagerly and without the scoping overhead. TBD.",casperisfine,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50392,39980734,50392,[FIX] For Sqlite3 db:drop command output,open,2,2023-12-18 18:24:47+00:00,2024-01-20 09:55:04+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

Fixes #50391 

Whille executing command, in case when database already dosen't exist.

```shell
bin/rails db:drop
Dropped database 'storage/development.sqlite3'
Database 'storage/test.sqlite3' does not exist
```

It is observed that for the non-existing database `storage/development.sqlite3` on the disk, the command output displays `Dropped database 'storage/development.sqlite3'`. Instead, it should state `Database 'storage/development.sqlite3' does not exist`.

---
In the ActiveRecord SQLite3 adapter code at 

https://github.com/rails/rails/blob/462e8e8b1c74d46a78e7077c5b07bfbc6fab08b0/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb#L31-L39

It appears that every time a new connection to SQLite3 is established, an attempt is made to create a database due to the default configuration settings.

This behavior is defined in the SQLite3 Ruby gem code, specifically at 

https://github.com/sparklemotion/sqlite3-ruby/blob/302e9c0328bff2bb04e1d4a54614140ca06f3648/lib/sqlite3/database.rb#L91-L101

You can also refer to the relevant documentation [here](https://rubydoc.info/gems/sqlite3/SQLite3%2FDatabase:initialize), which outlines supported permission options.

Each time a new connection to the database is established (used for dropping the database or executing other commands), the connection first attempts to create a database and then proceeds to drop it.

An issue arises when an exception is raised in the code snippet below, as it doesn't work as intended. The SQLite3 database is created with the default mode of `READWRITE | CREATE`. Consequently, a new database is created every time, even if it already exists. 

```ruby
rescue Errno::ENOENT => error 
   if error.message.include?(""No such file or directory"") 
     raise ActiveRecord::NoDatabaseError 
   else 
     raise 
   end 
 end 
```

### Detail

In this PR, I have made a modification to the default mode of SQLite3 from `READWRITE|CREATE` to just `READWRITE`. Consequently, if the database does not exist, it will now raise an exception `SQLite3::CantOpenException`.

This adjustment aligns with a similar approach used for MySQL and Postgres. Specifically, when establishing a connection, the database is not created automatically; instead, it is handled separately to ensure consistent behavior across different database systems.

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->
1. Default Mode in Sqlite3: https://rubydoc.info/gems/sqlite3/SQLite3%2FDatabase:initialize
2. Why Sqlite3 have not made it READWRITE as default mode?: https://github.com/sparklemotion/sqlite3-ruby/pull/174

### Checklist

Before submitting the PR make sure the following are checked:

* [ ] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #50391 50391]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",maniSHarma7575,User,0,activerecord,railties,,,,,,,
https://api.github.com/repos/rails/rails/issues/50391,39980734,50391,With SQLite3 Database incorrect command output for 'bin/rails db:drop'.,open,3,2023-12-18 18:23:37+00:00,2024-01-01 09:08:58+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

1. Create a new Rails app.
```ruby
rails new sqlite-db-drop
```

2. Run the `db:drop` command.
```ruby
bin/rails db:drop
```

3. Output of the above command.
```shell
Dropped database 'storage/development.sqlite3'
Database 'storage/test.sqlite3' does not exist
```

Upon closer inspection, it is observed that for the non-existing database `storage/development.sqlite3` on the disk, the command output displays `Dropped database 'storage/development.sqlite3'`. Instead, it should state `Database 'storage/development.sqlite3' does not exist`.

### Research:

Upon investigating the code, I discovered the following:

In the ActiveRecord SQLite3 adapter code at 

https://github.com/rails/rails/blob/462e8e8b1c74d46a78e7077c5b07bfbc6fab08b0/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb#L31-L39

It appears that every time a new connection to SQLite3 is established, an attempt is made to create a database due to the default configuration settings.

This behavior is defined in the SQLite3 Ruby gem code, specifically at 

https://github.com/sparklemotion/sqlite3-ruby/blob/302e9c0328bff2bb04e1d4a54614140ca06f3648/lib/sqlite3/database.rb#L91-L101

You can also refer to the relevant documentation [here](https://rubydoc.info/gems/sqlite3/SQLite3%2FDatabase:initialize), which outlines supported permission options.

Each time a new connection to the database is established (used for dropping the database or executing other commands), the connection first attempts to create a database and then proceeds to drop it.

An issue arises when an exception is raised in the code snippet below, as it doesn't work as intended. The SQLite3 database is created with the default mode of `READWRITE | CREATE`. Consequently, a new database is created every time, even if it already exists. 

```ruby
rescue Errno::ENOENT => error 
   if error.message.include?(""No such file or directory"") 
     raise ActiveRecord::NoDatabaseError 
   else 
     raise 
   end 
 end 
```

You can read about. Why Sqlite3 Gem has not forced Safe Check on the database initialization only if database exist?
[https://github.com/sparklemotion/sqlite3-ruby/pull/174](https://github.com/sparklemotion/sqlite3-ruby/pull/174)


Have created a PR to fix: [https://github.com/rails/rails/pull/50392](https://github.com/rails/rails/pull/50392)

### Expected behavior
<!-- Tell us what should happen -->

```shell
bin/rails db:drop
Database 'storage/development.sqlite3' does not exist
Database 'storage/test.sqlite3' does not exist
```

### Actual behavior
<!-- Tell us what happens instead -->

```shell
bin/rails db:drop
Dropped database 'storage/development.sqlite3'
Database 'storage/test.sqlite3' does not exist
```

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.2.2
",maniSHarma7575,User,1,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50390,2575027,50390,Handle `as: :html` in `IntegrationTest`,open,1,2023-12-18 16:06:17+00:00,2023-12-18 19:47:45+00:00,,"### Motivation / Background

Closes [#50345][]

### Detail

First, handle the exception mentioned in [#50345][]:

```
BugTest#test_params_with_htm_content_type:
NoMethodError: undefined method `to_html' for {:name=>""Muad'Dib""}:Hash
    .../actionpack/lib/action_dispatch/testing/request_encoder.rb:39:in `encode_params'
    .../actionpack/lib/action_dispatch/testing/integration.rb:251:in `process'
```

When an `ActionDispatch::Testing::RequestEncoder` registered through a call to `register_encoder` does not define a `:param_encoder` keyword argument **and** the params do not respond to a `to_$MIME` method, fallback to returning the `params` themselves, unchanged. This behavior is what's implemented by the private `IdentityEncoder` class, so mimic it for defined encoders.

### Additional information

Next, special case handling requests with `as: :html`. Passing `as: :html` implies that the request parameters will come from a `POST` body encoded as `text/html`. That isn't entirely true -- browsers will encode `POST` parameters as with the `Content-Type:` header set to either [application/x-www-form-urlencoded][] or [multipart/form-data][]. This commit skips setting the `CONTENT_TYPE` Rack header when processed with `as: :html`.

[#50345]: https://github.com/rails/rails/issues/50345
[application/x-www-form-urlencoded]: https://developer.mozilla.org/en-US/docs/Learn/Forms/Sending_and_retrieving_form_data#the_post_method
[multipart/form-data]: https://developer.mozilla.org/en-US/docs/Learn/Forms/Sending_and_retrieving_form_data#the_enctype_attribute


### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,0,actionpack,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50389,54629302,50389,[Fix #49520] `strict_loading` violations ignored on `has_many` with query methods,open,0,2023-12-18 10:50:06+00:00,2023-12-19 09:19:16+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

Fixes https://github.com/rails/rails/issues/49520

### Detail

Updates `ActiveRecord::Relation#exec_queries` to raise or log on a strict loading violation. This gets called when association queries are executed with query methods.

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",joshuay03,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50386,99301559,50386,Fix issue with destroy after RestartParentTransaction and SavepointTransaction rollback,open,11,2023-12-18 00:03:36+00:00,2024-01-01 18:44:47+00:00,,"

<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created in order to fix issue #50338.

### Detail

This Pull Request provides a working solution for the destroy function for the cases of RestartParentTransaction and SavepointTransaction. 

Previously, the destroy function was not properly removing entries from the database for the RestartParentTransaction and SavepointTransaction. If @_trigger_destroy_callback is true at the beginning of the destroy function, destroy_row would never be invoked.

This Pull Request will ensure destroy_row is invoked when @_trigger_destroy_callback is true at the beginning of the destroy function. This will remove the corresponding row from the database. Otherwise, if @_trigger_destroy_callback is false, destroy_row is only invoked if persisted? is true.

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",mguan2020,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50375,99301559,50375,Fix issue with regression in integration tests when providing as: :html,open,1,2023-12-17 04:56:12+00:00,2023-12-18 16:07:30+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created in order to fix issue #50345. 

### Detail

This Pull Request solves the problem in Rails 7.1 where providing as: :html in the integration test for ActionDispatch causes a ""undefined method to_html"" error to be thrown.

To solve this issue, this Pull Request registers a param_encoder in addition to a HTML encoder in order to perform the request to the controller. 

As a result, both the new tests provided in content_type_test.rb as well as the original tests for ActionDispatch are working.

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",mguan2020,User,0,actionpack,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50371,5077225,50371,Ensure SQLite transaction default to IMMEDIATE mode,open,21,2023-12-16 16:24:50+00:00,2024-02-01 17:51:18+00:00,,"### Motivation / Background

As SQLite's popularity grows as a production database engine for Rails applications, so does the need for robust and resilient default configuration. One of the most common issues faced when using SQLite in a Rails application are the occasional ActiveRecord::StatementInvalid (SQLite3::BusyException: database is locked) exceptions. These occur when a DEFERRED transaction attempts to acquire the SQLite database lock in the middle of a transaction once hitting a write query while another connection holds the database lock. Since this occurs in the middle of a transaction, SQLite does not attempt to retry to transaction by calling the set `busy_handler`/`busy_timeout` callback, but instead immediately errors with a busy exception.

### Detail

This PR has considered two different approaches over the course of its existence:

1. globally change the default transaction mode for the SQLite adapter from `DEFERRED` to `IMMEDIATE`
2. only change the transaction mode from `DEFERRED` to `IMMEDIATE` for transactions that Rails uses to wrap ActiveRecord write operations

Various test failures where tests are manually creating transactions, along with a stated preference to not expose a generic `mode` option to the `#transaction` method, which would have no meaning or purpose for other adapters, led me to go with option 2.

With option 2, `ActiveRecord::Base#with_transaction_returning_status` now calls `Adapter#transaction_returning_status` instead of `Adapter#transaction` directly. By default, that method is simply as alias, but the SQLite3 adapter implements the `transaction_returning_status` method to ensure that the immediate transaction mode is used. Transaction mode setting is done via the `use_*_transaction_mode!` methods added to the SQLite3 adapter, which the `test_fixtures.rb` module uses as well to ensure that fixture transactions always use deferred transactions.

### Additional information

Alongside https://github.com/rails/rails/pull/50370, this PR stabilizes SQLite's ability to handle concurrency without throwing intermittent but frequent busy exceptions.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",fractaledmind,User,6,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50366,4400771,50366,`csrf_meta_tags`: use `safe_join` instead of `html_safe`,open,0,2023-12-15 17:05:41+00:00,2023-12-15 18:20:45+00:00,,"### Motivation / Background

While these are currently equivalent in `csrf_meta_tags`, it's safer for potential future code. It also helps communicate to users that `html_safe` can be a dangerous method and that there are safer alternatives to it.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",smmr0,User,0,actionview,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50364,14406,50364,ApplicationTests::AssetsTest#test_precompile_shouldn't_use_the_digests_present_in_manifest.json test failures,open,4,2023-12-15 11:54:50+00:00,2024-01-02 03:42:09+00:00,,"### Steps to reproduce

Running Railties test suite on Fedora Rawhide, I am observing following test error more often then not (two last runs):

~~~
$  bundle exec ruby -Itest test/application/assets_test.rb -n ""/test_precompile_shouldn't_use_the_digests_present_in_manifest.json/""
Run options: -n /test_precompile_shouldn't_use_the_digests_present_in_manifest.json/ --seed 27991

# Running:

F

Failure:
ApplicationTests::AssetsTest#test_precompile_shouldn't_use_the_digests_present_in_manifest.json [test/application/assets_test.rb:299]:
Expected ""application-c56ef81d122dffa8b257b0546ba1b09bd2d8b97e4aef881de8db9f760b903af6.css"" to not be equal to ""application-c56ef81d122dffa8b257b0546ba1b09bd2d8b97e4aef881de8db9f760b903af6.css"".


rails test test/application/assets_test.rb:282



Finished in 0.668613s, 1.4956 runs/s, 1.4956 assertions/s.
1 runs, 1 assertions, 1 failures, 0 errors, 0 skips


$  bundle exec ruby -Itest test/application/assets_test.rb -n ""/test_precompile_shouldn't_use_the_digests_present_in_manifest.json/""
Run options: -n /test_precompile_shouldn't_use_the_digests_present_in_manifest.json/ --seed 62499

# Running:

.

Finished in 0.653927s, 1.5292 runs/s, 1.5292 assertions/s.
1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
~~~

The whole test setup, trying to replicate the Rails git directory structure can be seen [here](https://src.fedoraproject.org/rpms/rubygem-railties/blob/f81fd59f8c25811e5d46bb2d0697db2d96ebaaf8/f/rubygem-railties.spec#_120-227)

### Expected behavior
The test passes every time

### Actual behavior
The test passes sometime

### System configuration
**Rails version**: 7.0.8

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]
",voxik,User,0,asset pipeline,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50361,5642707,50361,Fix inconsistent results of params.deep_transform_keys,open,0,2023-12-15 02:14:08+00:00,2023-12-15 02:14:17+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

Fix: #50326

### Detail

`params.deep_transform_keys` should transform the keys of the params, including nested hashes, arrays, and ActionController::Parameters objects.

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",iagopiimenta,User,0,actionpack,activesupport,,,,,,,
https://api.github.com/repos/rails/rails/issues/50348,1709692,50348,Render Partial Collection with a layout parameter,open,2,2023-12-13 14:08:48+00:00,2024-01-20 10:38:38+00:00,,"The current implementation does not respect the layout parameter in case of mixed collections.

This commit fixes the issue by ensuring that the code path for mixed collections render the partial inside the provided layout.

### Motivation / Background

Fixes #49590

The current implementation of `render_collection_derive_partial` ignores the layout parameter in case of mixed collections.

### Detail

This Pull Request changes`render_collection_derive_partial` to call a new `render_collection_with_no_partial` method which renders the partial inside the specified layout.

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->",cmaruz,User,0,actionview,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50347,13816206,50347,Fix derived foreign key to return correctly when association id is part of query constraints,open,1,2023-12-13 10:00:03+00:00,2024-01-09 21:30:41+00:00,,"
<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

Fixes #50346 



### Detail

This PR updates the method [derive_fk_query_constraints](https://github.com/rails/rails/blob/main/activerecord/lib/active_record/reflection.rb#L785) to return correct value when association id is part of query constraints.

Context
- Model having Query constraints as `[:associated_model_id, :id]`
- Model having belong to association with `associated_model`

Current Behaviour
- Derived foreign key value is `[associated_model_id, associated_model_id]`

Updated Behaviour
- Derived foreign key value should be `associated_model_id`


### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

Please refer to #50346 

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",iamradioactive,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50346,13816206,50346,Incorrect derived foreign key for models with query constraints,open,1,2023-12-13 09:50:41+00:00,2023-12-23 17:01:33+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

When we initialise a model with an associated active record object, the foreign key for the associated record is not being derived correctly when the associated model is a part of query constraints.

This works correctly for without query constraints.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", ""7.1""
  gem ""sqlite3""
  gem 'pry'
end

require ""active_record""
require ""logger""
require ""minitest/autorun""
require 'pry'

ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')

ActiveRecord::Schema.define do
  create_table :tenants, force: true do |t|
    t.string :name
  end

  create_table :comments, force: true do |t|
    t.integer :tenant_id
    t.integer :post_id
    t.integer :author_id
    t.string :body
    t.integer :position
  end

  create_table :authors, force: true do |t|
    t.integer :tenant_id
  end
end

class Tenant < ActiveRecord::Base
end

class Author < ActiveRecord::Base
  query_constraints :tenant_id, :id

  belongs_to :tenant
end

class Comment < ActiveRecord::Base
  query_constraints :tenant_id, :id

  belongs_to :tenant
  belongs_to :author
end

class BugTest < Minitest::Test
  def test_assoc
    tenant = Tenant.create!
    comment = Comment.new(body: ""hello"", tenant: tenant, author: Author.new(tenant: tenant))

    assert_equal tenant, comment.tenant
    assert_equal tenant.id, comment.tenant_id
  end
end

# Your reproduction script goes here
```

### Expected behavior
<!-- Tell us what should happen -->

- `comment.tenent_id` should return the value for `tenant.id`

### Actual behavior
<!-- Tell us what happens instead -->
- `comment.tenant_id` returns `nil`

### System configuration
**Rails version**: 7.1

**Ruby version**: 2.7.8
",iamradioactive,User,0,activerecord,attached PR,With reproduction steps,,,,,,
https://api.github.com/repos/rails/rails/issues/50345,474554,50345,Regression in integration tests when providing as: :html,open,4,2023-12-13 08:01:05+00:00,2023-12-23 17:02:00+00:00,,"### Steps to reproduce

```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""action_controller/railtie""

class TestApp < Rails::Application
  config.hosts << ""www.example.com""
  routes.draw do
    resources :characters
  end

  config.root   = __dir__
  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger
end

class CharactersController < ActionController::Base
  def create
    render head: :no_content
  end
end

require ""minitest/autorun""
require ""rack/test""

class BugTest < ActionDispatch::IntegrationTest
  def test_params_without_content_type
    post ""/characters"", params: { name: ""Muad'Dib"" }
  end

  def test_params_with_htm_content_type
    post ""/users"", as: :html, params: { name: ""Muad'Dib"" }
  end

  private

  def app
    Rails.application
  end
end
```

### Expected behavior

In Rails 7.0, the second test works.

### Actual behavior

In Rails 7.1, the second test will raise an error :

```
BugTest#test_params_with_htm_content_type:
NoMethodError: undefined method `to_html' for {:name=>""Muad'Dib""}:Hash
    .../actionpack/lib/action_dispatch/testing/request_encoder.rb:39:in `encode_params'
    .../actionpack/lib/action_dispatch/testing/integration.rb:251:in `process'
    .../actionpack/lib/action_dispatch/testing/integration.rb:22:in `post'
    .../actionpack/lib/action_dispatch/testing/integration.rb:379:in `post'
    issue_bug.rb:39:in `test_params_with_htm_content_type'
```

### System configuration

**Rails version**:

Rails 7.1.2 & main

**Ruby version**:

Ruby 3.2.2",inkstak,User,0,attached PR,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50341,2575027,50341,Help Active Job comply with Strict Loading,open,4,2023-12-13 00:02:07+00:00,2023-12-13 15:49:45+00:00,,"### Motivation / Background

By the time an `ActiveJob::Base#perform` method is invoked, Active Record instances are already deserialized and reified through GlobalID integration.

Unfortunately, since end-users don't have a means of configuring that loading process, it's common for Active Job executions to raise be at conflict with the application's Active Record strict loading configuration. That can result in errors like:

```
ActiveRecord::StrictLoadingViolationError: `Article` is marked for strict_loading. The Tag association named `:tags` cannot be lazily loaded.
```

Fortunately, calls to `GlobalID::Locator.locate` support an optional `includes:` keyword argument that's incorporated into the Active Record query to fetch the record.


### Detail

This commit introduces a rudimentary interface to provide `ActiveJob::Base` descendants with a means of eager-loading associations to comply with strict loading.

While it certainly isn't the public interface to ship, this change supports something in the realm of the following example:

```ruby
class Article < ApplicationRecord
  self.strict_loading_by_default = true

  has_and_belongs_to_many :tags
end

class Tag < ApplicationRecord
  has_and_belongs_to_many :articles
end

class PublishJob < ApplicationJob
  def perform(article)
    article.tags.each { |tag| ... }
  end

  private
    def options_for_global_id(model_class)
      if model_class == Article
        { includes: [:tags] }
      else
        super
      end
    end
end
```

### Additional information

The interface proposed in the current diff is awkward and not particularly well-named. It aims to demonstrate the necessary layers of abstraction that need to be breached in order for a Job to specify how to load records of a given model class. I'm hoping to gather feedback and guidance to shape the developer-facing public interface to configure how `GlobalID::Locator.locate` is invoked. **All feedback is welcomed**.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,1,activejob,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50338,1905688,50338,ActiveRecord >=7.1: `destroy` does not work after RestartParentTransaction/SavepointTransaction rollback,open,2,2023-12-12 15:40:06+00:00,2023-12-18 00:11:16+00:00,,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""activerecord"", "" 7.1.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end
end

class Post < ActiveRecord::Base
  has_many :comments

  def self.test_restart_parent_transaction
    post = self.first
    ActiveRecord::Base.transaction do
      ActiveRecord::Base.transaction(requires_new: true) do
        post.destroy
        raise ""Rollback""
      end
    end
  rescue
    logger.info(""destroy #{post.inspect}"")
    post.destroy
  end

  def self.test_savepoint_transaction
    post = nil
    ActiveRecord::Base.transaction do
      post = self.first
      ActiveRecord::Base.transaction(requires_new: true) do
        post.destroy
        raise ""Rollback""
      end
    end
  rescue
    logger.info(""destroy #{post.inspect}"")
    post.destroy
  end
end

class BugTest < Minitest::Test
  def teardown
    Post.delete_all
  end

  def test_destroy_after_restart_parent_transaction_rollback
    Post.create!
    assert_equal 1, Post.count

    Post.test_restart_parent_transaction

    assert_equal 0, Post.count
  end

  def test_destroy_after_savepoint_transaction_rollback
    Post.create!
    assert_equal 1, Post.count

    Post.test_savepoint_transaction

    assert_equal 0, Post.count
  end
end
```

`>=7.1.0` Failed
![image](https://github.com/rails/rails/assets/1905688/ae70afb7-730c-4375-81df-f337d232cd5f)

`<7.1 (7.0.8)` Passed
![image](https://github.com/rails/rails/assets/1905688/e4f4f0be-56df-45d9-b617-b266e879e13c)


### Expected behavior

It seems to me that it should behave the same as before 7.0.8. ( `post.destroy` after rollback should be work.)

### Actual behavior

`post.destroy` after rollback won't work.

---

The following changes seem to be related.

- #46197
- #48303

https://github.com/rails/rails/blob/6b93fff8af32ef5e91f4ec3cfffb081d0553faf0/activerecord/lib/active_record/persistence.rb#L780-L787

Since `RestartParentTransaction`/`SavepointTransaction` leave `@_trigger_destroy_callback` **true** after rollback, `destroy_row` won't executed.

https://github.com/rails/rails/blob/v7.1.2/activerecord/lib/active_record/transactions.rb#L347
https://github.com/rails/rails/blob/v7.1.2/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb#L200
https://github.com/rails/rails/blob/v7.1.2/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb#L319

### System configuration

**Rails version**: >= 7.1.0
**Ruby version**: 3.2.1 (2023-02-08 revision 31819e82c8) [x86_64-linux]
",hoshi-sano,User,0,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50333,6014046,50333,Support validation for old Enum API,open,2,2023-12-12 04:24:57+00:00,2023-12-31 23:28:22+00:00,,"### Motivation / Background

The new, symbol, `#enum` API recently [gained][1] support for a new `validate` option which replaces `ArgumentErrors` with Active Model validation errors.

### Detail

This commit adds `_validate` to the old, keyword argument, `#enum` API to keep the two APIs in sync.

[1]: https://github.com/rails/rails/commit/7c65a4b83b583f4f27f3f20a9fb078b35823d2fe

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",skipkayhil,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50326,5642707,50326,Inconsistent results of params.deep_transform_keys,open,3,2023-12-11 15:30:54+00:00,2023-12-26 09:31:36+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""action_controller/railtie""
require ""active_support""
require ""active_support/core_ext/object/blank""
require ""minitest/autorun""

class BugTest < Minitest::Test
  def test_stuff
    raw_parameters = { item: { exampleOne: 1 } }
    params = ActionController::Parameters.new(raw_parameters)
    #<ActionController::Parameters {""item""=>{""exampleOne""=>1}} permitted: false>

    expected = { 'item' => { 'example_one' => 1 } }
    assert_equal(expected, params.deep_transform_keys(&:underscore).to_unsafe_h) # true

    params[:item] # just access the item
    params
    #<ActionController::Parameters {""item""=>#<ActionController::Parameters {""exampleOne""=>1} permitted: false>} permitted: false>

    assert_equal(expected, params.deep_transform_keys(&:underscore).to_unsafe_h) # false
  end
end
```

### Expected behavior
`params.deep_transform_keys` should transform the keys of the params, including nested hashes, arrays, and `ActionController::Parameters`.
`params[key]` should not change the params object

### Actual behavior
`params.deep_transform_keys` fails to transform the keys of `ActionController::Parameters` nested inside params.
`params[key]` changes the params object.

### System configuration
**Rails version**: Rails 5+

**Ruby version**: Ruby 2.3+
",iagopiimenta,User,0,actionpack,attached PR,With reproduction steps,,,,,,
https://api.github.com/repos/rails/rails/issues/50320,2575027,50320,Add `config.action_view.nest_html_attributes_within`,open,0,2023-12-10 17:17:03+00:00,2023-12-19 16:40:31+00:00,,"### Motivation / Background

While [Stimulus][] and [Turbo][] rely on values encoded into `data`-prefixed HTML attributes present in the document, other frameworks like [Alpine.js][] and [htmx][] rely on different prefixes (`x` and `hx`, respectively).

### Detail

To add support for those frameworks and others like them, this commit introduces the `config.action_view.nest_html_attributes_within` value to expose a value for consumer applications to add to.

[Stimulus]: https://stimulus.hotwired.dev
[Turbo]: https://turbo.hotwired.dev
[Alpine.js]: https://alpinejs.dev
[htmx]: https://htmx.org

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,1,railties,docs,actionview,,,,,,
https://api.github.com/repos/rails/rails/issues/50312,2575027,50312,Implement `button_to` in terms of `form_tag`,open,1,2023-12-09 15:47:44+00:00,2024-01-30 03:12:58+00:00,,"### Motivation / Background

While the ergonomics of calling `button_to` match those of `form_for`, `form_with`, or even `form_tag`, the implementation doesn't use much of those helper's existing infrastructure. There are chunks of logic repeated and re-implemented. For example:

* determining the `[action]` and `[method]` attributes for the `<form>`
* rendering an `<input type=""hidden"" name=""_method"">` for methods other than `POST` or `GET`
* generating and rendering an authenticity token input
* content exfiltration
* encoding `[data-remote]` for UJS integration


### Detail

This commit implements more of `button_to` in terms of the [form_tag][] helper method defined in `FormTagHelper`. That method handles responsibilities like determining `[method]`, rendering `<input type=""hidden"">`, etc.

The only outward-facing changes (reflected in test suite cases) involve the order of the `<form>` element's content, and the introduction of an `[accept-charset=""UTF-8""]` attribute.

The `<button>` element will be rendered **after** hidden fields instead of **before** (the previous behavior).

Similarly, the `[accept-charset]` attribute wasn't being rendered before, but is rendered by `form_tag`. The `form_tag` helper doesn't currently expose a mechanism to skip that attribute (in the same way that `:enforce_utf8` is being used here to skip the `<input type=""hidden"">`.


### Additional information

As part of these changes, this commit also excises the `method_tag` and `token_tag` private helpers out of the `UrlHelper` module and into the `FormTagHelper` module, since that's the only remaining call site. The previous implementation relied on the fact that both `UrlHelper` and `FormTagHelper` end up being mixed into an `ActionView::Base` instance, so the cross-module `private` boundary wasn't effective.

[form_tag]: https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-form_tag

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,2,docs,actionview,,,,,,,
https://api.github.com/repos/rails/rails/issues/50311,88649907,50311,Collection Association's empty? method is not working correctly due to counter_cache,open,1,2023-12-09 14:10:52+00:00,2024-01-04 17:36:45+00:00,,"### Steps to reproduce
I'm using ActiveRecord 7.1.0 and Ruby 3.2.2 and I'm facing a bug due to counter_cache being negative. If you have a parent-child association like this:

```ruby
class Post < ActiveRecord::Base
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post, counter_cache: true
end
```

Then say you have a Post with no comments
```ruby
first_post = Post.new(name: 'post 1')
```
Now if by any chance Post#comments_count becomes negative

```ruby
first_post.update!(comments_count: -1)
first_post.comments.empty? 
```
this `empty?` returns false due to negative counter_cache. It should return true as the DB query would return true.

Here is a standalone script that reproduces the issue:
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.integer :comments_count
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
  end
end

class Post < ActiveRecord::Base
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post, counter_cache: true
end

class BugTest < Minitest::Test
  def test_comments_association_is_empty 
    post = Post.create!
    post.update(comments_count: -1)
    assert_equal true, post.comments.empty?
  end
end
```
Same issue occurs on older versions of ActiveRecord as well.",ZainIftikhar7vals,User,0,activerecord,attached PR,With reproduction steps,,,,,,
https://api.github.com/repos/rails/rails/issues/50309,2575027,50309,`ActiveRecord::Store`: define predicate attribute method,open,0,2023-12-09 05:03:34+00:00,2023-12-09 15:34:21+00:00,,"### Motivation / Background

Storing attributes in database columns via the `.store` and `.store_accessor` class methods generates a collection of methods, including an attribute reader.

The methods are similar to the ones generated from `ActiveRecord::AttributeMethods` (and transitively `ActiveModel::AttributeMethods`), but do not include a presence predicate method (like
`ActiveModel::AttributeMethods#attribute_present?`).

### Detail

This commit generates an `#{attribute}?` method that reads from the store attribute, then chains a `#present?` predicate method on the return value.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50305,894561,50305,Log trace of causes for unhandled exceptions,open,2,2023-12-08 16:24:59+00:00,2023-12-14 16:42:40+00:00,,"https://github.com/rails/rails/pull/50145 recently added logging of an exception's causes' messages, which is great as I was going to add that. 

However, the backtraces of the causes are not included in that PR.

This PR adds the backtraces too, which can be helpful. Note that I also changed the ""header"" part from.

```
RuntimeError (Third error)

Causes:
RuntimeError (Second error)
RuntimeError (First error)
```

To:

```
RuntimeError (Third error)
Caused by: RuntimeError (Second error)
Caused by: RuntimeError (First error)
```

And I highlight that the first backtrace is from the ""main"" exception with this message: 

```
Infos for: RuntimeError (Third error):
```

Here is a truncated example:

```
RuntimeError (Third error)
Caused by: RuntimeError (Second error)
Caused by: RuntimeError (First error)

Infos for: RuntimeError (Third error):

/home/max/projects/rails/actionpack/test/dispatch/debug_exceptions_test.rb:53:in `rescue in rescue in raise_nested_exceptions'
/home/max/projects/rails/actionpack/test/dispatch/debug_exceptions_test.rb:50:in `rescue in raise_nested_exceptions'
/home/max/projects/rails/actionpack/test/dispatch/debug_exceptions_test.rb:47:in `raise_nested_exceptions'
/home/max/projects/rails/actionpack/test/dispatch/debug_exceptions_test.rb:113:in `call'
/home/max/.rvm/gems/ruby-3.2.2/gems/rack-3.0.8/lib/rack/lint.rb:63:in `response'
/home/max/.rvm/gems/ruby-3.2.2/gems/rack-3.0.8/lib/rack/lint.rb:35:in `call'
/and/way/more

Infos for cause: RuntimeError (Second error):

/home/max/projects/rails/actionpack/test/dispatch/debug_exceptions_test.rb:51:in `rescue in raise_nested_exceptions'
/home/max/projects/rails/actionpack/test/dispatch/debug_exceptions_test.rb:47:in `raise_nested_exceptions'
/home/max/projects/rails/actionpack/test/dispatch/debug_exceptions_test.rb:113:in `call'
/home/max/.rvm/gems/ruby-3.2.2/gems/rack-3.0.8/lib/rack/lint.rb:63:in `response'
/home/max/.rvm/gems/ruby-3.2.2/gems/rack-3.0.8/lib/rack/lint.rb:35:in `call'
/home/max/projects/rails/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb:29:in `call'
/home/max/.rvm/gems/ruby-3.2.2/gems/rack-3.0.8/lib/rack/lint.rb:63:in `response'
/and/way/more

Infos for cause: RuntimeError (First error):

/home/max/projects/rails/actionpack/test/dispatch/debug_exceptions_test.rb:48:in `raise_nested_exceptions'
/home/max/projects/rails/actionpack/test/dispatch/debug_exceptions_test.rb:113:in `call'
/home/max/.rvm/gems/ruby-3.2.2/gems/rack-3.0.8/lib/rack/lint.rb:63:in `response'
/home/max/.rvm/gems/ruby-3.2.2/gems/rack-3.0.8/lib/rack/lint.rb:35:in `call'
/home/max/projects/rails/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb:29:in `call'
/home/max/.rvm/gems/ruby-3.2.2/gems/rack-3.0.8/lib/rack/lint.rb:63:in `response'
/and/way/more
```
",MaxLap,User,0,actionpack,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50304,2575027,50304,Document how to transform keys with `ActiveRecord::Store`,open,0,2023-12-08 15:55:14+00:00,2024-02-02 19:44:59+00:00,,"### Detail

First, add test coverage to ensure that the behavior supported by the private `read_store_attribute` and `write_store_attribute` doesn't change over time.

Next, add method-level RubyDoc comments to describe how to override them correctly.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50303,6058435,50303,alias_attribute gives a deprecation warning for store attributes in Rails 7.1,open,2,2023-12-08 15:32:44+00:00,2023-12-12 14:11:40+00:00,,"When upgrading an app from Rails 7.0 to Rails 7.1 I'm getting these warnings:

    DEPRECATION WARNING: MyModel model aliases `t`, but `t` is not an attribute.
    Starting in Rails 7.2, alias_attribute with non-attribute targets will raise.

The attribute I want to alias is defined in an Active Record Store.
This behavior was introduced in this PR [48972](https://github.com/rails/rails/pull/48972).

### Steps to reproduce

``` ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.2""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :my_models, force: true do |t|
    t.string :properties
  end
end

class MyModel < ActiveRecord::Base
  store :properties, accessors: [:t], coder: JSON
  alias_attribute :title, :t
end

class BugTest < Minitest::Test
  def test_alias_attribute
    my_model = MyModel.create!(title: ""My title"")
    assert_equal my_model.title, ""My title""
    assert_equal my_model.t, ""My title""
  end
end
```

### Expected behavior
No warnings are given.

### Actual behavior

```
-- create_table(:my_models, {:force=>true})
Run options: --seed 9361
# Running:

DEPRECATION WARNING: MyModel model aliases `t`, but `t` is not an attribute. Starting in Rails 7.2, alias_attribute with non-attribute targets will raise. Use `alias_method :title, :t` or define the method manually.

Finished in 0.004296s, 232.7610 runs/s, 465.5219 assertions/s.
1 runs, 2 assertions, 0 failures, 0 errors, 0 skips
```

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.2.2

### Possible solutions

1. Change the test in [ActiveRecord::AttributeMethods::ClassMethods](https://github.com/ipc103/rails/blob/eae26caec3e38c21835f4afd8622aad20c16c713/activerecord/lib/active_record/attribute_methods.rb#L83) to include attributes defined in stores (preferred)
2. Add a method like `alias_store_attribute` which adds getter and setter methods for the aliased name",easydatawarehousing,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/50297,13816206,50297,[Fix #50256] stale state for composite foreign keys in belongs_to ass…,open,6,2023-12-07 18:36:17+00:00,2023-12-13 10:11:04+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

Fixes #50256 

**Context :** 
- A Model having query constraints and a belongs_to association.
- Associated record is loaded once.

**Action :** 
- Update Foreign key for the belongs_to association.
- Call `model.association` to refer to the associated object.

**Current Behaviour:**
- State is not changed and no reload is triggered.
- Association still points to the old record.

**Updated Behaviour:**
- State is updated and reload is triggered.
- Association points to the updated record.

### Detail

This Pull Request updates `stale_state` method in `belongs_to association` to handle composite foreign keys

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

For Additional context Please refer to #50256 

### Dependency

- This PR has a dependency on #50347 and is to be merged after those changes are approved and merged.
- It is an independent bug, however when the stale state is updated correctly it results in loss of information because of the bug to be fixed in the mentioned PR.
- Please refer to this [comment](https://github.com/rails/rails/pull/50297#issuecomment-1852817664) for additional description.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",iamradioactive,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50293,27299,50293,calling `ActiveSupport::Cache.lookup_store` in application.rb (or environments/*.rb) causes deprecation warning,open,8,2023-12-07 07:01:09+00:00,2023-12-24 00:45:18+00:00,,"### Steps to reproduce

call `ActiveSupport::Cache.lookup_store` w/ default `config.active_support.cache_format_version` under `config.load_defaults 7.0`

at that timing, `ActiveSupport::Cache.format_version` is still [the default `6.1`](https://github.com/rails/rails/blob/c1489a8ca4a9b91e21725f6a139e82e803c9eaa6/activesupport/lib/active_support/cache.rb#L55), thus causes [this warning](https://github.com/rails/rails/blob/c1489a8ca4a9b91e21725f6a139e82e803c9eaa6/activesupport/lib/active_support/cache.rb#L773-L778)

sample app is here. you can see the warning just by running it.
https://github.com/nov/rails7_1_sample

### Expected behavior

no warning.
<!-- Tell us what should happen -->

### Actual behavior

```
% rails server
DEPRECATION WARNING: Support for `config.active_support.cache_format_version = 6.1` has been deprecated and will be removed in Rails 7.2.

Check the Rails upgrade guide at https://guides.rubyonrails.org/upgrading_ruby_on_rails.html#new-activesupport-cache-serialization-format
for more information on how to upgrade.
```
<!-- Tell us what happens instead -->

### System configuration
**Rails version**:

**Ruby version**:
",nov,User,0,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50292,800362,50292,Fix `Time.now`/`DateTime.now`/`Date.today` to return results in a system timezone after `#travel_to` in 7-0-stable,open,1,2023-12-07 06:33:03+00:00,2023-12-07 06:35:22+00:00,,"This is a backport of #50236 for 7-0-stable.

### Motivation / Background

Fix incorrect `Date.today` result value that caused [a bug with the `Faker::Time.backward` method](https://github.com/faker-ruby/faker/issues/2861) in the Faker gem.

### Detail

There is a bug in the current implementation of `#travel_to`: it remembers a timezone of its argument, and all stubbed methods (`Time.now`, `DateTime.now`, `Date.today`) start returning results in that remembered timezone. However, the expected behaviour is to return results in a system timezone.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",907th,User,0,activesupport,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50291,54629302,50291,Redefine autosave callbacks if associations are overriden,open,3,2023-12-07 03:22:45+00:00,2024-01-12 12:38:22+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

Context for this change is in #50040, specifically [this comment](https://github.com/rails/rails/issues/50040#issuecomment-1826306098).
This isn't necessarilly to fix that issue, since it was mostly a bad setup, but it does ensure that users don't get unexpected behaviour just because an association was duplicated / overridden.

### Detail

This Pull Request changes `ActiveRecord::AutosaveAssociation::ClassMethods#define_non_cyclic_method` to return only if the method has been defined for the given reflection, as opposed to whether it's ever been defined on the class, to ensure that the autosave methods are redefined for associations that are overridden.

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",joshuay03,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50289,2575027,50289,Elaborate on support for hash helpers in Integration Tests [ci skip],open,1,2023-12-06 22:53:46+00:00,2024-01-30 03:16:22+00:00,,"Change the Testing Guide to emphasize that `session`, `flash`, and `cookies` helpers are only available to be read from **after** a request has been made.

This is a break from `ActionController::TestCase` support for writing to these Hash helpers **before** a request has been made, so it's worth emphasizing to avoid confusing the two practices.",seanpdoyle,User,1,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50285,22835,50285,[ci skip] Clarify ConnectionPool timeout options,open,0,2023-12-06 16:34:31+00:00,2023-12-11 17:19:22+00:00,,"### Motivation / Background

Long story short: while trying to configure the timeout(s) for connections in a Zammad installation the current docs lead me to believe the `timeout` option would apply to database connections. This is compounded by the `timeout` and `checkout_timeout` options both default to 5 seconds. See also this Zammad Docs issue https://github.com/zammad/zammad/pull/4883#issuecomment-1815291895.

This Pull Request tries to clarify this in the docs by removing the `timeout` option from the Connection Pooling paragraph and explicitly explaining the Pool timeout options. The changes are broken into different Commits to keep formatting and content changes separate to make understanding what is changed easier. They might be squashed before merging.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",thegcat,User,0,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50280,2575027,50280,Infer default `:inverse_of` option for `delegated_type`,open,1,2023-12-06 03:48:22+00:00,2024-01-30 03:12:20+00:00,,"### Motivation / Background

Prior to this commit, delegated types were unable to infer their inverse associations, so saving records built with the generated `#build_ASSOCIATION` methods weren't writing to all the necessary places. For example:

```ruby
entry = Entry.create! entryable: Message.new(subject: ""Hello world!"")
entry.message.subject # => ""Hello world!""

entry.build_entryable(subject: ""Goodbye world!"").save!
entry.reload.message.subject # => ""Hello world!""
```

### Additional information

The fact that the `Entry` test model declared a `delegated_type :entryable` definition with `types: %w[ Message Comment ]` was never reciprocated in the appropriate models.

In order to pass the tests, this commit needed to define the corresponding `has_one :entry` associations. To do so, introduce the `Entryable` concern in the same style as the one mentioned in the documentation. The same extraction is made for a `UuidEntryable` concern mixed into `UuidMessage` and `UuidComment`.

Unfortunately, defining `delegated_type :thing, types: %w[ Post ]` was more tricky to fix. The `Post` test model is widely used, so defining a `has_one` had farther-reaching effects than intended. To resolve that issue, this commit redefines `:thing` to use `types: %w[ Essay ]`, which has much fewer unintended side effects.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50273,2575027,50273,Add `request.variant` API and guides documentation,open,0,2023-12-05 19:04:03+00:00,2024-02-02 19:45:24+00:00,,"### Detail

Add prose and code samples for:

* `request.variant=`
* `request.variant`

Add sections to the Action View and Action Controller guides, along with some code samples.

The majority of these changes were excised from past pull requests, such as [#12977][] and [#18939][].

[#12977]: https://github.com/rails/rails/pull/12977
[#18939]: https://github.com/rails/rails/pull/18939

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,0,actionpack,docs,,,,,,,
https://api.github.com/repos/rails/rails/issues/50264,5122678,50264,Introduce `package_json` Generator Action,open,6,2023-12-04 20:56:28+00:00,2023-12-18 15:17:05+00:00,,"### Motivation / Background

It's common to modify `package.json` with custom [scripts](https://docs.npmjs.com/cli/v6/using-npm/scripts).

We already support the ability to create [rake tasks](https://edgeapi.rubyonrails.org/classes/Rails/Generators/Actions.html#method-i-rakefile), so this change is in alignment with that. 

### Detail

Extends existing [Generator Actions][] by allowing the consumer to modify `package.json`.

```ruby
package_json scripts: { stylelint: ""npx stylelint 'app/assets/stylesheets/**/*.css'"" }
```

This is especially useful when used with an [Application Template][] when creating or modifying a Rails application.

```ruby
gem ""cssbundling-rails""

after_bundle do
  rails_command ""css:install:postcss""
  run ""yarn add stylelint stylelint-config-standard""
  run ""touch .stylelintrc.json""
  insert_into_file "".stylelintrc.json"", <<~JSON
    {
      ""extends"": [""stylelint-config-standard""]
    }
  JSON

  package_json scripts: { stylelint: ""npx stylelint 'app/assets/stylesheets/**/*.css'"" }
end
```

[Generator Actions]: https://edgeapi.rubyonrails.org/classes/Rails/Generators/Actions.html
[Application Template]: https://edgeguides.rubyonrails.org/rails_application_templates.html

### Additional information

I opted to not create a `package.json` file if one does not exist. Instead, the command will raise an error. This is consistent with how the `gem` command works in that it assumes the file already exists. 

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",stevepolitodesign,User,1,railties,docs,,,,,,,
https://api.github.com/repos/rails/rails/issues/50263,331876,50263,"Broken `order(""included.column"").includes(:included).ids` in PostgreSQL",open,3,2023-12-04 14:16:32+00:00,2023-12-08 10:52:23+00:00,,"### Steps to reproduce

This bug was introduced by using `group` over `distinct` in #48101. The original problem was when having a `order` on the object that is being queried and having a `includes` it would fail. After the change, this works, but results in an issue when the order is added for the object which is in the `includes`.

```ruby
  def test_includes_with_order_on_includes_object
    Post.includes(:comments)
        .order(""comments.created_at DESC"")
        .ids
  end
```

I would like to create a fix, but think we first need to make sure what the best path for the solution should be.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""pg""
end

require 'active_record'
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
begin
  config = { adapter: ""postgresql"", encoding: 'unicode', url: ""postgresql://postgres@localhost:5432"", password: 'postgres', database: 'rails-test' }
  ActiveRecord::Base.establish_connection(config.except(:database))
  ActiveRecord::Base.connection.drop_database(config[:database]) rescue nil
  ActiveRecord::Base.connection.create_database(config[:database])
end

ActiveRecord::Base.establish_connection(config)

ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.timestamps
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
    t.timestamps
  end
end

class Post < ActiveRecord::Base
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post
end

class BugTest < Minitest::Test
  def test_includes_ids
    Post.includes(:comments)
        .order(""comments.created_at DESC"") # or .merge(Comment.order(created_at: :desc))
        .ids
  end
end
```

### Expected behavior
no exception

### Actual behavior
```
ActiveRecord::StatementInvalid: PG::GroupingError: ERROR:  column ~ must appear in the GROUP BY clause or be used in an aggregate function
```

I've created this issue for Postgres, but MySQL would also give an error with default configurations. Changing `sql_mode` would resolve the error
```
ORDER BY clause is not in GROUP BY clause and contains nonaggregated column 'sqltest_tmp_db.comments.description' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by
```

### System configuration
**Rails version**: main

**Ruby version**: 3.2.2
",manuelvanrijn,User,0,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50258,726,50258,Eager loading bug with inverse_of and the same model in the query twice,open,1,2023-12-03 19:33:46+00:00,2023-12-19 22:40:26+00:00,,"I'm using Rails 7.1.2 and Ruby 3.2.2 and I'm seeing a bug with how associated records are loaded when `has_many_inversing` is enabled and `inverse_of` is used in the association and the association is used in the query twice. If you have a parent-child association like this:

```ruby
class User < ActiveRecord::Base
  belongs_to :group, inverse_of: :users
end

class Group < ActiveRecord::Base
  has_many :users, inverse_of: :group
end
```

Then say you have a group with 2 users:

```ruby
group = Group.create!(name: ""Test"")

User.create!(group: group, name: ""John"")
User.create!(group: group, name: ""Jane"")
```

Now let's say you load one of the users and eagerly load the group and the users in the group, like this:

```ruby
User.eager_load(:group => :users).where(""users.id = ?"", 1).first.group.users.map(&:name)
```

I would expect this to return the 2 users, like this:

```ruby
[""John"", ""Jane""]
```

But instead the group is repeated, like this:

```ruby
[""John"", ""John"", ""Jane""]
```

This bug only happens when `has_many_inversing` is set to `true`.

Here is a standalone script that reproduces the issue:

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Base.has_many_inversing = true

ActiveRecord::Schema.define do
  create_table ""groups"", force: :cascade do |t|
    t.string ""name""
    t.datetime ""created_at"", null: false
    t.datetime ""updated_at"", null: false
  end

  create_table ""users"", force: :cascade do |t|
    t.integer ""group_id"", null: false
    t.string ""name""
    t.datetime ""created_at"", null: false
    t.datetime ""updated_at"", null: false
    t.index [""group_id""], name: ""index_users_on_group_id""
  end

  add_foreign_key ""users"", ""groups""
end

class User < ActiveRecord::Base
  belongs_to :group, inverse_of: :users
end

class Group < ActiveRecord::Base
  has_many :users, inverse_of: :group
end

class BugTest < Minitest::Test
  def test_association_loads_correct_number_of_records
    # Create a group
    group = Group.create!(name: ""Test"")

    # Create two users in the group
    john = User.create!(group: group, name: ""John"")
    jane = User.create!(group: group, name: ""Jane"")

    group = Group.find(group.id)
    john = User.find(john.id)
    jane = User.find(jane.id)

    # When you load the use then get the size of the users in the group, you correctly get 2
    assert_equal 2, john.group.users.map(&:name).size

    # But when you eager_load the first user, there are 3 users in the group
    assert_equal 2, User.eager_load(:group => :users).where(""users.id = ?"", 1).first.group.users.map(&:name).size,
      ""expected the first group to have 2 users""
  end
end
```
",pjb3,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50256,306253,50256,Rails 7.1: query_constraints: causes relation to not be loaded.,open,8,2023-12-03 18:16:43+00:00,2023-12-16 17:02:52+00:00,,"While trying to use `query_constraints` (awesome feature 🙏 ) I have seen a case where a relation is `nil` on `after_add` callback.

I reduced my application to this reproduction script and to cause `comment.author` to be nil with `query_constraints` we need to have: Default order in `comments` & `after_initialize` that touches the model.

See the script below to better understand my reproduction.

### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.0""
  gem ""pg""
end

require ""active_record""
require ""logger""

ActiveRecord::Base.establish_connection(
  adapter: ""postgresql"",
  database: ""test"",
  encoding: ""unicode"",
  host: ""localhost"",
  port: ""5432"",
  password: ""12345"",
  username: ""test"")

ActiveRecord::Schema.define do
  create_table :comments, force: true do |t|
    t.integer :tenant_id
    t.integer :author_id
    t.string :body
    t.integer :position
  end

  create_table :authors, force: true do |t|
    t.integer :tenant_id
  end
end

class Author < ActiveRecord::Base
  query_constraints :tenant_id, :id

  has_many :comments, -> { order(position: :asc) }, after_add: :on_comment_added

  def on_comment_added(comment)
    puts ""added comment: #{comment.author}""
  end
end

class Comment < ActiveRecord::Base
  query_constraints :tenant_id, :id

  belongs_to :author

  after_initialize :calculate_rating, if: :new_record?

  def calculate_rating
    # In our-case since we access `self.author` in `after_initialize` (which always be empty in this case - valid)
    # this will make `comment.author` to be later (in `on_comment_added`) to be blank.
    #
    # In real-world we call this in `after_initialize` and in other callbacks.
    puts ""author_id: #{self.author}""
  end
end

author = Author.create!(tenant_id: 1)
author.comments << Comment.create(body: ""hello"", tenant_id: 1)
```


### Expected behavior

`comment.author` to be accesible in `on_comment_added`, so if we run the reproduce script without `query_constraints`,
we should get this output:
```
author_id: 
added comment: #<Author:0x00000001312f6a48>
```

<!-- Tell us what should happen -->

### Actual behavior

`comment.author` is nil in `on_comment_added`, so we get this output:
```
author_id: 
added comment: 
```

### System configuration
**Rails version**: 7.1
**Ruby version**: `ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin22]`
",yosiat,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50234,6136469,50234,"Rails 7.1 attached image raises error because ""Cannot get a signed_id for a new record"" in image_tag",open,3,2023-12-01 17:59:47+00:00,2024-02-02 06:17:53+00:00,,"### Steps to reproduce
Say I have a model with an attached image, like such:

```ruby
class Company < ApplicationRecord
  has_one_attached :logo
  
  validates :name, presence: true
end
```

...and there is also a controller to update it using the route defined by `resources :companies` like such:

```ruby
def update
  @company = Company.find(params[:id])
  company_params = params.require(:company).permit(:name, :logo)

  if @company.update(company_params)
    flash[:success] = ""Successfully updated Company!""
    redirect_to edit_company_path(@company)
  else
    render :edit
  end
end
```

The `edit` form is an HTML form that looks as follows:

```ruby
<%= simple_form_for @company, url: edit_company_path(@company) do |f| %>
  <%= f.input :name %>
  <%= f.input :logo %>
  <% if @company.logo.attached? %>
    <%= image_tag @company.logo.variant(resize: ""200x200"") %>
  <% end %>
<% end %>
```

Now when I pass in an update payload that generates an invalid state (as per my `Company` model's validations) but has a **valid, existing, readable** logo file, the following error occurs:

```
ActionView::Template::Error: Cannot get a signed_id for a new record

Failure/Error: <%= image_tag @company.logo.variant(resize: ""200x200"") %>

     ActionView::Template::Error:
       Cannot get a signed_id for a new record
```

This is because the `@company.update(...)` statement in the controller writes the attributes, but the actual raw _saving_ to the database fails because of validations.

The edit form then tries to display the new, updated **but not persisted** logo in the frontend, which raises the error about `signed_id`.

### Expected behavior
The `edit` form should render, with the form showing errors on the `name` field according to the validators of the `company` model. Uploading a correct, readable logo should not cause the form to throw an error when rendering.

### Actual behavior
The error above is being thrown.

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.2.2
",gregorbg,User,2,third party issue,activestorage,,,,,,,
https://api.github.com/repos/rails/rails/issues/50228,2384094,50228,Adjusted an example to align with the documentation section on reversing a previous migration.,open,2,2023-12-01 10:37:48+00:00,2024-01-25 10:43:10+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

Fixes #50189. 
There is an error in the following section [this documentation section](https://guides.rubyonrails.org/active_record_migrations.html#reverting-previous-migrations).

There is confusion between the steps 

```
1. Reverse the order of create_table and reversible.
2. Replace create_table with drop_table.
3. Finally, replace up with down and vice-versa.
```

and the example below

I suggest modifying the example.


### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",cedriccarrard,User,0,activesupport,docs,,,,,,,
https://api.github.com/repos/rails/rails/issues/50226,379823,50226,Encrypted columns in DB are not backwards compatible between 7.0 and 7.1,open,8,2023-12-01 10:07:36+00:00,2024-01-24 20:35:02+00:00,,"I'm not sure if this is expected or a bug, but I can't find it in the changelogs. There were changes related to encryption though so maybe it's not a bug.

The issue is that we upgrade from Rails 7.0.8 to 7.1.1 and had to roll back due to some unrelated issues. Now, after the roll back we couldn't decrypt fields that were encrypted while on 7.1.1 anymore (using AR `encrypts(:foo)`). I tested with 7.1.2 and had the same issue.

### Steps to reproduce

1. Generate a new rails app on 7.0.8
2. Add a model with an encrypted field
3. On 7.0.8, create a record in the DB
4. Change gemfile to have rails 7.1.2 and bundle
5. Create another record in the DB. At this point it's possible to decrypt the old record
6. Add the setting `config.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA256` to application.rb
7. Create a third record in the DB
8. Go back to Rails 7.0.8
9. Read the records in the DB. First and second records are fine, but the third will fail with
```
/Users/.../.asdf/installs/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/activerecord-7.0.8/lib/active_record/encryption/encryptor.rb:58:in `rescue in decrypt': ActiveRecord::Encryption::Errors::Decryption (ActiveRecord::Encryption::Errors::Decryption)
/Users/.../.asdf/installs/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/activerecord-7.0.8/lib/active_record/encryption/cipher/aes256_gcm.rb:80:in `rescue in decrypt': ActiveRecord::Encryption::Errors::Decryption (ActiveRecord::Encryption::Errors::Decryption)
/Users/.../.asdf/installs/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/activerecord-7.0.8/lib/active_record/encryption/cipher/aes256_gcm.rb:76:in `final': OpenSSL::Cipher::CipherError
```

I created a repository to easier reproduce this: https://github.com/Linuus/rails-encryption/

1. Clone the repo
2. `git checkout 8a4a807faed975545b13fb710f7e119501daa261`
3. `bundle`
4. `rails c`
5. `Bar.create!(secret: ""rails708"")`
6. `git checkout e213132e7c85747560b395f0f34f6628b3b202cc` (switch to 7.1.2)
7. `bundle`
8. `rails c`
9. `Bar.create!(secret: ""rails712"")`
10. `git checkout 05f77873a0fb71de34e1fc15c8c786b543ead2b6` (sets `config.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA256`)
11. `rails c`
12. `Bar.create!(secret: ""rails712-2"")`
13. `git checkout 8a4a807faed975545b13fb710f7e119501daa261` (Roll back to 7.0.8)
14. `rails c`
15. `Bar.first.secret #=> rails708`
16. `Bar.second.secret #=> rails712`
17. `Bar.third.secret` crashes with the above decryption error

In 7.0.8 we have this:

```
Loading development environment (Rails 7.0.8)
irb(main):001> Rails.configuration.active_support.key_generator_hash_digest_class
=> OpenSSL::Digest::SHA256
```

In 7.1.2 we haven't set the SHA1 setting (makes no difference as far as I can see. 7.1.2 can still decrypt data from 7.0.8)

```
Loading development environment (Rails 7.1.2)
irb(main):001> Rails.configuration.active_record.encryption.support_sha1_for_non_deterministic_encryption
=> nil
```

So as far as I understand the docs, the encryption shouldn't change?

### Expected behavior

The records should all be decryptable

### Actual behavior

The record created in Rails 7.1.2 and with `config.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA256` fail to decrypt.

### System configuration
**Rails version**: 7.0.8 -> 7.1.2 (or 7.1.1.)

**Ruby version**:  ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [arm64-darwin21]",Linuus,User,1,activerecord,encryption,,,,,,,
https://api.github.com/repos/rails/rails/issues/50222,33667846,50222,(feat) Give `numericality` validation `Clusivity` considerations,open,0,2023-11-30 18:10:29+00:00,2023-12-06 22:34:27+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

In short, the `numericality` validator doesn't support method names, and we would like it to within our codebase.

This PR gives the `numericality` validator, in order of importance,

1) the ability to accept a range returned from a method call
2) more versatility, it can now accept an array or an array returned from a method call

### Detail

- `includes Clusivity` in `numericality.rb`
- broadens initial type check within `check_validity!`
- in `validate_each`, deals with cases of symbols
- in `validate_each`, uses `includes?` to deal with ranges, arrays, and ranges/arrays returned from method calls

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] This is my first Rails PR and I'm scared / please be nice 
",spimonid,User,0,activemodel,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50220,33804,50220,Cannot define rails tasks that take command line arguments since Rails 7.1 Rails::Command::UnrecognizedCommandError,open,9,2023-11-30 15:27:15+00:00,2023-12-03 17:29:37+00:00,,"https://github.com/rails/rails/blob/6b93fff8af32ef5e91f4ec3cfffb081d0553faf0/railties/lib/rails/commands/rake/rake_command.rb#L21-L24

In rails 7.0 it was possible to define a rake task invoked using rails that would take command-line arguments. You just had to read the arguments in `ARGV` and to call `exit` in order to prevent rails from looking up the arguments as if they were rake tasks.

In rails 7.1, before even starting the tasks, rails is looking up all command-line arguments to ensure they are valid rake tasks, and arguments are not, and it produces a Rails::Command::UnrecognizedCommandError

Example task that worked in rails 7.0 and no longer works:

```rb
namespace :import do
  task from_v5: :environment do
    if ARGV.length < 1
      warn 'Usage: rails import:from_v5 FILENAME'
      exit 1
    end
    puts ""importing #{ARGV[0]}...""
    exit 0
  end
end
```",mildred,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50218,47554,50218,[Fix #50193] Allow custom Thor commands to load from `lib/commands` by ensuring `lib` is added to the $LOAD_PATH before looking up commands,open,0,2023-11-30 00:33:58+00:00,2023-11-30 00:38:07+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

Fixes #50193

This Pull Request makes Thor commands included in `lib/commands/*_command.rb` work. They previously did not work because the commands were loaded before the Application was required, which meant that `lib` had not yet been added to the $LOAD_PATH (requiring the Application adds `lib` to the $LOAD_PATH, explained in #48596).

Because requiring the application could slightly slow down invoking commands, this change will first try to find the command _without_ requiring the Application, and if not found, will then require the Application and try the lookup again

cc @matthewd 

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

I think Thor commands, especially the options syntax, is a big improvement over Rake, which is why I would like this to work, and it largely seems like it _should_ work with this very small tweak.

Things to possible defer:

Documentation: Guides can be updated to explain Thor commands alongside Rake tasks. Maybe a default `lib/commands/.keep` too?

Also...

While working on this, I did notice that it is _very easy_ for command files to collide and are thus load-order dependent. This is because the files are required with simply `lib/commands/*_command.rb`:

https://github.com/rails/rails/blob/736353dda303a96a1e8972cf7dc2de0b2b493e58/railties/lib/rails/command/behavior.rb#L40-L44

https://github.com/rails/rails/blob/736353dda303a96a1e8972cf7dc2de0b2b493e58/railties/lib/rails/command/behavior.rb#L56-L60

So if 2 gems, or the application and another gem each have matching filenames, only one of them will be loaded.  I want to call this out because `lib` is added at the front of $LOAD_PATH, which means it will always have the opportunity to clobber someone else.

These changes were introduced here: https://github.com/rails/rails/commit/115abd52b6bf6801dce7c3fbcb0e29d4213a5bb2

So maybe that `require` should be changed to a `load`, or the required paths should be changed to absolute file paths. 



### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",bensheldon,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50216,1533384,50216,Changing a record's STI type using nested attributes breaks when classes have different validations,open,1,2023-11-29 23:28:55+00:00,2024-01-17 13:39:37+00:00,,"When updating STI record's types using nested attributes the instance of the record doesn't become the new class automatically and therefore validations are run against the old class.

### Steps to reproduce

```ruby
require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  gem 'rails', '7'
  gem 'sqlite3'
end

require 'active_record'
require 'minitest/autorun'
require 'logger'

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :people, force: true

  create_table :animals, force: true do |t|
    t.text :type
    t.text :fav_toy
    t.integer :person_id
  end
end

class Animal < ActiveRecord::Base
  belongs_to :person
end

class Cat < Animal
  validates :fav_toy, inclusion: { in: %w[catnip mouse] }
end

class Dog < Animal
  validates :fav_toy, inclusion: { in: %w[lamb duck] }
end

class Person < ActiveRecord::Base
  has_many :animals
  accepts_nested_attributes_for :animals
end

class BugTest < Minitest::Test
  def test_updating_type
    # Create a `Person` with a `Cat`.
    person = Person.create!(
      animals_attributes: [{ type: 'Cat', fav_toy: 'catnip' }]
    )

    persons_cat = person.animals.first

    # Now try to change the `Cat` to be a `Dog`. This fails
    # because `Cat` validations are still being run.
    person.update!(
      animals_attributes: [{ id: persons_cat.id, type: 'Dog', fav_toy: 'duck' }]
    )

    assert Animal.find(persons_cat.id).is_a?(Dog)
  end

  # What works is to use `assign_attributes`, go through the
  # association records and replace them with the correct
  # instances and then save the parent.
  def test_updating_type_and_changing_instances
    person = Person.create!(
      animals_attributes: [{ type: 'Cat', fav_toy: 'catnip' }]
    )

    persons_cat = person.animals.first

    person.assign_attributes(
      animals_attributes: [{ id: persons_cat.id, type: 'Dog', fav_toy: 'duck' }]
    )

    association = person.association(:animals)

    association.target.each.with_index do |animal, i|
      association.target[i] = animal.becomes!(animal.type.constantize) if animal.type_changed?
    end

    person.save!

    assert Animal.find(persons_cat.id).is_a?(Dog)
  end
end
```

### Expected behavior

The `Cat` becomes a `Dog` and the update succeeds.

### Actual behavior

The update fails with a validation error: `ActiveRecord::RecordInvalid: Validation failed: Animals fav toy is not included in the list`

### System configuration
**Rails version**: 7.0.0

**Ruby version**: 2.7.5
",hoffmanilya,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50215,49968061,50215,Automatically disable joins for through associations across different connection pools ,open,1,2023-11-29 22:07:20+00:00,2023-12-01 19:38:34+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request changes the default behavior for through associations to disable joins when the connection pools differ, in which case the association would be broken if the user didn't specify `disable_joins: true`. 

This is not a breaking change, as the only effect it could have would be to fix broken associations.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",octokatherine,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50213,1216046,50213,Support for non-polymorphic joins on polymorphic belongs_to,open,5,2023-11-29 18:07:50+00:00,2023-12-02 09:47:16+00:00,,"### Steps to reproduce
I have something like this in my code:
```rb
class Comment < ApplicationRecord
  belongs_to :commentable, polymorphic: true
  validates :commentable_type, inclusion: { in: %w(Post Page) }
end

class Post < ApplicationRecord
  has_many :comments, as: :commentable
end

class Page < ApplicationRecord
  has_many :comments, as: :commentable 
end
```

To count the number of comments on a Page, understand that I can use:
```rb
Page
  .joins(:comments)
  .group(""pages.id"")
  .count
```
But this is a simple example. In my code base, I have a longer chain of relationship and inverting the direction doesn't seem to be possible.


In cases where I start from from the opposite direction and I know that a target is a page, I'd like to do something like this:

```rb
Comment
  .joins(:page)
  .group(""pages.id"")
  .count
```

This _appears_ to be working:
```rb
class Comment < ApplicationRecord
  belongs_to :commentable, polymorphic: true
  validates :commentable_type, inclusion: { in: %w(Post Page) }
  belongs_to :page, class_name: ""Page"", foreign_key: :commentable_id
  belongs_to :post, class_name: ""Post"", foreign_key: :commentable_id
end
```
But it wouldn't check the commentable_type, it would join on any id.

---

I came up with this idea:
```rb
module ActiveRecord
  module Associations
    module ClassMethods
      def belongs_to_polymorphic(name, target:, class_name:, **options)
        reflection = reflections[target.to_s]
        raise ""Association #{target} does not exist"" unless reflection
        raise ""Association #{target} is not polymorphic"" unless reflection.polymorphic?
        raise ""Association #{target} is not a belongs_to"" unless reflection.belongs_to?

        foreign_key = reflection.foreign_key
        foreign_type = reflection.foreign_type
        table_name = self.table_name

        scope = ->() { where({ table_name => { foreign_type => class_name } }) }
        belongs_to(name, scope, class_name: class_name.to_s, foreign_key: foreign_key, **options)

        # Override this method because the default implementation won't check the foreign_type
        # and the `where` condition on the `belongs_to` would not have the table_name available.
        define_method(name) do
          return unless class_name == read_attribute(foreign_type)

          send(target)
        end
      end
    end
  end
end
```

It can be used like:
```rb
class Comment < ApplicationRecord
  belongs_to :commentable, polymorphic: true
  validates :commentable_type, inclusion: { in: %w(Post Page) }
  belongs_to_polymorphic :post, target: :commentable, class_name: ""Post""
  belongs_to_polymorphic :page, target: :commentable, class_name: ""Page""
end

Comment.joins(:page) # Works
Comment.first.page # Fallback on the overridden method.
```

Of course, this is quite hacky, but I wanted to illustrate the point

---

Alternatively, it could be nice to allow polymorphic joins if a `where` clause explicitely specifies the type:

```rb
Comment.joins(:commentable).where(commentable_type: ""Page"")
=> ActiveRecord::EagerLoadPolymorphicError: Cannot eagerly load the polymorphic association :commentable
```


---

https://github.com/rails/rails/issues/45429 seems a bit related, but not exactly the same.


### System configuration
**Rails version**:
6.1.7.6
",lavoiesl,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50204,220358,50204,Add support for index storage parameters for PostgreSQL,open,2,2023-11-28 20:33:55+00:00,2024-01-04 17:49:28+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request adds support for [index storage parameters](https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-STORAGE-PARAMETERS) for PostgreSQL.

### Detail

This Pull Request adds a `:with` option to `add_index`:

```ruby
add_index :users, :email, with: { fillfactor: 50 }
```

which generates:

```sql
CREATE INDEX ""index_users_on_email"" ON ""users"" (""email"") WITH (fillfactor=50);
```

### Additional information

- This feature was added in [PostgreSQL 8.2](https://www.postgresql.org/docs/8.2/sql-createindex.html).
- [SQL Server](https://learn.microsoft.com/en-us/sql/t-sql/statements/create-index-transact-sql?view=sql-server-ver16) also supports the `WITH` syntax.

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",ankane,User,2,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50201,14243155,50201,Transaction commits before query execution within transaction block.,open,5,2023-11-28 17:00:24+00:00,2023-12-03 00:12:14+00:00,,"### Steps to reproduce

Maybe this is totally expected, but this behavior was found to be surprising.

#### Senario 1
The transaction defined with the following code will commit after the `SET` statement, and before the `Message.all` query.
```ruby
ActiveRecord::Base.transaction do
  ActiveRecord::Base.connection.execute('SET LOCAL statement_timeout = \'5s\';')
  Message.all
end
```

```
TRANSACTION (0.7ms)  BEGIN
(3.4ms)  SET LOCAL statement_timeout = '5s';
TRANSACTION (0.5ms)  COMMIT
Message Load (0.4ms)  SELECT ""messages"".* FROM ""messages"" /* loading for pp */ LIMIT $1  [[""LIMIT"", 11]]
```

#### Senario 2
However, everything appears to run within the transaction when using `execute` for both queries.
```ruby
ActiveRecord::Base.transaction do
  ActiveRecord::Base.connection.execute('SET LOCAL statement_timeout = \'5s\';')
  ActiveRecord::Base.connection.execute(Message.all.to_sql)
end
```

```
TRANSACTION (0.4ms)  BEGIN
(2.4ms)  SET LOCAL statement_timeout = '5s';
(1.2ms)  SELECT ""messages"".* FROM ""messages""
TRANSACTION (0.9ms)  COMMIT
```

### Expected behavior
I expected that in both of the above scenarios, everything in the transaction block would be run within the DB transaction statement, like this:

```
TRANSACTION (0.4ms)  BEGIN
(2.4ms)  SET LOCAL statement_timeout = '5s';
(1.2ms)  SELECT ""messages"".* FROM ""messages""
TRANSACTION (0.9ms)  COMMIT
```

### Actual behavior

But instead, in scenario 1, only the first `execute` statement appears to run within the DB transaction. Maybe that is actually expected (albeit surprising to me). In any event it would be interesting to know why that happens.

```
TRANSACTION (0.7ms)  BEGIN
(3.4ms)  SET LOCAL statement_timeout = '5s';
TRANSACTION (0.5ms)  COMMIT
Message Load (0.4ms)  SELECT ""messages"".* FROM ""messages"" /* loading for pp */ LIMIT $1  [[""LIMIT"", 11]]
```

### System configuration
**Rails version**: 7.1

**Ruby version**: 3.2
",apmiller108,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50199,18750194,50199,Improve action view helpers guide [ci skip],open,0,2023-11-28 12:48:06+00:00,2023-11-29 15:09:40+00:00,,"Background

- Fixed grammatical errors
- Correct the typo in the path- `app/assets/javascripts` => `app/assets/javascript`",apoorv1316,User,0,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50198,5657035,50198,Fix duplicate `DEFERRABLE` directive added for foreign keys in PostgreSQL and SQLite,open,5,2023-11-28 12:47:26+00:00,2023-12-31 09:22:43+00:00,,"When adding a foreign key with a `:deferrable` option, a duplicate `""DEFERRABLE""` directive is generated. 
Something like:
```sql
ALTER TABLE ""authors"" ADD CONSTRAINT ""fk_rails_94423a17a3""
FOREIGN KEY (""author_address_id"")
  REFERENCES ""author_addresses"" (""id"")
 DEFERRABLE INITIALLY IMMEDIATE DEFERRABLE INITIALLY IMMEDIATE
```

This PR fixes that.",fatkodima,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50193,47554,50193,`lib/commands/*_command.rb` should load custom Thor commands,open,1,2023-11-28 04:30:59+00:00,2023-11-29 02:41:07+00:00,,"### Expected behavior

I should be able to create custom Rails Thor commands for my application in a way that is analogous to adding custom Rake tasks:

| Rake Task | Thor Command |
|-----------|--------------|
| `Rails.root/lib/tasks/custom.task` | `Rails.root/lib/commands/custom_command.rb` |  

For example, this should create the custom command `$ bin/rails custom:something` with all of the Thor niceties:

```ruby
# lib/commands/custom_command.rb
module Rails
  module Command
    class CustomCommand < Base
      desc ""something"", ""Perform a custom task""
      method_option :nice, type: :boolean, desc: ""Thor args are nice""
      def something
        puts ""Custom task performed!""
      end
    end
  end
end
```

This behavior already works for Rails Engines (aside: maybe the engine generator should automatically create a `lib/commands` directory in addition to `lib/tasks`). Here's where those lookups happen:

https://github.com/rails/rails/blob/139c5678aa5d9a4209ca06919abea7a9da449b36/railties/lib/rails/command.rb#L163-L169

These are loaded via the `$LOAD_PATH`, for a specific command:

https://github.com/rails/rails/blob/139c5678aa5d9a4209ca06919abea7a9da449b36/railties/lib/rails/command/behavior.rb#L36-L45

... or all commands for `help`:

https://github.com/rails/rails/blob/139c5678aa5d9a4209ca06919abea7a9da449b36/railties/lib/rails/command/behavior.rb#L55-L60

### Actual behavior

The `Rails.root/lib` directory does not get added to the $LOAD_PATH before those lookups happen, so they're never loaded and the commands are not found.

I think the simple solution here is to make sure that `Rails.root/lib` is added to the `$LOAD_PATH` when the `$ rails` command is initially run. That _normally_ happens when the Application is required and there's a custom command method to do that: [`require_application!`](https://github.com/rails/rails/blob/139c5678aa5d9a4209ca06919abea7a9da449b36/railties/lib/rails/command/actions.rb#L13-L16), but I imagine there could be reasons why that's done selectively. Hence opening an issue in case someone has better ideas.

The ""add lib to $LOAD_PATH"" behavior was most recently solidified in https://github.com/rails/rails/pull/48596

### System configuration

**Rails version**: 7.1.1

",bensheldon,User,4,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50189,47509535,50189,Inconsistency in Documentation: Mismatch Between `revert` Code Example and Subsequent Steps,open,8,2023-11-27 22:55:28+00:00,2024-01-24 22:38:05+00:00,,"There is an apparent error in [this documentation section](https://guides.rubyonrails.org/active_record_migrations.html#reverting-previous-migrations).

The point of confusion is the last part of the section where it says `the same migration could also have been written without using revert but this would have involved a few more steps` and proceeds to list some steps.

To my understanding, the phrase `the same migration` refers to the code example immediately above that text -- that code example demonstrates the use of `revert` to selectively rollback part of a previous migration. The way it works is that you copy and paste part of the code from a previous migration and wrap it in that `revert` block. Then, rails automatically does the opposite of what is included there. So, that part I think I understand.

So now, back to the text at the end. The steps listed are:
```
    1. Reverse the order of create_table and reversible.
    2. Replace create_table with drop_table.
    3. Finally, replace up with down and vice-versa.
```
Here's what I don't get: that second code example in the docs section that demonstrates the use of revert to selectively revert part of a migration does not involve dropping any table. It would make sense to me if that copy-pasted code included a create_table statement, but it doesn't. So, to my understanding, the steps listed with that last statement don't make sense.

For more context, the `ExampleMigration` referred to in that second code example appears to refer to a migration mentioned further up in the docs in another section, [here](https://guides.rubyonrails.org/active_record_migrations.html#using-reversible).

**It has been pointed out to me that the code example did originally have a `create_table` call, as you can see [here](https://github.com/rails/rails/blob/c4c3a44685b4cfb1ffd4c27309ccfbf1bb53d4e5/guides/source/active_record_migrations.md?plain=1#L606C6-L606C6)**. Therefore, it looks to me like the cause of the confusion is that when the section was updated to remove the `create_table` call, it caused the last bit of the wording in that section to become nonsensical.

I am not any kind of Rails expert, so I wouldn't want to try and edit the documentation myself, so I have decided to open this issue here. Thank you!",Leo-U,User,0,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50176,1003351,50176,ActiveStorage::VariantWithRecord should keep the variant key to store the file,open,3,2023-11-26 17:12:50+00:00,2024-01-30 22:47:08+00:00,,"### Steps to reproduce
With `config.active_storage.track_variants = false`
```ruby
MyModel.last.photo.variant(resize_to_fit: [200, 100]).key
=> ""variants/xxxxxxx""
```

With `config.active_storage.track_variants = true`
```ruby
MyModel.last.photo.variant(resize_to_fit: [200, 100]).key
=> nil
```

### Expected behavior
With `config.active_storage.track_variants = true` the variant should use [the key method](https://github.com/rails/rails/blob/354d68e8a63b21e47a529105a508411bfe8be869/activestorage/app/models/active_storage/variant.rb#L73) in order to store the variants in the folder ""variants"".

### Actual behavior
It stored the variation_digest in the root ""folder"" instead of the ""variants"" folder.

### System configuration
**Rails version**: 7.1

**Ruby version**: 3.2.2
",brunto,User,0,activestorage,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50174,11690,50174,Fix `#reload` consistency issue,open,5,2023-11-26 10:04:44+00:00,2023-12-12 14:10:12+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

If you have an object that has strict_loading set and then need to call `reload` multiple times, it would only work the first time, and after that, the application would start throwing a strict loading violation errors.

### Detail
To fix this, and keep `reload` working consistently between calls, we set `strict_loading`, if the original object has `strict_loading`, to the reloaded records to avoid the strict loading error. 

This wasn't a problem for the first call, because it is using the original associations cache, but it isn't the case for the other calls of `reload` as they would be using new copies of it, and when the new cache is used to build the list of ` strict_loaded_associations`, the `assoc.owner.strict_loading?` check will return `false`, as this owner is the previous `fresh_object` reference that doesn't have `strict_loading` set.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",sarcilav,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50172,57004457,50172,Check zone presence in find_zone!,open,0,2023-11-26 05:37:46+00:00,2023-11-27 02:50:46+00:00,,"### Motivation / Background

I've been running into some issues in some projects when calling `in_time_zone` which behind the scenes calls `find_zone!`. The cause was always the zone being an empty string, which I would've expected the method to behave in the same way as when passing nil as a parameter.

This Pull Request has been created because in my opinion instead of calling `.presence` each time we call `in_time_zone` the `find_zone!` method should check for the presence of the argument, making sure that what we just passed is not ""equivalent"" to nil. 

### Detail

This Pull Request changes the `find_zone!` method to check the `zone` argument presence before actually trying to find the corresponding time zone. 

### Checklist

Before submitting the PR make sure the following are checked:

* [X] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [X] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [X] Tests are added or updated if you fix a bug or add a feature.
* [X] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included. -> Not sure if this counts as a minor bug fix, open to add the CHANGELOG file changes too
",matiassalles99,User,0,activesupport,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50156,563294,50156,Introduce ActiveRecord:Errors registry for error translations,open,2,2023-11-24 11:13:12+00:00,2024-01-04 17:55:35+00:00,,"### Motivation / Background

In our codebase, we heavily lean on PostgreSQL stored procedures. These procedures can raise errors through the `RAISE` statement. We've added custom error codes to these errors so we can throw custom exceptions in our Ruby code. Up until now this has always been a monkey patch to the `translate_exception` method in the PostgreSQL adapter. The upgrade to Rails 7.1 broke our monkey patch (again), this motivated us to work on a better solution in ActiveRecord.

### Detail

This PR introduces the `ActiveRecord:Errors` registry to manage translations of database specific exceptions to ActiveRecord exceptions. Initially I wanted to only introduce this for custom errors, but after seeing the result I figured we can also use this for all specific translations in the adapters. This cleans up a lot of code and makes it easier to understand the translation.

A translation for an error can be registered in the registry:

```ruby
ActiveRecord::Errors.register(""MY0001"", MyCustomException, adapter: ActiveRecord::ConnectionAdapters::PostgreSQL)
ActiveRecord::Errors.register(/connection lost/, CustomConnectionLostException, adapter: ActiveRecord::ConnectionAdapters::PostgreSQL)
ActiveRecord::Errors.register((e)-> { e.kind_of?(Exception) }, MyCustomException, adapter: ActiveRecord::ConnectionAdapters::PostgreSQL)
```

The `AbstractAdapter` does a lookup in the registry to find the appropriate ActiveRecord exception. By supporting strings, Regexp and Procs, almost all translation cases in the specific adapters can be replaced.

### Additional information

Changing error handling for all database adapters should not be taken lightly. I've checked the test coverage for all errors and found that all errors are covered with tests spread over different test cases. 

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",edwinv,User,2,activerecord,needs feedback,,,,,,,
https://api.github.com/repos/rails/rails/issues/50152,26554,50152,Nested associations with `touch: true` cause additional touch on next transaction,open,0,2023-11-23 19:43:08+00:00,2024-01-20 10:03:39+00:00,,"I'm running into an edge case where creating a hierarchy of nested records with associations of the form

```ruby
Comment belongs_to :post, touch: true
Post belongs_to :blog, touch: true
```

within an transaction results in a `blog` object that performs an extra `touch` call before the next commit, overriding a manually passed `updated_at` timestamp:

```ruby
   ActiveRecord::Base.transaction do
      blog = Blog.create
      post = blog.posts.create
      post.comments.create
    end

    blog.update(updated_at: 4.days.ago)
    blog.updated_at.to_date # => today 
```

In my case the transaction was created implicitly via an `after_create` callback on the root model (in this case `Blog`) that scaffolded some nested associations. It was, thus, all the more surprising to obtain a record which did not allow updating its timestamps.

### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :blogs, force: true do |t|
    t.timestamps
  end

  create_table :posts, force: true do |t|
    t.belongs_to :blog
    t.string :title
    t.timestamps
  end

  create_table :comments, force: true do |t|
    t.belongs_to :post
    t.text :body
    t.timestamps
  end
end

class Blog < ActiveRecord::Base
  has_many :posts

  # Uncommenting the following two lines also makes the test fail with Rails 6.0
  # before_commit do
  # end
end

class Post < ActiveRecord::Base
  belongs_to :blog, touch: true
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post, touch: true
end

class BugTest < Minitest::Test
  def test_touching
    blog  = nil

    ActiveRecord::Base.transaction do
      blog = Blog.create
      post = blog.posts.create(title: ""Some title"")
      post.comments.create(body: ""LGTM"")
    end

    timestamp = 4.days.ago
    blog.update(updated_at: timestamp)

    assert_equal timestamp.to_date, blog.updated_at.to_date
  end
end
```

### Expected behavior

Updating the `updated_at` attribute works. 

### Actual behavior

Right before the transaction to update timestamp is committed, `Blog#touch` is invoked again undoing the manual update. 

To me the situation looks as follows: Since #19324, parent touches are batched together at the end of the transaction. Before the transaction that creates the records is committed, `Post#touch` causes `Blog#touch_later` to be invoked (via the [`after_touch` callback defined in `Associations::Builder::BelongsTo`](https://github.com/rails/rails/blob/7-1-stable/activerecord/lib/active_record/associations/builder/belongs_to.rb#L99)). But since the `before_commit` callback is already in progress, this schedules `Blog#touch` for the commit of the next transaction. 

In Rails 6.0 (before #39101), the above test passes since the `before_commit_without_transaction_enrollment` callback is not triggered unless `add_to_transaction` is called. This causes the additional `touch` to be skipped. Once we add a `before_commit` callback to `Blog`, the test also fails for Rails 6.0 since we again enforce enrollment in the transaction on each save. 

I'm wondering whether one might skip propagating touches along `belongs_to` associations (via the `after_touch` callback) during the `before_commit` phase since `touch_later` itself already appears to [handle this explicitly](https://github.com/rails/rails/blob/7-1-stable/activerecord/lib/active_record/touch_later.rb#L27).

### System configuration
**Rails version**: 6.1 - 7.1

**Ruby version**: 3.2
",tf,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/50139,43076580,50139,`counter_cache` not decrementing with has_many through association,open,4,2023-11-22 17:56:40+00:00,2023-11-23 20:25:45+00:00,,"### Steps to reproduce
```ruby
begin
  require 'bundler/inline'
rescue LoadError => e
  $stderr.puts 'Bundler version 1.10 or later is required. Please update your Bundler'
  raise e
end

gemfile(true) do
  source 'https://rubygems.org'
  gem 'activerecord', '7.1.1'
  # gem 'activerecord', '6.1.7.6'
  # gem 'activerecord', '5.2.8.1'
  gem 'sqlite3'
end

require 'active_record'
require 'minitest/autorun'
require 'logger'

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :books, force: true do |t|
  end

  create_table :parts, force: true do |t|
    t.integer :book_id
    t.integer :series_id
  end

  create_table :series, force: true do |t|
    t.integer :books_count, default: 0
  end
end

class Book < ActiveRecord::Base
  has_many :parts
  has_many :series, through: :parts
end

class Part < ActiveRecord::Base
  belongs_to :book
  belongs_to :series, counter_cache: :books_count
end

class Series < ActiveRecord::Base
  has_many :parts
  has_many :books, through: :parts
end

class BugTest < Minitest::Test

  def test_counter_cache_after_assign_and_clear
    book = Book.create!
    series = Series.create!

    series.books = [book]
    series.books = []
    assert_equal 0, series.books_count
  end

  def test_counter_cache_after_assign_and_clear_with_reload
    book = Book.create!
    series = Series.create!

    series.books = [book]
    series.books = []
    assert_equal 0, series.reload.books_count
  end
end
```

### Expected behavior
`counter_cache` should become to eq 0 after assign has_many field with empty array

### Actual behavior
`counter_cache` not decrementing

### System configuration
**Rails version**:
7.1.1, 6.1.7.6, 5.2.8.1
**Ruby version**:
3.2.2, 2.7.5",zbokostya,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50133,57357936,50133,Warn if frameworks are loaded too early,open,0,2023-11-22 13:02:04+00:00,2023-11-25 10:04:37+00:00,,"If you use a gem that loads the Rails framework too early, you will get various problems.

Examples of issues that are caused by gems loading Rails incorrectly (from https://github.com/rails/rails/pull/46047#issuecomment-1380712992)
- https://github.com/rails/rails/issues/23589 
- https://github.com/rails/rails/issues/27844
- https://github.com/rails/rails/issues/33283
- https://github.com/rails/rails/issues/36322
- https://github.com/rails/rails/issues/37030

Fixes to gems that loaded Rails too early
- https://github.com/ViewComponent/view_component/issues/1507
- https://github.com/collectiveidea/delayed_job_active_record/issues/185

Pull requests that try to make Rails warn about this problem, when your Rails code has been loaded too early
- https://github.com/rails/rails/pull/38024
- https://github.com/rails/rails/pull/46047

This issue is here to track the efforts to fix this issue. It seems both above PRs are stalled.

### Steps to reproduce
```
  # config/initializers/000_some_initializer.rb
  ActiveRecord::Base.configurations # Make use of AR::Base which hasn't been loaded yet

  # config/initializers/new_framework_defaults.rb
  Rails.application.config.active_record.collection_cache_versioning = false
  # Setting this configuration won't do anything since ActiveRecord::Base is already
  # loaded and the `set_configs` initializer has already iterated over application
  # config (see https://github.com/rails/rails/blob/b67785a476cf346b09f5ebc71b4d61aae3ac27b3/activerecord/lib/active_record/railtie.rb#L192)

  puts ActiveRecord::Base.collection_cache_versioning # true
```

### Expected behavior
Rails would warn on stderr about this problem, or raise an error.
Extra points, if it could pinpoint (stacktrace?) what code is doing the wrong loading.

### Actual behavior
Initializer configuration from new_framework_defaults of ActiveRecord is ignored.

### System configuration
**Rails version**:
7.1.2
**Ruby version**:
2.7.7",runephilosof-abtion,User,4,attached PR,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/50131,861653,50131,Invalid SQL executing distinct.count on a model with a composite primary key,open,6,2023-11-22 09:26:00+00:00,2024-01-06 10:52:18+00:00,,"The problem: when running a query `Model.distinct.count` on a model which as a composite primary key, the generated SQL is not valid.

### Steps to reproduce

To reproduce the bug with postgresql (which is the adapter l'm using)
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", ""= 7.1.2""
  gem ""pg""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""postgresql"", database: ""distinct_count_bug"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :composite_pks, primary_key: [:col1, :col2] do |t|
    t.string :col1
    t.string :col2

    t.timestamps
  end
end

class CompositePk < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_distinct_count_invalid_sql_generated
    CompositePk.create(col1: 'example', col2: 'example')
    count = CompositePk.distinct.count

    assert_equal 1, count
  end
end
```

To reproduce the bug with sqlite3 (I tried to understand if this is a database adapter specific bug but sqlite3 generates the same query)
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", ""= 7.1.2""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :composite_pks, primary_key: [:col1, :col2] do |t|
    t.string :col1
    t.string :col2

    t.timestamps
  end
end

class CompositePk < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_distinct_count_invalid_sql_generated
    CompositePk.create(col1: 'example', col2: 'example')
    count = CompositePk.distinct.count

    assert_equal 1, count
  end
end
```

### Expected behavior

Running Model.distinct.count:

No exception raised and valid SQL generated

Example of valid SQL
```SQL
SELECT COUNT(DISTINCT (""col1"", ""col2"")) FROM ""composite_pks""
```

### Actual behavior

Running Model.distinct.count:

An exception is raised (with postgresql):
`ActiveRecord::StatementInvalid: PG::SyntaxError: ERROR:  syntax error at or near ""[""
LINE 1: SELECT COUNT(DISTINCT [""col1"", ""col2""]) FROM ""composite_pks""`

An exception is raised (with sqlite):
`ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: ""col1"", ""col2""""`

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.2.2

**PostgresSQL**: 15

**SQLite**: 3
",umbertopeserico,User,2,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50128,6090,50128,Removing not used fixtures from ActionPack test suite,open,1,2023-11-22 02:02:12+00:00,2023-12-26 18:08:05+00:00,,"### Motivation / Background

This Pull Request has been created because I was looking at the ActionPack test suite and found a few fixture files that are not used anymore.


### Checklist

Before submitting the PR make sure the following are checked:

* [ X ] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [ N/A ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ N/A ] Tests are added or updated if you fix a bug or add a feature.
* [ N/A ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",thiagopradi,User,0,actionpack,needs work,,,,,,,
https://api.github.com/repos/rails/rails/issues/50124,2575027,50124,Introduce `field_label` form helper,open,0,2023-11-21 03:58:55+00:00,2024-01-10 12:32:07+00:00,,"### Motivation / Background

Generate the text-only label contents for a field:

```ruby
  # Helper method
  field_label :article, :title    # => ""Title""

  # FormBuilder method
  form_with model: @article do |form|
    form.label :title             # => ""<label for=\""article_title\"">Title</label>""
    form.field_label :title       # => ""Title""
  end
```

This can be useful when utilizing `[aria-label]` in rare circumstances where rendering a `<label>` element for a form control isn't feasible.

Prior to this commit, invoking `label_tag` or `form.label` was the only way to automatically determine a form control's (internationalized!) label text without providing call-site specific content (via a String argument or a block). Even with that automatic determination, the text content is nested within a `<label>` element.

### Detail

With this change, views can separate the content text from the element for circumstances where they need to craft their own `[aria-label]` text based on the out-of-the-box translated label text:

```erb
<%= form_with model: @post do |form| %>
  <%# a typical <label> + <input> combination %>
  <%= form.label :title %>
  <%= form.text_field :title %>

  <%# an <input> with [aria-label] text %>
  <%= form.text_field :title, aria: { label: form.field_label(:title) } %>

  <%# a typical <label> + <input> combination with additional [aria-label] text %>
  <%= form.label :title %>
  <%= form.text_field :title, aria: {
        label: ""#{form.field_label(:title)}, and then some additional text to be announced""
      } %>
<% end %>
```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,2,needs feedback,actionview,,,,,,,
https://api.github.com/repos/rails/rails/issues/50123,42748004,50123,Add error connection tests for various db adapters,open,1,2023-11-21 01:16:33+00:00,2023-12-26 18:10:15+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background
From https://github.com/rails/rails/pull/48111#issuecomment-1531952728, it was found that there is currently no test coverage for the types of errors when connecting to the db.
<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

### Detail
This was done by modifying the database configs with invalid host/user/database. As a result, this PR also fixes the error code of `ER_DBACCESS_DENIED_ERROR` to return a no database error instead of a username error.

**Looking into the CI error 👀 


### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",jenshenny,User,0,activerecord,needs work,,,,,,,
https://api.github.com/repos/rails/rails/issues/50118,149304,50118,prepend option is no longer supported for after_commit callbacks in Rails 7.1 defaults,open,2,2023-11-20 18:17:01+00:00,2023-11-20 22:49:17+00:00,,"As a result of #46992 (@tenderlove), with new Rails 7.1 default `run_after_transaction_callbacks_in_order_defined` true, `prepend` option is _no longer supported_ for any transactional callbacks.  (after_commit)

We can see how in the presence of this configugration `prepend:true` is hardcoded, and then passed to `set_options_for_callbacks!` method such that it will over-ride any `prepend` arg otherwise passed in, for all `after_commit` and `after_rollback` ""transactional"" callbacks. 

https://github.com/rails/rails/pull/46992/files#diff-8dd03b7fb9b72a3bd338955c1de75652d60453230c6544f3851c0d0b3746a675R270-R275

The effect of this is that prior to `run_after_transaction_callbacks_in_order_defined`, you could use `prepend:true` to alter callback order when definining new transactional callbacks. 

But after #46992, not only is the default order reversed, but **you can no longer use prepend:true to alter the order**. 

This is not mentioned in the #46992 or any related docs/changenotes.  `prepend: true` is still mentioned as an option for `before_destroy` in [guide](https://github.com/rails/rails/blob/0ad26f789013f3e07d7dc453303a8240a4da0d38/guides/source/active_record_callbacks.md#destroying-an-object) as well as [header docs on ActiveRecord::Callbacks](https://github.com/rails/rails/blob/0ad26f789013f3e07d7dc453303a8240a4da0d38/activerecord/lib/active_record/callbacks.rb#L198-L205)

`prepend:true` is mentioned in passing in the [docs for run_after_transaction_callbacks_in_order_defined](https://github.com/rails/rails/blob/0ad26f789013f3e07d7dc453303a8240a4da0d38/guides/source/configuring.md#configactive_recordrun_after_transaction_callbacks_in_order_defined), but I guess it's not clear if it's meant to apply to `after_commit` there?



1. If it is intended that `prepend` option is removed from after_commit and transactional callbacks when `run_after_transaction_callbacks_in_order_defined` is set,  i guess the docs should mention this?

2. If it is a bug that `prepend:true ` no longer works for after_commit callbacks in Rail 7.1 with default config, then we could fix it in a PR?
",jrochkind,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/50115,38864576,50115,Update interceptors and observers registering examples,open,2,2023-11-20 16:03:13+00:00,2023-12-26 18:10:54+00:00,,"### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

Using the current `Interceptor` and `Observer` registering examples trigger deprecation warnings. The ones I proposed instead are similar to what is recommended in the `ActionMailer` [configuration guide](https://guides.rubyonrails.org/configuring.html#config-action-mailer-observers).

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",bear-in-mind,User,0,docs,needs work,,,,,,,
https://api.github.com/repos/rails/rails/issues/50114,10277857,50114,Add `application/merge-patch+json` as subtype for `application/json`,open,0,2023-11-20 15:07:53+00:00,2023-12-26 18:12:48+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

[RFC 7396 JSON Merge Patch](https://www.ietf.org/rfc/rfc7396.txt) defines the JSON merge patch format and processing rules and registers `application/merge-patch+json` as additional MIME media type. It expects the same encoding of `application/json`.

### Detail

This PR proposes adding `application/merge-patch+json` as an additional recognized MIME subtype for `application/json`.

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",kemuridama,User,0,actionpack,needs feedback,,,,,,,
https://api.github.com/repos/rails/rails/issues/50109,530941,50109,Restore detailed error message for excessive password length,open,2,2023-11-20 00:33:04+00:00,2023-12-26 18:13:47+00:00,,"### Motivation / Background

This Pull Request addresses a regression introduced in PR #47708, where the error message for an excessively long password was changed to a less informative ""is too long"". Previously, the error message included a dynamic count of the maximum allowed characters (e.g., ""is too long (maximum is %{count} characters)""). This regression affects the user experience by providing less guidance on how to correct the input. Restoring the informative error message helps developers and users understand the validation constraints.

### Detail

This Pull Request makes the following changes:
- It restores the `count` parameter in the error message for a password exceeding the maximum length, ensuring users receive a detailed response (""is too long (maximum is %{count} characters)"").
- It reverts the validation error symbol from `:password_too_long` back to `:too_long` within `activemodel/lib/active_model/secure_password.rb`.
- It removes the `:password_too_long` key from `activemodel/lib/active_model/locale/en.yml` to align with the use of the `:too_long` symbol.

### Additional information

The change is straightforward and restores functionality to its previous state as of v7.1.0.beta1, ensuring that the error message for password length validation is both informative and accurate.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why.
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.

---

This PR was co-authored by ChatGPT.",cabgfx,User,1,activemodel,needs feedback,,,,,,,
https://api.github.com/repos/rails/rails/issues/50105,5657035,50105,Fix `run_generator` to work for generators calling other generators,open,0,2023-11-19 16:46:25+00:00,2023-12-26 18:15:18+00:00,,"Fixes #50099 (see there for the description).

Tested locally - works as expected, but I am struggling to write a test for this.",fatkodima,User,0,railties,needs feedback,,,,,,,
https://api.github.com/repos/rails/rails/issues/50099,877224,50099,Rails Generator Tests do not work with `generate` commands,open,4,2023-11-18 23:43:39+00:00,2024-01-10 03:16:36+00:00,,"### Steps to reproduce

_Example repository here: https://github.com/practical-computer/generator-test-failure_. Relevant files:
* https://github.com/practical-computer/generator-test-failure/blob/main/lib/generators/example/example_generator.rb
* https://github.com/practical-computer/generator-test-failure/blob/main/test/lib/generators/example_generator_test.rb

When creating a new Generator from a fresh Rails install, the generated test case does not run. Instead, the following error is returned:

```
$ bundle exec rails test                                              
Running 1 tests in a single process (parallelization threshold is 50)
Run options: --seed 42824

# Running:

/.../.rbenv/versions/3.0.2/bin/ruby: No such file or directory -- bin/rails (LoadError)
```

Command run to generate the generator:
```shell
 bundle exec rails generate generator example
      create  lib/generators/example
      create  lib/generators/example/example_generator.rb
      create  lib/generators/example/USAGE
      create  lib/generators/example/templates
      invoke  test_unit
      create    test/lib/generators/example_generator_test.rb
```

The generator body:
```ruby
class ExampleGenerator < Rails::Generators::NamedBase
  source_root File.expand_path(""templates"", __dir__)

  def run_test_generator
    generate ""generator"", ""test""
  end
end
```

### Expected behavior
The generator tests should work

### Actual behavior
The tests error out

### System configuration
**Rails version**: Rails 7.1.2


**Ruby version**: `ruby 3.0.2p107 (2021-07-07 revision 0db68f0233) [arm64-darwin21]`

### Research

@garrettdimon has been extremely helpful with debugging this and pulled the following links together:
* The test suites worked back in Rails 6.1.7.6: https://github.com/rails/rails/commit/ad0f0e69800db62a9bb198d427bb531fbd07e027
* https://github.com/rails/rails/commit/ad0f0e69800db62a9bb198d427bb531fbd07e027#diff-a8b5ef8dfdaadc4ed11dae1c4e6762bb26a76f90e53e9fec87c9e92f14a83e0fL343-R343",tcannonfodder,User,0,railties,attached PR,With reproduction steps,,,,,,
https://api.github.com/repos/rails/rails/issues/50091,118707,50091,Add `query_cache_clearing_strategy` to customize how the query cache clears,open,5,2023-11-18 00:18:15+00:00,2023-11-28 10:33:44+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

I work on a rather large, robust Rails application that has some custom multi-database code. The default behavior of `ActiveRecord::Base.clear_query_caches_for_current_thread` for cache clearing can result in a substantial number of cache misses between unrelated shards, (noted in #40622) - similarly as the methods passed to `dirties_query_cache` in `ActiveRecord::ConnectionAdapters::QueryCache` has changed (such as in #48061) this again changes the number of query cache hits, which can result in performance regressions. In both cases, the default behavior absolutely makes sense, however it is difficult to carve out an exception. In order to do so this requires making `clear_query_caches_for_current_thread` a noop and then overwriting the target methods on the adapter classes.

Rather than being prescriptive, this pull request maintains the current behavior and gives a more straightforward way for applications to modify the existing cache clearing behavior instead of monkey patching core Active Record classes. 

### Detail

- Add `ActiveRecord#query_cache_clearing_strategy` as a singleton accessor that defaults to a `Proc` that just calls `ActiveRecord::Base.clear_query_caches_for_current_thread` 
- Replace the call to `ActiveRecord::Base.clear_query_caches_for_current_thread` in the inline method definition in `ActiveRecord::ConnectionAdapters::QueryCache` to call the new `Proc` with the arguments of `self`, the `method_name` and args. 
- Update the configuration guide to document this.

### Additional information

Since there is no change to the behavior as is, I have no additional tests added.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",jcalvert,User,0,activerecord,docs,,,,,,,
https://api.github.com/repos/rails/rails/issues/50077,10115449,50077,after_commit callbacks order is not consistent with after_save for autosaved records,open,0,2023-11-16 20:31:21+00:00,2023-11-16 20:37:38+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string :title
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
  end
end

class Post < ActiveRecord::Base
  has_many :comments

  after_commit do
    puts ""Post #{id} after_commit""
  end

  after_save do
    puts ""Post #{id} after_save""
  end
end

class Comment < ActiveRecord::Base
  belongs_to :post

  after_commit do
    puts ""Comment #{id} after_commit""
  end

  after_save do
    puts ""Comment #{id} after_save""
  end
end

Post.create(comments: [Comment.new, Comment.new])
```

Output:

```
Comment 1 after_save
Comment 2 after_save
Post 1 after_save
D, [2023-11-17T03:19:49.216443 #68692] DEBUG -- :   TRANSACTION (0.0ms)  commit transaction
Post 1 after_commit
Comment 1 after_commit
Comment 2 after_commit
```

### Expected behavior
`after_commit` callbacks are executed in the same order as `after_save`: related records first, then the saved record itself.

### Actual behavior
`after_commit` callbacks are first executed on the main object, then on the autosaved ones.

In our application we perform some work in both autosaved object's `after_commit` callbacks that requires them to be already persisted, and in the main object. The current order of callbacks can lead to unintentional hard to debug race conditions, if user is not aware of that behavior.

Not sure if it's a bug, but at least a clarification in the docs would be nice, like in #49831

### System configuration
**Rails version**: Rails 6.1.7.5, Rails 7.1.2, main branch as of time of submitting (949b4d1)

**Ruby version**: 3.1.2p20
",4ndv,User,2,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50072,148003,50072,association with `query_constraints: []` always returns empty collection when included,open,2,2023-11-16 12:59:11+00:00,2023-11-17 14:40:12+00:00,,"### Steps to reproduce

With `query_constraints: []` one can create a custom query for an association, for example:

```ruby
class BodyPart < ActiveRecord::Base
end

class Human < ActiveRecord::Base
  has_many :body_parts, -> { where(for: 'human') }, query_constraints: []
end
```

This results in the following correct sql:

```ruby
Human.last.body_parts.to_sql
# => SELECT ""body_parts"".* FROM ""body_parts"" WHERE ""body_parts"".""for"" = 'human'
```

So far so good, but it always returns an empty collection when adding an `includes(:body_parts)`:

```ruby
Human.create!
BodyPart.create!(for: 'human')

Human.last.body_parts
# => [<instance of BodyPart>]
# correct

Human.includes(:body_parts).last.body_parts
# => []
# wrong
```

Is this a misuse of `query_constraints`? Should it break on `query_constraints: []`?

Or is this a bug including/eager_loading associations in case there are no query_constraints?

### Background

The idea is to have custom associations *that can be preloaded*. The example above is very simple and doesn't depend on the the attributes at all (so the result is the same for every human), but it could be more complicated with a custom `where` query string etc. that takes into account the attributes of the model.

### Test template

<details><summary>Template</summary>

```ruby
# frozen_string_literal: true

require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem 'rails', github: 'rails/rails', branch: 'main'
  gem 'sqlite3'
end

require 'active_record'
require 'minitest/autorun'
require 'logger'

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new($stdout)

ActiveRecord::Schema.define do
  create_table :humen, id: :uuid, force: true do |t|
  end

  create_table :body_parts, id: :uuid, force: true do |t|
    t.string :for
  end
end

class BodyPart < ActiveRecord::Base
end

class Human < ActiveRecord::Base
  has_many :body_parts, -> { where(for: 'human') }, query_constraints: []
end

class BugTest < Minitest::Test
  def test_without_include
    Human.delete_all
    BodyPart.delete_all

    body_part_for_human = BodyPart.create!(id: SecureRandom.uuid, for: :human)
    BodyPart.create!(id: SecureRandom.uuid, for: :dog)

    Human.create!(id: SecureRandom.uuid)

    assert Human.all.first.body_parts == [body_part_for_human]
  end

  def test_with_include
    Human.delete_all
    BodyPart.delete_all

    body_part_for_human = BodyPart.create!(id: SecureRandom.uuid, for: :human)
    BodyPart.create!(id: SecureRandom.uuid, for: :dog)

    Human.create!(id: SecureRandom.uuid)

    assert Human.all.includes(:body_parts).first.body_parts == [body_part_for_human]
  end
end
```
</details>

### References

might ref #50068

### System configuration
**Rails version**: main

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) +YJIT [arm64-darwin22]
",doits,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50068,24962950,50068,Inconsistency on preload and eager_load of relation with query_constraints or json column type,open,3,2023-11-15 22:21:50+00:00,2023-11-18 19:38:40+00:00,,"### Steps to reproduce
```ruby
# frozen_string_literal: true
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :authors, force: true do; end

  create_table :books, force: true do |t|
    # t.string :ref # (S)
    t.json :ref # (J)
  end
end

class Author < ActiveRecord::Base; end

class Book < ActiveRecord::Base
  # foreign key version (F)
  # has_one :author, foreign_key: :id, primary_key: :ref, dependent: nil, inverse_of: false

  # query constraints version (Q)
  has_one :author, query_constraints: %i[id], primary_key: %i[ref], dependent: nil, inverse_of: false
end

class BugTest < Minitest::Test
  def test_pre_eager_lazy_loads
    author = Author.create!(id: 2)
    book1 = Book.create!(id: 1, ref: ""1"")
    book2 = Book.create!(id: 2, ref: ""2"")

    assert_nil book1.author
    assert_equal author, book2.author
    assert_equal [nil, author], Book.eager_load(:author).order(:id).map(&:author) # 3
    assert_equal [nil, author], Book.preload(:author).order(:id).map(&:author) # 4
  end
end
```

### Expected behavior
There are four setups: _FS_, _FJ_, _QS_, _QJ_, with _FS_ being the simplest. I expect the test to yield the same result for all setups. Also assertions 2 and 4 should probably either both fail or both succeed.

### Actual behavior
_FS_ passes, _FJ_ fails assertion 3, _QS_ fails assertion 4, _QJ_ fails assertions 3 and 4.
In all cases because the `.author` association on the second book is loaded but set to nil.

The queries look alright and don't depend on the setup, and the refs are sent unquoted on the preload.

### System configuration
**Ruby version**: 3.2.1 31819e82c8 arm64-darwin22",brunodccarvalho,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/50065,159,50065,Add BOOTSNAP_READONLY to Dockerfile template for production,open,4,2023-11-15 19:19:44+00:00,2024-01-23 13:10:20+00:00,,"

<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This was added in back in bootsnap 1.15.0 (https://github.com/Shopify/bootsnap/pull/428). This can save extra work and IO when the cache won't be changed, like is the case for docker containers

### Detail

This Pull Request changes the Dockerfile template used when creating a new application to add `BOOTSNAP_READONLY=1`

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",technicalpickles,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50063,6014046,50063,Add documentation for delegated methods on Metal,open,0,2023-11-15 04:36:15+00:00,2023-11-15 04:42:26+00:00,,"Some of these were specifically mentioned earlier in the Metal docs (response_body=, content_type=, status=) but were not linked because the methods were not documented (due to being part of a delegation).

This commit separates all of the delegated methods so that they can be documented, adds links for the mentioned methods, and additionally documents two methods on Response that are mentioned in the new Metal documentation, but were not previously documented.",skipkayhil,User,0,actionpack,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50060,5657035,50060,Fix permitting arrays in numbered parameters for `StrongParameters`,open,0,2023-11-14 18:00:21+00:00,2023-11-14 19:19:34+00:00,,"Fixes #50051.

The test case is a preceding test case, adapted for this change.",fatkodima,User,0,actionpack,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50051,45188,50051,Strong Parameters permit Array value in Hash,open,2,2023-11-14 01:49:10+00:00,2023-12-08 01:17:47+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""action_controller/railtie""
require ""minitest/autorun""

class BugTest < Minitest::Test
  def test_strong_parameters
    hash = {
      'a' => {
        # '0' key can be any integer
        '0' => [{ 'id' => 1, 'body' => [1] }],
        '1' => [{ 'id' => 2, 'body' => [2] }]
      }
    }

    # passes but keys, '0' & '1', needs to be specified, which may not be possible if they're variable, e.g. integer id of some sort
    assert hash.eql?(ActionController::Parameters.new(hash).permit(a: {'0': [:id, body: []], '1': [:id, body: []]}).to_h)

    # fails
    assert hash.eql?(ActionController::Parameters.new(hash).permit(a: [:id, body: []]).to_h)
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->

Expected to get a permitted hash of:

```ruby
    {
      'a' => {
        '0' => [{ 'id' => 1, 'body' => [1]}],
        '1' => [{ 'id' => 2, 'body' => [2]}]
      }
    }
```

### Actual behavior
<!-- Tell us what happens instead -->

Got:

```ruby
    {
      'a' => { }
    }
```


### System configuration
**Rails version**: 7.0.6

**Ruby version**: 3.0.4p208
",khoan,User,0,actionpack,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/50048,26554,50048,`alias_attribute` no longer overrides reader method defined in concern,open,2,2023-11-13 21:17:12+00:00,2023-11-15 15:38:02+00:00,,"I realize this is an edge case. Mainly posting the issue to document the change for others. Took me an hour today to understand a failure in our app caused by this change.

### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string :title
  end
end

module Displayable
  # This is the a default implementation for classes that do not wish to implement display_name themselves
  def display_name
    ""Default name""
  end
end

class Post < ActiveRecord::Base
  include Displayable

  alias_attribute :display_name, :title
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!(title: ""Some title"")

    assert_equal ""Some title"", post.display_name
  end
end
```

### Expected behavior

`alias_attribute` in Post overrides `display_name` reader method defined in `Displayable` module. Test passes.

### Actual behavior

I assume since https://github.com/rails/rails/pull/48533, `alias_attribute` no longer defines the `display_name` reader method on `Post` itself, but on `Post::GeneratedAttributeMethods` which comes after `Displayable` in the ancestor chain:

```
Post.ancestors
# => [Post(id: integer, title: string), Displayable, Post::GeneratedAssociationMethods, Post::GeneratedAttributeMethods, ActiveRecord::Base, ...]
```

Test fails:

```
1) Failure:
BugTest#test_association_stuff [alias_attribute_bug.rb:46]:
Expected: ""Some title""
  Actual: ""Default name""
```

Changing `activerecord` version to 7.0.0 fixes the test.

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.2.2
",tf,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/50040,1634999,50040,Nested Delegated Types with `accepts_nested_attributes_for` not updating as expected,open,3,2023-11-13 16:15:07+00:00,2023-12-08 03:27:26+00:00,,"### Steps to reproduce

```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  gem ""rails"", ""~> 7""
  gem ""sqlite3"", platform: :mri
end

require ""active_record""
require ""minitest/autorun""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table ""transformation_pipeline_transformations"", force: :cascade do |t|
    t.bigint ""transformation_pipeline_id"", null: false
    t.bigint ""transformation_id"", null: false

    t.datetime ""created_at"", null: false
    t.datetime ""updated_at"", null: false
  end

  create_table ""transformation_pipelines"", force: :cascade do |t|
    t.datetime ""created_at"", null: false
    t.datetime ""updated_at"", null: false
    t.string ""name""
  end

  create_table ""transformations"", force: :cascade do |t|
    t.string ""name""
    t.string ""transformable_type"", null: false
    t.bigint ""transformable_id"", null: false
    t.datetime ""created_at"", null: false
    t.datetime ""updated_at"", null: false
    t.index %w[transformable_type transformable_id], name: ""index_transformations_on_transformable""
  end

  create_table ""transformations_tests"", force: :cascade do |t|
    t.string ""args""
    t.datetime ""created_at"", null: false
    t.datetime ""updated_at"", null: false
  end
end

class ApplicationRecord < ActiveRecord::Base
  self.abstract_class = true
end

class Transformation < ApplicationRecord
  delegated_type :transformable, types: %w[Transformations::Test]
  belongs_to :transformable, polymorphic: true
  delegate :transform!, to: :transformable
  accepts_nested_attributes_for :transformable
end

module Transformations
  def self.table_name_prefix
    ""transformations_""
  end
end

class TransformationPipeline < ApplicationRecord
  has_many :transformation_pipeline_transformations
  has_many :transformations, through: :transformation_pipeline_transformations
  accepts_nested_attributes_for :transformations
end

class TransformationPipelineTransformation < ApplicationRecord
  belongs_to :transformation_pipeline
  belongs_to :transformation
end

class Transformations::Test < ApplicationRecord
  has_one :transformation, as: :transformable, touch: true
end

class BugTest < Minitest::Test
  def test_delegated_type_assignment
    transformation = Transformation.create!(transformable: Transformations::Test.create(args: ""@""), name: ""test"")
    transformation_pipeline = TransformationPipeline.create!(name: ""test pipeline"")
    transformation_pipeline_transformations =
      TransformationPipelineTransformation.create!(
        transformation_pipeline: transformation_pipeline,
        transformation: transformation
      )

    pipeline = TransformationPipeline.first
    new_transformable_args = ""New Args""
    new_transformation_name = ""New Transformation Name""
    pipeline.update(
      name: ""New TransformationPipeline Name"",
      transformations_attributes: [
        {
          id: transformation.id,
          name: new_transformation_name,
          transformable_attributes: {
            id: transformation.transformable.id,
            args: new_transformable_args
          }
        }
      ]
    )
    assert_equal new_transformable_args, Transformation.find(transformation.id).transformable.args
  end
end
``` 

### Expected behavior

Update field args to be new_transformable_args or emit warning or error if it isn't possible. I've checked the [implementation PR](https://github.com/rails/rails/pull/41717/files) and couldn't spot anything I'm doing wrong.

### Actual behavior

All fields except args are updated, transaction is committed, no error is returned:

```
 TRANSACTION (0.0ms)  begin transaction
 Transformation Load (0.1ms)  SELECT ""transformations"".* FROM ""transformations"" INNER JOIN ""transformation_pipeline_transformations"" ON ""transformations"".""id"" = ""transformation_pipeline_transformations"".""transformation_id"" WHERE ""transformation_pipeline_transformations"".""transformation_pipeline_id"" = ? AND ""transformations"".""id"" = ?  [[""transformation_pipeline_id"", 1], [""id"", 1]]
 Transformations::Test Load (0.0ms)  SELECT ""transformations_tests"".* FROM ""transformations_tests"" WHERE ""transformations_tests"".""id"" = ? LIMIT ?  [[""id"", 1], [""LIMIT"", 1]]
 TransformationPipeline Update (0.0ms)  UPDATE ""transformation_pipelines"" SET ""updated_at"" = ?, ""name"" = ? WHERE ""transformation_pipelines"".""id"" = ?  [[""updated_at"", ""2023-11-13 16:02:38.941072""], [""name"", ""New TransformationPipeline Name""], [""id"", 1]]
 Transformation Update (0.0ms)  UPDATE ""transformations"" SET ""name"" = ?, ""updated_at"" = ? WHERE ""transformations"".""id"" = ?  [[""name"", ""New Transformation Name""], [""updated_at"", ""2023-11-13 16:02:38.941457""], [""id"", 1]]
 TRANSACTION (0.0ms)  commit transaction
```

### System configuration
**Rails version**: Rails 7.1.2

**Ruby version**: ruby 3.2.1 (2023-02-08 revision 31819e82c8) [arm64-darwin22]

### Edit

From what I found so far it looks like it's correctly assigning attributes to the model.
It's calling ActiveModel::AttributeAssignment#assign_attributes with the updated value:
(It calls `args=` with `New Args` on `Transformations::Test`)

 But delegated type is not marked as one to be saved when transaction finishes. I will keep digging...

It works as expected when I change the hash to not have id under transformable_attributes:

```ruby
pipeline1.update(
      name: ""New TransformationPipeline Name"",
      transformations_attributes: [
        {
          id: transformation.id,
          name: new_transformation_name,
          transformable_type: transformation.transformable_type,
          transformable_id: transformation.transformable_id,
          transformable_attributes: {
            # id: transformation.transformable.id, # Commenting out it here, makes it work
            args: new_transformable_args
          }
        }
      ]
    )
```
",mic-kul,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50039,1655218,50039,Add ability to detect a half-open connection,open,2,2023-11-13 14:54:58+00:00,2024-01-06 12:45:50+00:00,,"### Motivation / Background

I have IoT devices connecting to my Rails app via ActionCable, and I want to log when a device connects or disconnects.

This is already doable via `Cahnnel#subscribed` and `Channel#unsubscribed`; and it works pretty well when a device properly connects, subscribes, and disconnects.

But when a device improperly disconnects - e.g. if it gets unplugged from the network - its ActionCable connection doesn't close and can linger in the system for up to half an hour.

This means that the server is using up resources to manage this connection, and send messages to it, when there isn't a client to receive them (since a client will reconnect if it misses 2 heartbeats which is about 6 sec). Some of these issues have been commented on in #45112 and #24908

Currently, ActionCable doesn't have a mechanism to detect if its connection is half-open (if there is a client listening on the other end). 

This PR changes the protocol so that a client has to respond to a PING message with a PONG message. If it doesn't do so within 2 heartbeats (6 sec) the connection is assumed to be half-open and is closed.

Fixes #45112
Fixes #24908
Fixes #29307
Fixes #32828

### Detail

#### Why not client-initiated heartbeats?

I've considered implementing client-initiated heartbeats ([and did a proof of concept for it](https://github.com/monorkin/actioncable-presence-detection-demo/commit/82a851f0de0f8db414e3c8055fa28be4031ffd90)) as was suggested in #45112 and in #24908, but opted for PONG responses because [Chrome recently added a feature that throttles setTimeout and setInterval to run at most once a minute if a tab isn't in focus](https://developer.chrome.com/blog/timer-throttling-in-chrome-88/). 

This throttling would cause clients to reconnect loop if the half-open threshold is set to below 1 min. And heartbeats with intervals greater than 1 min aren't always desirable, like in my case where I want to know that a device went offline within seconds. Chrome's throttling also [prompted socket.io to change it's heartbeat to be server-initated](https://github.com/socketio/socket.io/issues/2769#issuecomment-639300952).

#### Backwards and forwards compatibility

To ensure that clients that *don't* know about PONG messages can still work with servers that *do*, and for clients that *do* know about PONG messages to work with servers that *don't*; I've created a minor revision of the protocol - `actioncable-v1.1-json`.

If a client sends that in a `Sec-WebSocket-Protocol` header to the server and the server responds with `actioncable-v1.1-json` both the client and server know that they should send and expect PONG messages.

If the client doesn't send `Sec-WebSocket-Protocol: actioncable-v1.1-json` or the server doesn't respond with `Sec-WebSocket-Protocol: actioncable-v1.1-json` then the behavior from `actioncable-v1-json` is used.

#### Why is this logic on the connection object instead of the stream object?

In #45112 there was a suggestion to implement this as a timeout in the event-loop / select-loop.
From my understanding implementing it that way wouldn't be that much different from the implementation in this PR.
There would be some kind of last_message_read_at timestamp that's checked in each iteration, and if a threshold is exceeded the socket would be closed.

I implemented everything on the connection object because doimainwise it makes sense to me that a connection keeps the heartbeat and responds to it. 

Though I can see the benefits of having everything in the event loop. I have no strong opinion on this.

#### What about dropped message detection from #24908?

I've opted not to tackle that in this PR as that seems like it could become a mini-framework within ActionCable.

#### What about client-side latency measurements from #24908?

I've opted not to include that in this PR. But this could probably be done by adding an `echo` type message (or repurposing `ping`) that just echos back what the client sends to the server.

#### What about client-set heartbeat frequency from #24908?

I've opted not to include that in this PR as it's an unrelated feature to this one.

#### Why not native WebSocket PING and PONG messages like #32828?

It currently isn't possible to process native PING and PONG messages in browsers, so an additional sub-protocol level heartbeat would be needed for JS clients in browsers to be able to detect that they have been disconnected. Therefore it makes more sense to have just the one sub-protocol level heartbeat for everything.

#### What about the changelog?

~The CHANGELOG file contains a link to the changes in Rails 7.1. I'm not sure what to do.~

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",monorkin,User,10,docs,actioncable,,,,,,,
https://api.github.com/repos/rails/rails/issues/50038,26554,50038,db:create:all task fails for new app with mysql adapter,open,15,2023-11-13 13:05:04+00:00,2024-01-17 21:06:48+00:00,,"### Steps to reproduce

```
rails new foo -d mysql
cd ./foo
edit config/database.yml # Enter root password
bin/rails db:create:all
```

### Expected behavior
Databases are being created.

### Actual behavior
Error:

```
ActiveRecord::NoDatabaseError: We could not find your database: foo_development. Available database configurations can be found in config/database.yml file. (ActiveRecord::NoDatabaseError)

To resolve this error:

- Did you create the database for this app, or delete it? You may need to create your database.
- Has the database name changed? Check your database.yml config has the correct database name.

To create your database, run:

        bin/rails db:create
```

After calling `bin/rails db:create`, `bin/rails db:create:all` works as expected.

I am aware that `db:create` now also creates the test database in the development env. I'm using the `db:create:all` task, though, to automatically create databases for a dummy application of a Rails engine, where `db:create` still only creates the test database when running in CI.

### System configuration
**Rails version**: 7.1.2 - 7.1.3

**Ruby version**: 3.2.2
",tf,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/50020,5657035,50020,Fix schema dumper to account for `ActiveRecord.dump_schemas` when dumping in `:ruby` format,open,2,2023-11-11 19:51:48+00:00,2023-12-27 12:53:43+00:00,,"Fixes #49926.

Currently, `ActiveRecord.dump_schemas` (introduced in #19347) is only considered when dumping schema in a `:sql` format. This PR fixes that by considering it also when dumping in a `:ruby` format.",fatkodima,User,2,activerecord,needs feedback,,,,,,,
https://api.github.com/repos/rails/rails/issues/50018,10229505,50018,test: update karma npm from 3.1.4 to 6.4.2,open,4,2023-11-11 14:53:27+00:00,2024-01-05 11:21:49+00:00,,"### Motivation / Background

[karma](https://www.npmjs.com/package/karma) npm package, used in actioncable and actionview, has been stale.

karma 3.x was stable in 2018, but 6.x is now the latest.

This Pull Request has been created because Rails developers are to use the latest karma and latest Node.js (20 LTS or 21).

### Detail

This Pull Request updates karma package from 3.1.4 to 6.4.2, which prevents from using `chokidar@2` (or `fsevents@1`).

### Additional information

The package was introduced in #34440 and #46206. Also this change follows up #49901 (Node.js 20).

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [n/a] Tests are added or updated if you fix a bug or add a feature.
* [n/a] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",tnir,User,0,actionview,actioncable,ready,need rebase,,,,,
https://api.github.com/repos/rails/rails/issues/50014,6979737,50014,Fix order of scope- vs user-derived attribute assignments,open,5,2023-11-10 23:09:28+00:00,2023-12-27 12:50:00+00:00,,"### Motivation / Background

Fixes #26295. It was closed due to the issue becoming stale, not because it was fixed. It never had a satisfactory fix.

### Detail

This Pull Request modifies the order of attribute assignments for associations, e.g. `collection.build` and `build_foo`. Previously, if you were to build a record from an association, the attributes derived from the scope would be applied last. This is problematic when a setter on the model expects those scope values to be present, since they were technically defined first. This has bitten me a few times in a multi-tenant application, requiring a workaround where you supply the scope attributes again in `#build`.

I've tried to make this backwards compatible, by first applying the attributes from the scope via `#scope_for_create`, then applying the provided attributes to `#build` minus foreign keys from `#scope_for_create`, and then finally initializing the record normally.

Here's a small reproduction script of the problem: https://gist.github.com/ezekg/5722f5af2b79061a4f945d49f3ce734b (modified from @heaven's original reproduction script: https://github.com/rails/rails/issues/26295#issuecomment-246189123)

I've written tests that fail without the changes to the `#build_record` method.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",ezekg,User,2,activerecord,needs feedback,,,,,,,
https://api.github.com/repos/rails/rails/issues/50011,41791,50011,Aggregate saved changes for all updates inside of a transaction,open,2,2023-11-10 20:21:35+00:00,2024-01-01 21:24:27+00:00,,"### Motivation / Background

This Pull Request has been created because there is inconsistent behavior with dirty attributes in transaction callbacks when a record is updated multiple times inside of a transaction.

Consider this case:

```ruby
class User < ApplicationRecord
  after_commit :notify_email_changes, if: :email_changed?

  def notify_email_changes
    NotifyEmailChangesJob.perform_later(id)
  end
end
```

This breaks if a record is saved twice in a single transaction.

```ruby
user.transaction do
  user.update!(email: params[:email])
  if user.last_visited_at < 1.day.ago
    user.update!(last_visited_at: Time.now)
  end
end
```

In the case where we update the `last_visited_at` field, the `email_changed?` method will return false since the email address was not changed in the last save operation and `notify_email_changes` method will not be called.

Fixes #49898, #48077

### Detail

This Pull Request changes how `saved_changes` is calculated in transactions when a record is updated multiple times.

After each save operation, the list of saved changes is pushed onto a list. `saved_changes` in an `after_save` callback is unaffected and will show only the changes for that save operation.

Before a transaction is committed, the list of saved changes for all saves in the transaction are merged by reapplying them to the original attributes. Checking `saved_changes` in an `after_commit` callback will use the merged mutation tracker which includes all changes. Checking `saved_changes` outside the transaction after it is committed will also include all changes.

### Checklist

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",bdurand,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50010,2575027,50010,Add `actiontext` bug report template,open,0,2023-11-10 19:28:54+00:00,2023-12-16 15:22:07+00:00,,"### Motivation / Background

Introduce Action Text bug report templates for contributors to reproduce issues with failing `ActionDispatch::SystemTestCase` instances.

### Additional information

**Currently, the template test case fails**

```
Error:
BugTest#test_Action_Text:
NameError: undefined local variable or method `new_articles_path' for #<BugTest:0x0000000135db1e48>
    /Users/seanpdoyle/.asdf/installs/ruby/3.2.0/lib/ruby/gems/3.2.0/bundler/gems/rails-fd20970d6539/actionpack/lib/action_dispatch/system_test_case.rb:185:in `method_missing'
    guides/bug_report_templates/action_text_main.rb:96:in `block in <class:BugTest>'
```

I'm not sure why, but the routing helpers are unavailable to the test case.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
",seanpdoyle,User,0,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50007,1722965,50007,Implement a `:force` option to delete cookies not present in the request,open,1,2023-11-10 18:09:30+00:00,2023-11-10 22:30:37+00:00,,"Implement a :force option to delete cookies not present in the request.

### Motivation / Background

This can be useful if you're trying to delete a cookie that has a path, from a different path, in which case it won't be present in the request and won't be deleted if the option is not passed.

Fixes #49746 

### Detail

This Pull Request adds a `:force` option to `cookies.delete` that skips checking if the cookie is present before marking it for removal.

### Additional information

I initially tried simply removing the guard condition altogether (I gave my rationale for this in the linked Issue), but this broke some `cookies.clear` tests, so I though it should probably be an opt-in behavior through an option.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",zavan,User,0,actionpack,,,,,,,,
https://api.github.com/repos/rails/rails/issues/50000,17757590,50000,`ActiveRecord::Relation#order` supports hash like `ActiveRecord::Relation#where`,open,2,2023-11-10 13:08:53+00:00,2023-12-26 16:36:36+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

`ActiveRecord::Relation` `where` has a nice hash-style interface for forming the `where` clause.
This PR enables a similar style for `order`, while maintaining all existing functionality.

ActiveRecord::Relation can take a hash where keys are table name, value is a hash of key (column name) and value (order direction). For example:

`Topic.includes(:posts).order(posts: { created_at: :desc })`

### Detail
Order can be passed several different arguments today:

a) `Topic.includes(:posts).order('posts.created_at')`
b) `Topic.includes(:posts).order('posts.created_at': :asc)`
c) `Topic.includes(:posts).order('posts.created_at', { follower_count: :desc }, 'posts.user_id desc' )`
d) `Topic.includes(:posts).order('posts.user_id', Post.arel_table[:created_at].desc)`

Each can be written re-written as a more structured hash:

a) `Topic.includes(:posts).order(posts: { created_at: :asc })`
b) `Topic.includes(:posts).order(posts: { created_at: :asc })`
c) `Topic.includes(:posts).order({ posts: { created_at: :asc } }, { topics: { follower_count: :desc } }, { posts: { user_id: :desc } })`
d) `Topic.includes(:posts).order(posts: { user_id: :asc, created_at: :desc })`

Or written in combination with the other existing strategies:

c) `Topic.includes(:posts).order('posts.created_at', { follower_count: :desc }, posts: { user_id: :desc})`
d) `Topic.includes(:posts).order({ posts: { user_id: :asc }}, Post.arel_table[:created_at].desc)`

It will properly reference table-name keys and maintains checks for directional keywords.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",mylesboone,User,5,activerecord,needs feedback,docs,,,,,,
https://api.github.com/repos/rails/rails/issues/49999,17757590,49999,Expect `ActiveRecord::Relation#order` to take `Arel::Attributes::Attribute` and properly `reference` joined table,open,5,2023-11-10 13:08:51+00:00,2023-11-24 09:30:02+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
Topic.includes(:posts).order(Post.arel_table[:created_at])
```

### Expected behavior
<!-- Tell us what should happen -->
```ruby
Topic.includes(:posts).order(Post.arel_table[:created_at])
# SELECT ""topics"".""id"" AS t0_r0...""posts"".""id"" AS t1_r0...FROM ""topics"" LEFT OUTER JOIN ""posts"" ON ""posts"".""topic_id"" = ""topics"".""id"" ORDER BY ""posts"".""created_at""
```

### Actual behavior
<!-- Tell us what happens instead -->
```ruby
Topic.includes(:posts).order(Post.arel_table[:created_at])
# SELECT ""topics"".* FROM ""topics"" ORDER BY ""posts"".""created_at""
# ActiveRecord::StatementInvalid: PG::UndefinedTable: ERROR:  missing FROM-clause entry for table ""posts""
```

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
",mylesboone,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/49992,16284954,49992,Warn unclarity filed if joined table has multiple fields with same name.,open,2,2023-11-10 03:42:57+00:00,2023-12-26 16:38:25+00:00,,"### Motivation / Background

this enhancement prevents an unintentional human error by developers.
this change helps to avoid a problem column name shadowing when `select('*')`with joined tables containing same column names.

### Detail

assume that you have models and records like this.
```ruby
class Post < ApplicationRecord
  scope :sort_by_station_matching, lambda { |near_station_ids|
    select('*')
      .select(""(#{select_near_station_match_count_query(near_station_ids)}) AS near_station_match_count"")
  }
  
  def select_near_station_match_count_query(railway_station_ids = [])
    return 'SELECT 0' if railway_station_ids.blank?
  
    <<~SQL.squish
      SELECT COUNT(stations.id)
      FROM stations
      WHERE stations.railway_station_id IN (#{railway_station_ids.join(',')})
    SQL
  end
end
```

posts table
id|created_at|updated_at
--|--|--
1|2023-08-03 14:30:23.040019000|2023-08-03 14:30:23.040019000

comments table
id|post_id|created_at|updated_at
--|--|--|--
2|1|2023-08-03 14:30:23.040019000|2023-08-03 14:30:23.040019000

then, the id field of the instance of post model got with joins method has unexpected value. 
```ruby
Post.joins(:comments).sort_by_station_matching.first
```

expected
```
#<User:0x0000000114db6388
 id: 1,
 near_station_match_count: 3,
 created_at:
  Thu, 03 Aug 2023 14:30:23.040019000 UTC +00:00,
 updated_at:
  Thu, 03 Aug 2023 14:30:23.040019000 UTC +00:00>
```

actual
```
#<User:0x0000000114db6388
 id: 2,
 near_station_match_count: 3,
 created_at:
  Thu, 03 Aug 2023 14:30:23.040019000 UTC +00:00,
 updated_at:
  Thu, 03 Aug 2023 14:30:23.040019000 UTC +00:00>
```

expected is `id: 1` from posts record but actual is `id: 2` from comments record .

at first, I thought this is a bug.
but, after more research understood that this is cause a column name shadowing.
this warning will help other developers.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",KessaPassa,User,0,activerecord,needs feedback,,,,,,,
https://api.github.com/repos/rails/rails/issues/49990,496367,49990,Let ActiveStorage::Blob#open return a tempfile for manual unlinking,open,1,2023-11-09 18:25:15+00:00,2024-01-09 16:58:18+00:00,,"### Motivation / Background

Wrapping code in a block is not always possible, this way it behaves more like stdlib Tempfile that can be unlinked manually.

### Additional information

Tempfile.create is recommended over Tempfile.new/open per the documentation: https://docs.ruby-lang.org/en/3.2/Tempfile.html

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",bdewater,User,0,needs feedback,activestorage,,,,,,,
https://api.github.com/repos/rails/rails/issues/49983,864340,49983,Azure storage service dependency `azure-storage-blob` deprecated,open,2,2023-11-09 13:51:38+00:00,2023-11-24 11:29:07+00:00,,"### Steps to reproduce

1. Create a rails app
2. Within the Gemfile, add the following:
```
gem ""azure-storage-blob"", ""~> 2.0"", require: false
gem ""faraday"", ""~> 2.0""
```
3. Run `bundle --verbose`
4. See error

### Expected behavior
I would expect Rails applications to support newer versions of the Faraday gem because it is a popular dependency for many other gems that deal with HTTP requests.

Example gems that have this dependency:
- `json-jwt`
- `oauth2` (also works with Faraday version 1)
- `openid_connect`
- `rack-oauth2`
- `swd`
- `webfinger`

### Actual behavior
With any other dependency that relies on Faraday version 2 or above, the Azure storage cannot be used as instructed in the Active Storage documentation.

The Azure storage's dependency `azure-storage-blob` is deprecated as pointed out in the README of the project:
https://github.com/Azure/azure-storage-ruby

This means that [fixes that would solve the issue](https://github.com/Azure/azure-storage-ruby/pull/228) are not getting merged in a timely manner and the gem has to be forked in order to apply the necessary changes making it harder to maintain the dependencies.

### System configuration
**Rails version**: 6.1 (applies also to version 7)

**Ruby version**: 3.0.6
",ahukkanen,User,1,third party issue,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49982,1558372,49982,Support enum definition with symbol values,open,0,2023-11-09 11:41:55+00:00,2024-01-06 22:26:55+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created because Enum definition with symbol values are not correctly typed_casted
reported here: https://github.com/rails/rails/issues/49981

Fixes #49981

### Detail
When an enum is defined with symbol values
`enum :status, { draft: :draft, published: :published }`
a warning or an exception could be raised to force fixing, same kind as invalid enum definition.
Not sure this is the correct approach since the value is correctly persisted.

I'd expect the enum symbol value to be converted to string to allow correct type_cast.

**Actual behavior**

the type_cast of a symbol value of an enum is always returning nil.

### Additional information


### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",jean-francois-labbe,User,1,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49981,1558372,49981,Enum definition with symbol values are not correctly typed_casted,open,0,2023-11-09 11:37:24+00:00,2023-11-10 12:17:54+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string :status
  end
end

class Post < ActiveRecord::Base
  has_many :comments
  enum :status, { draft: :draft, published: :published }
end

class BugTest < Minitest::Test
  def test_enum_symbol_value_definition_returns_nil_when_accessed_on_record
    post = Post.create!(status: :draft)
    assert_equal 'draft', post.status
    # Failure:
    # BugTest#test_enum_symbol_value_definition_returns_nil_when_accessed_on_record [rails_enum_symbol_value_issue.rb:36]:
    # Expected: ""draft""
    #  Actual: nil
  end

  def test_enum_symbol_value_definition_breaks_predicates
    post = Post.create!(status: :draft)
    assert post.draft?
    # Failure:
    # BugTest#test_enum_symbol_value_definition_breaks_predicates [rails_enum_symbol_value_issue.rb:41]:
    # Expected false to be truthy.
  end

  def test_enum_symbol_value_definition_is_correclty_saved_in_database
    post = Post.create!(status: 'draft')
    assert_equal 'draft', post.attributes_before_type_cast['status']
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->
When an enum is defined with symbol values
  `enum :status, { draft: :draft, published: :published }`
a warning or an exception could be raised to force fixing, same kind as invalid enum definition.
Not sure this is the correct approach since the value is correctly persisted.

I'd expect the enum symbol value to be converted to string to allow correct type_cast.

### Actual behavior
<!-- Tell us what happens instead -->
the type_cast of a symbol value of an enum is always returning `nil`.

### System configuration
**Rails version**: main (60d05cd)

**Ruby version**: 3.2.2
",jean-francois-labbe,User,0,activerecord,attached PR,With reproduction steps,,,,,,
https://api.github.com/repos/rails/rails/issues/49966,28561,49966,Add note for `method` argument in `button_to` in js guide,open,0,2023-11-08 11:01:42+00:00,2023-11-08 17:59:14+00:00,,"This section describes replacing UJS attributes with Turbo.
For example replacing `method` with `turbo_method`.
However, for `button_to` `method` should not be replaced with `turbo_method`,
as it's unrelated to UJS.
This could avoid some confusion.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",p8,User,0,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49964,19525237,49964,Add info to Testing Guide on filtering Rails tests [ci skip],open,2,2023-11-08 03:51:16+00:00,2023-11-10 21:03:48+00:00,,"- how Minitest works and names tests
- how to use `--name` and `--exclude` in a Rails app

### Motivation / Background

This Pull Request has been created because the testing guide isn't clear on how to filter Rails tests. Technically this is a minitest documentation issue but I've tried to tie it in with how Rails testing works.

### Checklist

* [x] This Pull Request is related to one change
* [x] Commit message has a detailed description of what changed and why
* [ ] ~~Tests are added or updated if you fix a bug or add a feature~~
* [ ] ~~CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature~~
",matt17r,User,1,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49961,1825135,49961,"net.get(""/"") hangs in Rails::Engine::CommandsTest test_server_command_broadcast_logs",open,2,2023-11-08 01:37:19+00:00,2023-11-08 19:58:39+00:00,,"### Steps to reproduce
cd railties
bin/test test/engine/commands_test.rb:62

### Expected behavior
test should execute

### Actual behavior
test hangs on line 68
net.get(""/"")
I can see that the process with pid is running, but it doesn't seem to be reachable. I think I must have a system configuration issue but I don't know how to resolve it..

### System configuration
Apple M2 Pro
MacOs 13.6

**Rails version**:7.2.0.alpha

**Ruby version**: 3.2.2
",fredwillmore,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49956,44398,49956,[Fix #49104] Add server response (xhr) to direct-upload:error event.,open,0,2023-11-07 21:02:13+00:00,2023-12-26 17:55:29+00:00,,"### Motivation / Background

Fixes #49104

This Pull Request has been created because ActiveStorage's javascript does not provide access to the server response for error messaging when an error occurs during a direct upload.

This is a problem because we cannot distinguish between an upload failing due to authorization or the file being too large or any other validation error.

### Detail

This Pull Request changes the error event to include the `xhr` object so that the server response is accessible to error handling code. This allows us to display the specific issues that caused the upload to be rejected such as:
- You must be an admin to upload this file.
- File must be less than 100MB.
- Uploading .exe files is not permitted.

Before:
```javascript
addEventListener(""direct-upload:error"", event => {
  event.preventDefault()
  const { id, error } = event.detail
  const element = document.getElementById(`direct-upload-${id}`)
  element.classList.add(""direct-upload--error"")
  element.setAttribute(""title"", error)
})
```

After:
```javascript
addEventListener(""direct-upload:error"", event => {
  event.preventDefault()
  const { id, error, xhr } = event.detail
  const element = document.getElementById(`direct-upload-${id}`)
  const errorMessage = xhr.response['error'] // Example: File size must be less than 100MB
  element.classList.add(""direct-upload--error"")
  element.setAttribute(""title"", errorMessage)
})
```

### Additional information

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature. **Are there tests for the javascript code? If so, where?**
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanabrahams,User,0,needs feedback,activestorage,,,,,,,
https://api.github.com/repos/rails/rails/issues/49953,1265430,49953,Unable to combine in_order_of with distinct while using postgresql,open,6,2023-11-07 16:19:45+00:00,2023-11-15 07:55:11+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
We have a list of records with the preferred status order and joins leading to no-unique results. As a result, we want to combine `in_order_of` with `distinct`. This works fine with `mysql` and `sqlite` but fails on `postgresql`

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  # gem ""sqlite3""
  gem ""pg""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
# ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.establish_connection(
  adapter: 'postgresql',
  encoding: 'unicode',
  # host: ENV.fetch(""POSTGRES_HOST"", ""127.0.0.1""),
  # port: ENV.fetch(""POSTGRES_PORT"", 5432),
  database: 'rails_dev'
)
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :users, force: true do |t|
    t.string :state
  end
end

class User < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_distint_with_in_order_of
    User.create! state: ""a""
    User.create! state: ""b""
    User.create! state: ""c""

    result = User.in_order_of(:state, [""c"", ""a"", ""b""]).distinct
    assert_equal [""c"", ""a"", ""b""], result.map(&:state)
  end
end

```

### Expected behavior
<!-- Tell us what should happen -->
Unique records returned in defined order

### Actual behavior
<!-- Tell us what happens instead -->
```
Error:
BugTest#test_distint_with_in_order_of:
ActiveRecord::StatementInvalid: PG::InvalidColumnReference: ERROR:  for SELECT DISTINCT, ORDER BY expressions must appear in select list
LINE 1: ...WHERE ""users"".""state"" IN ('c', 'a', 'b') ORDER BY CASE WHEN ...
                                                             ^

    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:896:in `exec_params'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:896:in `block (2 levels) in exec_no_cache'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:1031:in `block in with_raw_connection'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activesupport/lib/active_support/concurrency/null_lock.rb:9:in `synchronize'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:1003:in `with_raw_connection'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:895:in `block in exec_no_cache'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activesupport/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:1141:in `log'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:894:in `exec_no_cache'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:874:in `execute_and_clear'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:61:in `internal_exec_query'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:628:in `select'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:71:in `select_all'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:114:in `select_all'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/querying.rb:62:in `_query_by_sql'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/relation.rb:983:in `block in exec_main_query'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/relation.rb:1003:in `skip_query_cache_if_necessary'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/relation.rb:969:in `exec_main_query'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/relation.rb:947:in `block in exec_queries'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/relation.rb:1003:in `skip_query_cache_if_necessary'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/relation.rb:941:in `exec_queries'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/relation.rb:727:in `load'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/relation.rb:264:in `records'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/relation/delegation.rb:99:in `each'
    distinct-in_order_of-postgresql-bug.rb:53:in `map'
    distinct-in_order_of-postgresql-bug.rb:53:in `test_distint_with_in_order_of'
```
The ugly solution right now is to add dedicated select section:

```ruby
User
  .select(""users.*, CASE WHEN users.state = 'c' THEN 1 WHEN users.state = 'a' THEN 2 WHEN users.state = 'b' THEN 3 END"")
  .in_order_of(:state, [""c"", ""a"", ""b""]).distinct
```
But it is fragile and can change even when updating between bug fix rails release (e.g. https://github.com/rails/rails/pull/45670 introduced in rails 7.0.7)


### System configuration
**Rails version**:
Tested from `7.0.5` till `main`

**Ruby version**:
Tested with ruby `3.2.1`",mkasztelnik,User,1,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/49946,4071096,49946,Rename primary shard to default within documentation,open,0,2023-11-07 04:04:42+00:00,2023-12-26 17:57:39+00:00,,"### Motivation / Background

Hi everyone!

I've [come across a problem](https://github.com/rails/rails/issues/49896) despite following the instructions for setting up sharding as outlined in the documentation. The trouble arose from a discrepancy where the documentation states that the ""primary"" database should be used by default. However, in reality, the ""default"" database is what's utilized. I believe this is somewhat misleading, so I've decided to make a correction in the documentation.

### Detail

Replaced ""primary"" to ""default"" to avoid misleading


### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",frostmark,User,0,docs,needs work,,,,,,,
https://api.github.com/repos/rails/rails/issues/49930,5657035,49930,Fix sqlite3 dropping database with bad permissions test,open,7,2023-11-05 20:57:47+00:00,2023-12-26 18:02:16+00:00,,"Fixes #49928.

It fails here https://github.com/rails/rails/blob/febd21da3438d190f0c6ce296a114baee983d1e1/activerecord/lib/active_record/railties/databases.rake#L19 when trying to create a new connection down the road because of this recent change https://github.com/rails/rails/blob/febd21da3438d190f0c6ce296a114baee983d1e1/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb#L762 which tries to create WAL files.

We can ignore checking protected environments by setting an ENV variable, see https://github.com/rails/rails/blob/febd21da3438d190f0c6ce296a114baee983d1e1/activerecord/lib/active_record/tasks/database_tasks.rb#L65-L71
",fatkodima,User,0,railties,needs feedback,,,,,,,
https://api.github.com/repos/rails/rails/issues/49928,1825135,49928,"Test fails expecting ""Couldn't drop"" to match output from rails(""db:drop"")",open,0,2023-11-05 17:48:59+00:00,2023-11-06 12:55:50+00:00,,"### Steps to reproduce
cd railties
bin/test test/application/rake/dbs_test.rb:271
on line 274-5: the test is expecting the output from the rails(""db:drop"") command to contain the string ""Couldn't drop"", but the output is 
bin/rails aborted!
ActiveRecord::StatementInvalid: SQLite3::ReadOnlyException: attempt to write a readonly database

### System configuration
Apple M2 Pro
Macos 13.6

**Rails version**: 7.2.0

**Ruby version**: 3.2.2
",fredwillmore,User,0,railties,attached PR,With reproduction steps,,,,,,
https://api.github.com/repos/rails/rails/issues/49926,5016246,49926,`db:schema:dump` ignores `ActiveRecord.dump_schemas`,open,1,2023-11-05 13:08:43+00:00,2023-11-24 09:09:30+00:00,,"### The issue

ActiveRecord's `db:structure:dump` is using `PostgreSQLDatabaseTasks#stucture_dump` https://github.com/rails/rails/blob/febd21da3438d190f0c6ce296a114baee983d1e1/activerecord/lib/active_record/tasks/postgresql_database_tasks.rb#L47-L55 and correctly dumps only specified schemas since https://github.com/rails/rails/commit/7ab36f4532c891e8a4bdaee8924a197311ff25ff and is using `db_config.configuration_hash` for that since https://github.com/rails/rails/commit/4ee9dab316296ee96629f2bffbab756a163d1b49

On the other hand, `db:schema:dump` is using more abstract `SchemaDumper::Dump` https://github.com/rails/rails/blob/febd21da3438d190f0c6ce296a114baee983d1e1/activerecord/lib/active_record/schema_dumper.rb#L44-L47 and does not respect this configuration and will always dump all `current_schemas` that are available to the Postgres db user, according to https://github.com/rails/rails/blob/febd21da3438d190f0c6ce296a114baee983d1e1/activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb#L1092

---

I'm happy to open a PR as I've invested some time researching this, but need a direction on how to better approach this.
I believe, we should obtain the `db_config.configuration_hash` in the `dump` method and pass it down to this last linked piece of code to resolve an array of schemas to use instead of `""ANY (current_schemas(false))""`

`dump` already accepts a config, but it is of a different type. There was a recent refactor https://github.com/rails/rails/commit/9f82fb3f63015bbbd643bc624a49d98e97803681 that added support for passing generalized config to the `dump` method, but it is expecting an `ActiveRecord::Base` instance to resolve table name prefix and suffix, while the db_config is agnostic to that.

What would be the best approach here? Is this even an issue we should address?

P.S. I apologize for the lack of runnable tests.

---

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2

**Database adapter**: Postgres",mcfoton,User,0,activerecord,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/49903,46098928,49903,Compress large payloads in the Action Cable PostgreSQL adapter,open,6,2023-11-03 15:16:47+00:00,2024-01-12 15:36:47+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

The [PostgreSQL notify command](https://www.postgresql.org/docs/16/sql-notify.html) has a limit of 8000 bytes, which means that the payload that can be broadcasted cannot be very large.

This is motivated by the simplicity of the solution and by leaving the Redis dependency, along the same lines of Solid Cache and Solid Queue.

### Detail

Payloads that are larger than 8000 bytes are now compressed with ActiveSupport::Gzip.

```yaml
production:
  adapter: postgresql
  channel_prefix: appname_production
```

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

In the tests you can see a rather large string that can now be broadcasted with the PostgreSQL adapter.

Additionally, I've added the `ActionCable::SubscriptionAdapter::Compressor` class so other adapters can make use of it in the future.

There is another approach and another discussion in #49634.

Thanks to @palkan for the idea in this [comment](https://github.com/rails/rails/pull/49634#issuecomment-1765096837).

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",brunoprietog,User,0,docs,actioncable,,,,,,,
https://api.github.com/repos/rails/rails/issues/49899,4910785,49899,[ci skip] Simplify and sync url_for options docs,open,0,2023-11-02 21:54:47+00:00,2023-11-04 03:01:45+00:00,,"### Motivation / Background

I got confused by all the supported options of `ActionView::RoutingUrlFor#url_for`, because it listed an incomplete list of options under the `==== Options` section. I know that if I had read the general description carefully, I would have seen the reference to `ActionDispatch::Routing::UrlFor#url_for` 🤦, but I just looked at the options.

I think it would be clearer to directly link to the more complete list of options, similar to what other `==== Options` sections do in various other places. Furthermore this also means that we don't need to maintain two separate lists of options, making the docs more complete with less code.

One downside would be the additional click required to get to the options. If you think this is not optimal, I'd be happy to sync both options lists.",codergeek121,User,0,actionpack,actionview,,,,,,,
https://api.github.com/repos/rails/rails/issues/49898,342081,49898,`saved_changes` can be empty after persisting changes on a model,open,1,2023-11-02 19:04:14+00:00,2023-11-02 19:08:42+00:00,,"### Steps to reproduce

If an `Account` belongs to a `Supplier`, and a `Supplier` has one `Account`, there are cases where calling `account.save` then inspecting `account.saved_changes` leads to an empty result of `{}`, even if changes have actually been made.

Code that attempts to do something based on `saved_changes`, such as record an audit event, will incorrectly act as if no changes were made.

For example, this happens when building a new `supplier` associated with the `account`:

```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :suppliers, force: true do |t|
    t.string :name
  end

  create_table :accounts, force: true do |t|
    t.integer :supplier_id
    t.string :name
  end
end

class Supplier < ActiveRecord::Base
  has_one :account
end

class Account < ActiveRecord::Base
  belongs_to :supplier, optional: true
end

class BugTest < Minitest::Test
  def test_saved_changes_using_existing_child_with_build
    Account.destroy_all
    Supplier.destroy_all

    account = Account.create!(name: ""initial account name"")
    account.build_supplier(name: ""initial supplier name"")
    account.name = ""updated account name""

    account.save!

    # Fails, `saved_changes` is unexpectedly empty.
    assert_equal account.saved_changes, { ""name"" => [""initial account name"", ""updated account name""] }
  end

  def test_saved_changes_using_existing_child_with_assignment
    Account.destroy_all
    Supplier.destroy_all

    account = Account.create!(name: ""initial account name"")
    account.supplier = Supplier.new(name: ""initial supplier name"")
    account.name = ""updated account name""

    account.save!

    # Fails, `saved_changes` is unexpectedly empty.
    assert_equal account.saved_changes, { ""name"" => [""initial account name"", ""updated account name""] }
  end

  def test_saved_changes_using_new_records_saving_via_child
    Account.destroy_all
    Supplier.destroy_all

    account = Account.new(name: ""initial account name"")
    supplier = Supplier.new(name: ""initial supplier name"")
    account.name = ""updated account name""
    account.supplier = supplier

    account.save!

    assert_predicate supplier.saved_changes, :present?
    # Fails, `saved_changes` is unexpectedly empty.
    assert_predicate account.saved_changes, :present?
  end
end
```

### Expected behavior

`account.saved_changes` should reflect the changes that were saved.

### Actual behavior

`account.saved_changes` is empty.

### System configuration
**Rails version**: 7.0.8, 7.1.1, and `main` as of a6099ed2b7a544d8fe67688e8a0f9237847404ee

**Ruby version**: 3.2.2",aprescott,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/49897,1907408,49897,add a note on the postgres limit [ci skip],open,4,2023-11-02 17:53:47+00:00,2023-11-24 08:28:23+00:00,,"### Motivation / Background
Now more than before, with the upcoming Solid Queue, developers might not want to have Redis as a dependency.

The PostgreSQL adapter for ActionCable plays an important role on this transition, allowing people to transmit data over the database.

One limitation needs to be considered though, PostgreSQL [has a 8000 bytes limit](https://www.postgresql.org/docs/current/sql-notify.html) on `NOTIFY`.

This PR documents that and links a possible solution: the [actioncable-enhanced-postgresql-adapter](https://github.com/reclaim-the-stack/actioncable-enhanced-postgresql-adapter) gem.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",glaucocustodio,User,0,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49896,4071096,49896,Cannot make query to db within migration,open,13,2023-11-02 17:32:55+00:00,2023-11-07 14:32:57+00:00,,"Hello! I'm upgrading rails from 7.0 to 7.1 and got some problems with migrations

### Steps to reproduce
When I'm trying to get records from db within migration it freezes and does nothing. (I guess something related with transaction and isolation level here, but not sure)
```ruby
# frozen_string_literal: true

class SomeMigration < ActiveRecord::Migration[7.1]
  def change
    add_reference :files, :asset, foreign_key: true

    File.all.each do |f| # <- Freezes here and does nothing
      f.update(asset_id: f.folder.asset_id)
    end
  end
end

```

### Expected behavior
Can make query within migration file

### Actual behavior
Query doesn't work

### System configuration
Rails 7.1.1

ruby 3.2.2
",frostmark,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49895,299102,49895,"ActiveRecord objects created with explicit attribute values in ""new"" or ""build"" create unexpected rows if DB column defaults change",open,2,2023-11-02 15:57:02+00:00,2023-11-03 09:13:07+00:00,,"Under some circumstances (viz, during rolling deploys), an explicit `new` or `build` value can be ignored when creating an ActiveRecord resource if that attribute has a column default that is changing during the deploy.

ie:
```ruby
widget = Widget.new(size: 'small')
widget.size # ""small""
widget.tap(&save!).reload.size # ""large""

# And for associations:

sprocket = Widget.new.sprockets.build(material: 'steel')
sprocket.material # ""steel""
sprocket.tap(&save!).reload.material # ""copper""
```

For this to happen the column needs to have a column `default` value in the DB, and that value should change ""under"" the ruby process.

I have made a single ruby file demonstration for this (below).

### Steps to reproduce
1. Create a table with a column with a default value.
2. Have ActiveRecord code that creates resources for that table using `new` for root objects or `build` for associations, which pass in a value for that column *which is the same as the column default value* (crucial).
3. Do a rolling deploy which changes the default value of the DB column in a migration
4. For the rest of the rolling deploy, any older boxes (and/or non canary boxes) will create rows with unexpected data.

### Expected behavior
If you pass in an explicit value for an attribute, it should be used, no matter what the `default` of the DB column is, even if it changes while the ruby process is running.

### Actual behavior
If the value explicitly used is the same as the DB column default *when the Rails/AR process started* then it will not be sent to the DB, and the table will contain unexpected data.

### Thoughts

I believe it is somewhat obvious what is happening here...

1. Make a column with default ""foo""
2. When creating an AR object with explicit value ""foo"", the AR object treats that value as ""not dirty"",
    so does not send it to the DB
3. If the DB default has changed in the meantime, that new value will be the one that is used in the DB row.

Note, a corollary to all of this is if you specify no value at all, you will still get an unexpected change in value after saving and reloading. But this is slightly more ""believable"". It is when you explicitly supply a value and it is ignored that is more unexpected.

Could a resolution to all this be to treat attributes of AR objects that are set to the column default to be ""dirty"" so they are sent to the DB?

### Example code

I have used postgres to allow `ALTER COLUMN`, so start one with:

`docker run -p 5430:5432 -e POSTGRES_PASSWORD=postgres postgres:14.7`

Then run:

```ruby
# This code demonstrates that under some circumstances ActiveRecord will ignore an explicit value
# passed into a `build` or `new` method. This is because ActiveRecord will use the default value
# from the database if it thinks the value is the default value.

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'activerecord', '7.1'
  gem 'pg', '1.4.6'
  gem 'colorize'
end

require ""active_record""

# Start a postgres on 5430
# docker run -p 5430:5432 -e POSTGRES_PASSWORD=postgres postgres:14.7

# Establish a database connection
ActiveRecord::Base.establish_connection(
  adapter: 'postgresql',
  database: 'postgres',
  host: 'localhost', # Change this to your PostgreSQL host
  port: 5430,
  username: 'postgres', # Change this to your PostgreSQL username
  password: 'postgres'  # Change this to your PostgreSQL password
)

begin
  ActiveRecord::Base.connection.execute(""DROP TABLE widgets"")
  ActiveRecord::Base.connection.execute(""DROP TABLE sprockets"")
rescue ActiveRecord::StatementInvalid
  # First run time
end

class Widget < ActiveRecord::Base
  has_many :sprockets
end

class Sprocket < ActiveRecord::Base
  belongs_to :widget
end

ActiveRecord::Schema.define do
  create_table :widgets do |t|
    t.string :size, default: 'small'
  end

  create_table :sprockets do |t|
    t.belongs_to :widget, index: true
    t.string :material, default: 'steel'
  end
end

def debug(type, widget, expected)
  colour = widget.size == expected ? :green : :red
  puts ""#{type} initialized size: "" + widget.size.colorize(colour)
  widget.tap(&:save!).reload
  colour = widget.size == expected ? :green : :red
  puts ""#{type} saved and reloaded size: "" + widget.size.colorize(colour)
end

# Tests
debug(""Widget.new"", Widget.new, ""small"")
debug(""Widget.new(size: 'medium')"", Widget.new(size: 'medium'), ""medium"")

# Crucially we must make the ruby process load the column information for sprockets before
# change the column defaults. It doesn't matter what the ""material"" value is here.
Widget.new.sprockets.build(material: 'manganese').save!

puts ""***""
puts ""Now we change the defaults in the DB to 'large' and 'copper' without restarting the ruby process""
puts ""***""

# Use ActiveRecord connection to execute an SQL command to change the defaults in the DB.
# Note, after this command old ruby processes (say older boxes during a rolling deploy) are
# unaware of this change.
ActiveRecord::Base.connection.execute(""ALTER TABLE widgets ALTER COLUMN size SET DEFAULT 'large'"")
ActiveRecord::Base.connection.execute(""ALTER TABLE sprockets ALTER COLUMN material SET DEFAULT 'copper'"")

# I am not specifying anything, so the ruby will think the value will be ""small"" (and it is, in memory).
# After the `reload` the ruby process will see the value is ""large"" in the DB, so it will change to that.
debug(""Widget.new"", Widget.new, ""large"")
# I am definitely specifying small, but it is being ignored after reload. This is because AR
# can see the value is what (it thinks is) the DB default, so it is not sending it to the DB.
debug(""Widget.new(size: 'small')"", Widget.new(size: 'small'), ""small"")
# I am definitely specifying medium (which is not the old DB default), and it is being respected
debug(""Widget.new(size: 'medium')"", Widget.new(size: 'medium'), ""medium"")

puts ""***""
puts ""Now show how relations have the wrong default, even when it is specified in the build method""
puts ""***""

# This shows that relations do not use the attribute passed into the build method if it is what
# the running ruby process thinks is the DB default
sprocket = Widget.new.sprockets.build(material: 'steel') # I am specifying this should definitely be steel
sprocket.tap(&:save!).reload
puts ""sprocket.material should be steel: "" + sprocket.material.colorize(:red)

```

Results:

![image](https://github.com/rails/rails/assets/299102/1c4dd9c7-01b4-4898-a257-c1bfb47b9502)


### System configuration
**Rails version**: 6.1, 7.0, 7.1 (at least, maybe versions prior too)
**Ruby version**: 3.1.3 (but probably more)

",hlascelles,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/49894,473530,49894,Don’t ignore X-Forwarded-For IPs with ports attached (again),open,0,2023-11-02 14:32:06+00:00,2023-12-26 17:23:46+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created because I'd like to merge #39134 again, which was reverted due to Rack versions compatibility.

### Detail

This Pull Request doesn't ignore X-Forwarded-For IPs with ports attached, e.g. `3.4.5.6:1234` or `[fe80:0000:0000:0000:0202:b3ff:fe1e:8329]:3000`, in the `ActionDispatch::RemoteIp` middleware. For details, see the description in #39134 (thanks to @duncanjbrown).

I've cherry-picked the commit <https://github.com/rails/rails/pull/39134/commits/c2077c850715b359a24a6b083d2e042565587c52> and modified partially for the latest Rails code (added a test case for IPv6, too).

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

I believe there is no longer a compatibility issue because:

- the latest `actionpack` gem requires Rack 2.2.4 or later,
  https://github.com/rails/rails/blob/bbc6230ae7a708750a9bc14102bd4627ba85cd1a/actionpack/actionpack.gemspec#L40
- Rack 2.2.x series have supported the `Rack::Request#forwarded_for` API:
  https://github.com/rack/rack/blob/v2.2.1/lib/rack/request.rb#L330

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",ybiquitous,User,3,actionpack,needs feedback,,,,,,,
https://api.github.com/repos/rails/rails/issues/49893,7312369,49893,Move method `#processed?` to public for Variant(WithRecord) and Preview.,open,2,2023-11-02 11:49:05+00:00,2023-12-26 17:26:57+00:00,,"### Motivation / Background

Sometimes we need to know if variant is ready or not, without triggering the transform.

```ruby
variant.processed? ? variant.image : original_attachment
```

### Detail

This Pull Request exposes `#processed?` check for ActiveStorage::Variant(WithRecord) to public.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change.
* [x] Commit message has a detailed description of what changed and why.
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] Minor bug fixes and documentation changes should not be included.
",balbesina,User,0,needs feedback,activestorage,,,,,,,
https://api.github.com/repos/rails/rails/issues/49889,96156234,49889,Render URLs without numbers for singular resource routes,open,5,2023-11-01 21:06:08+00:00,2023-12-26 17:26:38+00:00,,"This fix allows the `polymorphic_method` in the `HelperMethodBuilder` class in `polymorphic_routes.rb` discern whether or not a singular resource is being passed into it.  If it finds a singular resource it will pass in `format: nil` to the options so that we can have an edited object using the patch method get sent to the proper URL instead of appending a period and number to the end. I believe this is a better implementation than my first try. This works for nested and non nested routes utilizing `resource`


The current bug behavior in 7.1:
```Ruby
Started PATCH ""/author.1"" for ::1 at 2023-10-12 15:03:31 -0400
```

This fix corrects this to:
```Ruby
Started PATCH ""/author"" for ::1 at 2023-10-12 15:03:31 -0400
```

Fixes #49604

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",paulreece,User,1,actionpack,needs feedback,,,,,,,
https://api.github.com/repos/rails/rails/issues/49887,99301559,49887,Fix issue with defined?(cookies) returning nil in view context in Rails 7+/Ruby 3+,open,1,2023-11-01 18:11:53+00:00,2023-11-02 21:42:14+00:00,,"
<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created in order to fix #49877.

### Detail

This Pull Request modifies the controller_helper.rb code to remove cookies from the delegation list. The reason is that helper_method already defines cookie for Action View.
### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",mguan2020,User,0,actionview,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49883,10928518,49883,Consolidate FormBuilder into a single file,open,2,2023-11-01 10:46:12+00:00,2023-12-26 17:31:56+00:00,,"### Motivation / Background

Currently, the `FormBuilder` class is defined in the `FormHelper` class and then reopened and complemented in the `FormOptionsHelper` and `DateHelper` classes.

This PR has been created because understanding all the moving pieces for `FormBuilders`, `FormHelpers`, `DateHelpers`  and `FormOptionHelpers` becomes increasingly hard when classes are created and reopened in multiple places. Consolidating it into a single file makes it easier to understand the breadth and purpose of the class.

There are other occasions where reopening the class is inevitable or necessary, for example, when `ActionText` (a separate component of Rails) does it.

This PR is part of a larger effort to cleanup and modernise this section of the codebase to [hopefully bring in newer abstractions to it](https://discuss.rubyonrails.org/t/proposal-actionview-attributebuilders-for-formbuilders/84072/8). See https://github.com/rails/rails/pull/48574 for a previous PR with the same purpose.

### Detail

This Pull Request:
1. Moves the `FormBuilder` class from the `form_helper.rb` file into its own file. It is kept under the same namespace: `Actionview::Helpers`
2. Move the reopened `FormBuilder` class methods in the `form_options_helper.rb` file into the new `form_builder.rb` file.
3.  Move the reopened `FormBuilder` class methods in the `date_helper.rb` file into the new `form_builder.rb` file. 

This makes it so `_helper` classes have **only helpers** and the `form_builder` class consolidates it all.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
",pinzonjulian,User,3,needs feedback,actionview,,,,,,,
https://api.github.com/repos/rails/rails/issues/49877,5453384,49877,Rails 7+ / Ruby 3+  defined?(cookies) returns nil in view context,open,11,2023-10-31 22:17:31+00:00,2024-01-31 16:37:32+00:00,,"Hello!
I faced this behavior on the working app after upgrading Ruby to 3.1 and Rails to 7.0.7.
Initially, I thought it could be something with configs, patches, etc. of the app but found nothing.
I created a brand-new app and was able to reproduce the issue. 

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
- add `debugger` to controller
- add `<% debugger %>` to view
- run the server, open the view and check the debugger console

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

### Expected behavior
Expected console output
Controller/View
```ruby
(ruby) defined? cookies
""method""
(rdbg) cookies
#<ActionDispatch::Cookies::CookieJar:...
 @committed=false,
 @cookies=
...
```

### Actual behavior
Actual console output
Controller
```ruby
(ruby) defined? cookies
""method""
(rdbg) cookies
#<ActionDispatch::Cookies::CookieJar:0x0000000111df6878
 @committed=false,
 @cookies=
...
(ruby) cookies.object_id
33860
```
View 
```ruby
(ruby) defined? cookies
nil
(rdbg) cookies
#<ActionDispatch::Cookies::CookieJar:0x0000000111df6878
 @committed=false,
 @cookies=
...
(ruby) cookies.object_id
33860
```
Note, that cookies are the same in both controller and view.

### System configuration
**Rails version**: 7.0.8

**Ruby version**: 3.2.2
",Valued,User,0,actionview,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/49854,6014046,49854,Document ActiveJob::Base#logger and #log_arguments,open,1,2023-10-30 20:11:35+00:00,2023-12-26 17:36:40+00:00,,,skipkayhil,User,0,needs feedback,docs,activejob,,,,,,
https://api.github.com/repos/rails/rails/issues/49853,6014046,49853,Avoid calling Headers#env_name when static header,open,0,2023-10-30 19:29:52+00:00,2023-12-18 03:59:26+00:00,,"### Motivation / Background

`env_name` has to transform given strings into the `HTTP_` type headers that are put in the Rack env. This involves at least one String allocation and a few additional transformations performed on the string.

### Detail

This commit avoids the extra allocations/transformations by precomputing some request header strings so that `env_name` can be avoided. The places changed here show up in a basic controller request, but there may be other places that could be changed as well.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",skipkayhil,User,0,actionpack,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49847,54629302,49847,[Fix #48688] Duplicate callback execution when child autosaves parent with `has_one` and `belongs_to`,open,0,2023-10-30 12:39:11+00:00,2023-12-19 09:52:48+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

Fixes https://github.com/rails/rails/issues/48688

### Detail

This Pull Request updates `ActiveRecord::AutosaveAssociation#save_has_one_association` and `ActiveRecord::AutosaveAssociation#validate_single_association` to return early and not re-save the child record via autosave if the inverse association (`belongs_to`) has already set the child target, which happens after the child has been saved.

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

Some additional context in https://github.com/rails/rails/issues/48688#issuecomment-1774942159.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",joshuay03,User,1,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49845,22231095,49845,Field name added in ArgumentError when include_blank is false for a required select field,open,5,2023-10-30 10:11:02+00:00,2023-11-09 05:43:27+00:00,,"### Motivation / Background

As part of this https://github.com/rails/rails/pull/20124, We are raising an `ArgumentError` when `include_blank` is false for a required select field. The message is bit confusing for identifying the issue.

### Detail

This Pull Request includes the field name in the error message.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.

cc: @zzak ",akhilgkrishnan,User,0,actionview,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49842,5657035,49842,Support `uuid` type for MariaDB 10.7.0+,open,2,2023-10-30 01:10:01+00:00,2023-10-31 19:08:57+00:00,,"Fixes #49752.

MariaDB since version 10.7 natively supports [`uuid` data type](https://mariadb.com/kb/en/uuid-data-type/). Also, since 10.5 supports [`INSERT ... RETURNING`](https://mariadb.com/kb/en/insertreturning/).

This PR adds support for `uuid` type for MariaDB only.

MySQL, unfortunately, as usual does not support anything. There are some hacks on how people manually implement ""uuid"" data type. For example, using a `BINARY(16)` column with a `UUID_TO_BIN(UUID())` as a default or a `VARCHAR(36)` with `UUID()` as a default. See https://blogs.oracle.com/mysql/post/mysql-uuids or https://dev.mysql.com/blog-archive/mysql-8-0-uuid-support/ for detailed examples. But since MySQL does not support `RETURNING`, there is no way we can retrieve these values during the `INSERT` without the `record.reload`. Or, differently, we must manually set the uuid before creating a record.

So, the question is: Should we add also support for MySQL, expecting that people will manually set the default? 
Something like: 
```ruby
attribute :guid, :uuid, default: -> { SomeUuidGenerator.generate }
```

The added test cases are basically adopted tests for PostgreSQL uuid (https://github.com/rails/rails/blob/main/activerecord/test/cases/adapters/postgresql/uuid_test.rb).

~~Before merging this PR, https://github.com/rails/rails/pull/49840 should be merged, because these have overlapping code regarding `RETURNING` for MariaDB.~~ (done)",fatkodima,User,2,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49841,73684,49841,SQLite3Adapter test using ruby master branch got `Received cancellation signal` after 30 min ,open,7,2023-10-29 23:48:04+00:00,2024-01-06 22:53:44+00:00,,"

### Steps to reproduce
Unable to reproduce it locally. Here are 

https://buildkite.com/rails/rails/builds/101101#018b5834-8aac-4e35-8ca5-33f964f18914
https://buildkite.com/rails/rails/builds/101132#018b5ece-c103-4dae-91a0-3608f85b4b6e
https://buildkite.com/rails/rails/builds/101140#018b6002-8f41-4153-894e-db355691ecd8
https://buildkite.com/rails/rails/builds/101324#018b783b-f914-4b93-8b94-760f04dc6806
https://buildkite.com/rails/rails/builds/101326#018b7928-a571-4f7e-907a-68f1620d168d

### Expected behavior
It should finish successfully in couple of minutes like
https://buildkite.com/rails/rails/builds/101342#018b7d60-4941-4bf9-8243-03b4676ad4a4

### Actual behavior
It gets # Received cancellation signal, interrupting` after 30 min running.

### System configuration
**Rails version**: main branch

**Ruby version**: 3.3.0p-1 (2023-10-29 revision 7f2809b0a9db2a8a4a04aeaf91db191dee383574) [x86_64-linux]
 This Ruby version used for the latest one https://buildkite.com/rails/rails/builds/101342#018b7d60-4941-4bf9-8243-03b4676ad4a4",yahonda,User,2,activerecord,ci issues,,,,,,,
https://api.github.com/repos/rails/rails/issues/49833,16350274,49833,Clarify behavior of touch in transactions with callbacks in RDoc [ci skip],open,3,2023-10-28 21:28:31+00:00,2023-11-04 14:59:00+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created because touch is used in a lot of places but it's interaction is not documented anywhere wrt transactions. Bot how the queries are coalesced and the order in which callbacks are fired can be very confusing if not mentioned.

### Detail

This Pull Request changes the Rdoc of touch.

### Additional information

<!-- Provide additional information such as benchmarks, references to other repositories or alternative solutions. -->
https://github.com/rails/rails/issues/18606 coalesce PR
https://gist.github.com/dhavalsingh/0b353121345b1b74f6d16a41afb1bc5e Github gist for how callbacks are executed with touch and transaction blocks.

### Checklist

Before submitting the PR make sure the following are checked:

* [ x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x ] Tests are added or updated if you fix a bug or add a feature.
* [x ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",dhavalsingh,User,0,activerecord,needs feedback,docs,,,,,,
https://api.github.com/repos/rails/rails/issues/49829,567626,49829,Enable String Literal rule styles in guides to be more consistent with codebase styles,open,1,2023-10-28 15:29:44+00:00,2023-10-28 15:31:34+00:00,,"I can understand why this was avoided in https://github.com/rails/rails/pull/47186, currently docs and guides don't use this consistently. As well as this is a big change.

At the same time we also have https://github.com/rails/rails/pull/49824

Longer run, the codebase will prefer double quotes now that we use it at most places. We might as well enforce them, instead of repeat PRs fixing at different places.

cc @byroot  / @zzak / @rafaelfranca 

PS: This might affect diffs in upgrades guides comparison, but not sure the gains of not doing it 🤔 
",vipulnsward,User,0,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49826,147741,49826,ActiveRecord marshalling no longer preserves attribute change flags,open,6,2023-10-28 10:49:56+00:00,2024-01-04 14:01:26+00:00,,"### Steps to reproduce
The new ActiveRecord marshalling introduced by #47747 does not preserve attribute change flags, as demonstrated by this test case:

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.1""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string :title
  end
end

class Post < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_marshal_61
    ActiveRecord::Marshalling.format_version = 6.1

    post = Post.new(:title => ""Test"")
    assert post.title_changed?

    marshalled = Marshal.dump(post)

    unmarshalled = Marshal.load(marshalled)
    assert unmarshalled.title_changed?
  end

  def test_marshal_71
    ActiveRecord::Marshalling.format_version = 7.1

    post = Post.new(:title => ""Test"")
    assert post.title_changed?

    marshalled = Marshal.dump(post)

    unmarshalled = Marshal.load(marshalled)
    assert unmarshalled.title_changed?
  end
end
```

### Expected behavior
Both tests should pass.

### Actual behavior
Only the test using the old 6.1 marshalling format works.

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
",tomhughes,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/49821,5162312,49821,Move route helper method_missing to ActionController::TestCase,open,0,2023-10-28 01:04:31+00:00,2023-10-28 01:06:10+00:00,,"Integration tests use the integration session to access URL helpers. The method_missing in routing assertions is only for controller tests, so let's just move it there.

### Motivation / Background

This Pull Request has been created because this method had a TODO on it that looks out of date to me.

### Detail

This Pull Request moves the method_missing on the route assertions module to `ActionController::TestCase`. Integration tests already delegate to the `integration_session` route helpers here: https://github.com/rails/rails/blob/421df52bf859120371b82a67529fee20e1f548f8/actionpack/lib/action_dispatch/testing/integration.rb#L436 https://github.com/rails/rails/blob/421df52bf859120371b82a67529fee20e1f548f8/actionpack/lib/action_dispatch/testing/integration.rb#L358

### Additional information

The method_missing I moved might be public API, but I think we only expect it to be used in a controller test context, right? Integration tests include routing assertions to the [integration session](https://github.com/rails/rails/blob/421df52bf859120371b82a67529fee20e1f548f8/actionpack/lib/action_dispatch/testing/integration.rb#L93). Regardless of if we choose to move the method_missing, we can probably better test this behaviour to make sure it doesn't regress.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",gmcgibbon,User,0,actionpack,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49810,32258,49810,CSP Report-to reponse header field for browser Reporting API,open,0,2023-10-27 12:20:19+00:00,2023-10-27 14:20:53+00:00,,"### Motivation / Background

The current Rails CSP uses `report-uri` which is deprecated. There is a newer Reporting API which uses endpoints that can be references from the CSP policy using `report-to`.

For more info see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-to

### Detail

Adds Reporting API endpoint to CSP policy using `report-to`.

This requires the Report-To HTTP header to be set manually. Example:
```
response.set_header('Report-To', '{""group"":""csp-endpoint"",""max_age"":31536000,""endpoints"":[{""url"":""https://example.org/csp-endpoint""}],""include_subdomains"":true}')
```

### Additional information

This is my first PR to Rails so let me know if there is any improvement to be made. I wasn't sure whether to include info about the Report-To HTTP header in the docs or code.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",espen,User,0,actionpack,railties,docs,activestorage,actionmailbox,actiontext,,,
https://api.github.com/repos/rails/rails/issues/49801,5512772,49801,Introduce `alias_association` feature,open,0,2023-10-26 21:41:30+00:00,2023-11-01 00:10:07+00:00,,"### Motivation / Background

Implements - https://discuss.rubyonrails.org/t/feature-proposal-alias-association/83439/4

Rails 7.1 deprecated using `alias_attribute` for anything other than an attribute. Many applications end up using `alias_attribute` to alias associations and removing such usages would be challenging in many cases. Recognizing this, Rails introduces a new feature to alias associations called `alias_association`.

### Detail

Given an alias like `BlogPost.alias_association :author, :user` where `author` is an alias and `user` is the original association name of the `belong_to :user` association the feature provides the following capabilities:

#### Aliased association methods

Defines association reader and writer: `BlogPost#author` and `BlogPost#author=` 
(`belongs_to` only) Defines `build_#{assoc_name}` and `create_#{assoc_name}` constructors: `BlogPost#build_author`,  `BlogPost#create_author` and `BlogPost#create_author!` 
(`belongs_to` only)  Defines change tracking methods: `BlogPost#author_changed?` and `BlogPost#author_previously_changed?` 

#### Aliases support in `where()` clauses

`BlogPost.where(author: User.find_by(name: ""Nikita"")).to_a` #=> searches by `user_id`

#### Aliases support in `includes()` clauses

`BlogPost.all.includes(:author).to_a` # => preloads `user` association

### Implementation details

#### Aliased association methods

A new `define_association_methods ` method was defined on `ActiveRecord::Associations::Builder::Association` builder. Its job to define association-related instance methods. This method is being reused in the original `build` method. 
`define_accessors`, `define_change_tracking_methods` and all downstream methods now accept `as:` to serve as a publicly facing name of the new methods while the method body itself will point to the original association.

Since `alias_association` methods needs to know which builder to use for method definition builders now self-register themselves into a registry using `register_builder_for` method by providing a `macro` which later can be used to fetch the builder for a given reflection. 

#### Aliases support in `where()` clauses

To support aliased association names in `where()` clauses we introduced `querying_aliases` storage which will serve as a registry of aliases for both associations and attributes. This way we can avoid checking two places (attribute aliases & association aliases) when processing `where()` arguments.

#### Aliases support in `includes()` clauses

To support aliases in `includes()` (and most likely more capabilities that look into the `_reflections` hash) we register the same reflection under the new name 
https://github.com/rails/rails/blob/8917147631838b5c5b85240a61027b39f3adbde2/activerecord/lib/active_record/associations.rb#L1900 

### Additional information

The capabilities this feature provides are pretty standalone and could be extracted or completely descoped from this PR if needed. 

Also while the utility of this feature might be concerning the feature comes at no cost for applications that are not interested in utilizing it. 

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",nvasilevski,User,4,activemodel,activerecord,,,,,,,
https://api.github.com/repos/rails/rails/issues/49799,11673,49799,Add ActiveModel attribute type for duration,open,0,2023-10-26 15:56:47+00:00,2023-10-26 16:24:54+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

I've often had the need to desire a to create a duration type for Ruby classes including `ActiveModel::Attributes` or for ActiveRecord models backed by non-PostgreSQL database adapters, similar to [this StackOverflow answer](https://stackoverflow.com/a/45359178/771838). 

The Rails community would benefit from having this type available as an `ActiveModel` attribute whereas currently only `ActiveRecord` models with the PostgreSQL adapter support `ActiveSupport::Duration` through the `:interval` data type. .

### Detail

This changeset adds `ActiveModel::Type::Duration` to provide representation for `ActiveSupport::Duration` via the `:duration` key.

```rb
class Run
  include ActiveModel::Attributes

  attribute :lasted, :duration
end

run = Run.new
run.lasted = 2.hours
```

Numeric values are cast to `ActiveSupport::Duration` as seconds.

```rb    
run = Run.new
run.lasted = 120 # => 120 seconds
```

String values are parsed using the ISO 8601 duration format.

```rb
run = Run.new
run.lasted = ""PT2H""

run.lasted.class # => ActiveSupport::Duration
run.lasted       # => 2 hours
```

The serialization/deserialization logic is extracted from `ActiveRecord::ConnectionAdapters::PostreSQL::OID::Interval`, which is here modified to inherit from `ActiveModel::Type::Duration`.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",rossta,User,0,activemodel,activerecord,,,,,,,
https://api.github.com/repos/rails/rails/issues/49797,111346,49797,Fix double-encoding in `InlinePreviewInterceptor`,open,0,2023-10-26 13:43:42+00:00,2023-10-27 05:29:07+00:00,,"`ActionMailer::InlinePreviewInterceptor` is useful not only for previewing the template but also for displaying actual emails loaded from a string/file using `Mail.read_from_string`. For example, you might want to archive all outgoing emails to the database/filesystem and display these emails in a browser.

The interceptor assumes that attachments are represented as binary data. But if an email is loaded from string, the attachments have already been encoded as base64, so they end up being encoded twice.
",c960657,User,0,actionmailer,railties,,,,,,,
https://api.github.com/repos/rails/rails/issues/49789,18366969,49789,Add `#destroy_all!` method to `ActiveRecord::Relation`,open,1,2023-10-26 01:32:51+00:00,2023-10-28 01:37:06+00:00,,"### Motivation / Background

This Pull Request has been created because there is already `destroy_all`, but there are cases where you want to raise an exception if it fails. It is useful to have `destroy_all!`.
This change was previously implemented at https://github.com/rails/rails/pull/37782, but it was closed. I've re-opened this PR because it was recently mentioned by @rafaelfranca.

### Detail

This Pull Request changes add `#destroy_all!` method to `ActiveRecord::Relation`

If the `before_destroy` callback throws abort the action is cancelled and `destroy_all!` raises `ActiveRecord::RecordNotDestroyed`.

If there is more than one target record and you want to ensure that all records are deleted, you should realize this by explicitly using transaction to cause rollback.

```ruby
class User < ApplicationRecord
  before_destroy do
     throw :abort if id == 3
   end
end

ActiveRecord::Base.transaction do 
  User.where(id: 1..3).destroy_all!  
end  
 
=>  TRANSACTION (1.5ms)  BEGIN
  user Load (1.5ms)  SELECT `users`.* FROM `users` WHERE `users`.`id` BETWEEN 1 AND 3
  user Destroy (1.2ms)  DELETE FROM `users` WHERE `users`.`id` = 1
  user Destroy (1.1ms)  DELETE FROM `users` WHERE `users`.`id` = 2
  TRANSACTION (4.4ms)  ROLLBACK
ActiveRecord::RecordNotDestroyed: Failed to destroy the record
```

Also, if the deletion is successful, an Array containing the target object that was successfully deleted is returned.

### Additional information

- [Previously opened PR](https://github.com/rails/rails/pull/37782)
- [proposal](https://discuss.rubyonrails.org/t/proposal-add-destroy-all-method-to-activerecord-relation/80959)

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",soartec-lab,User,9,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49774,5122678,49774,Improve STI documentation,open,2,2023-10-25 00:49:57+00:00,2023-11-04 16:50:13+00:00,,"### Motivation / Background

This Pull Request has been created because the current [STI Guides][] don't document how to override or disable the [inheritance_column][].

~~Additionally, it's not clear that you can set `inheritance_column = :disabled`. Initially, I had tried  `inheritance_column = nil` which had the same behavior, but is not as clear as the former.~~

Setting `inheritance_column = nil` disabled STI.

### Detail

Add new sections to [STI Guides][] demonstrating how to override or disable the [inheritance_column][].

Also improve error message when `ActiveRecord::SubclassNotFound` is raised.

[STI Guides]: https://guides.rubyonrails.org/association_basics.html#single-table-inheritance-sti
[inheritance_column]: https://api.rubyonrails.org/classes/ActiveRecord/ModelSchema.html#method-c-inheritance_column

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",stevepolitodesign,User,0,activerecord,docs,ready,,,,,,
https://api.github.com/repos/rails/rails/issues/49771,8122246,49771,Reimplement TaggedLogging:,open,0,2023-10-24 17:24:15+00:00,2024-01-17 12:40:48+00:00,,"- ### Context

  The Tagged Logging functionality has been a source of a few issues over the years, especially when combined with the broadcasting feature. Initializating a Tagged Logger was also not very intuitive:

  ```ruby 
  logger = Logger.new(STDOUT)
  tagged_logger = ActiveSupport::TaggedLogging.new(logger)
  # Would expect the `tagged_logger` to be an instance of `AS::TaggedLogging` 
  # but it's a clone of the `logger`.

  tagged_logger.formatter = ->(_, _, _, message) do
    { message: message }
  end
  # Modifies the formatter to output JSON formatted logs.
  # This breaks tagged logging.
  ```

  I believe the main reason of those issues is because tagged logging is implemented at the wrong level.

  ### Solution

  I made a proposal on the Ruby logger upstream in ruby/logger#90 to help solve this but it hasn't been reviewed yet. So I thought about adding it here for now. The TL;DR is to decouple formatting and adding extra information to logs (which is what tagged logging does).

  ### Deprecation

  Since TaggedLogging will no longer access the formatter, there is a few things I'd like to deprecate such as setting a default formatter https://github.com/rails/rails/blob/d68e43922bc11829c52ad9f736ad5549fc97631b/activesupport/lib/active_support/tagged_logging.rb#L124 but doing so in this PR would increase the size of the diff significantly and would maybe distract for PR reviews.

  Another thing that I believe should be deprecated is `ActiveSupport::TaggedLogging.new`. Adding tagging functionality to a logger should be done using a more ruby approach such as `logger.extend(AS::TaggedLogging)`.

-------------------

Fix #49757 
Fix #49745 
Fix #46084 
Fix #44668",Edouard-chin,User,0,activesupport,activejob,actioncable,,,,,,
https://api.github.com/repos/rails/rails/issues/49763,57357936,49763,System tests does not work with Chrome/Chromium out of the box,open,7,2023-10-24 13:11:35+00:00,2023-11-23 11:11:53+00:00,,"The guides https://guides.rubyonrails.org/testing.html does not mention what you need to install in order to run the system specs.

For `:headless_firefox`, it is enough to install `firefox-esr`.
But testing with `:headless_chrome` fails, even though the browser is installed.

The guides should list prerequisites.
It would also be awesome, if the CI tested this, either as is done below or by adding to https://github.com/rails/rails/blob/main/.github/workflows/rails-new-docker.yml

### Steps to reproduce
Dockerfile
```Dockerfile
FROM ruby:3.0.6

RUN curl -so nodejs.tar.xz https://nodejs.org/dist/v18.14.1/node-v18.14.1-linux-x64.tar.xz \
  && tar xJf nodejs.tar.xz -C /usr/local --strip-components=1 --no-same-owner \
  && node --version \
  && npm --version

RUN npm install -g yarn \
  && yarn --version
```

```bash
docker build -t rails-test-system .
docker run --rm -it rails-test-system bash
apt update
apt install -y chromium firefox-esr
gem install rails
rails new test-system
cd test-system
bin/rails g scaffold article
bin/rails db:migrate
sed -i 's/:chrome/:headless_firefox/' test/application_system_test_case.rb
bin/rails test:system
sed -i 's/:headless_firefox/:headless_chrome/' test/application_system_test_case.rb
bin/rails test:system
```

```bash
wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
apt-get install -y ./google-chrome-stable_current_amd64.deb
bin/rails test:system
```

### Expected behavior
The system tests should be successful, like when using `:headless_firefox`.

### Actual behavior
Using `chromium`
```
Error:
ArticlesTest#test_should_destroy_Article:
Selenium::WebDriver::Error::SessionNotCreatedError: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/chromium is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
    #0 0x5c7383be6fb3 <unknown>
```

Using `google-chrome`
```
Error:
ArticlesTest#test_should_update_Article:
Selenium::WebDriver::Error::SessionNotCreatedError: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
    #0 0x5c1c61f64fb3 <unknown>
```

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.0.6
",runephilosof-abtion,User,0,actionpack,docs,,,,,,,
https://api.github.com/repos/rails/rails/issues/49762,92453,49762,ActiveRecord::Normalization - Normalizations don't run on store-based attributes,open,2,2023-10-24 12:32:26+00:00,2023-10-24 17:43:49+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :users, force: true do |t|
    t.string :extra_data
  end
end

class User < ActiveRecord::Base
  store :extra_data, accessors: [:fav_color, :homepage], coder: JSON
  store_accessor :extra_data, :email

  # Normalizations on store attributes DO NOT work
  normalizes :homepage, :email, with: -> { _1.strip.downcase }

  # Validations on store attributes DO work
  validates :fav_color, inclusion: {in: %w[red green blue]}, allow_nil: true
end

class BugTest < Minitest::Test
  def test_association_stuff
    user = User.create(homepage: ""  http://Example.Com  "")

    user.fav_color = ""red""
    user.email = ""JaneDoe@Example.Com""

    user.save! # no errors, color validation works

    assert_equal ""http://example.com"", user.homepage
    assert_equal ""janedoe@example.com"", user.email
  end
end

```

### Expected behavior
Both the homepage and email attributes should be normalized (stripped and downcased) when set. This is expected as validations work on store-based attributes.

### Actual behavior
Normalizations don't appear to be running on store-based attributes. Not sure if this is a bug, an oversight, or intended behavior.

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
",bcollierjones,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/49759,28561,49759,Deprecate `STATS_DIRECTORIES` in favor of `config.code_statistics.directories`,open,0,2023-10-24 08:59:21+00:00,2023-10-30 10:27:55+00:00,,"`STATS_DIRECTORIES` is used by third parties to add directories to the statistics output. It's a global constant defined in a Rake file, that gets loaded anytime a rails command is executed.

To remove the dependency on Rake and avoid a global constant we can move
the constant to the Rails.application.configuration.

`deprecate_constant` couldn't be used here as that doesn't seem to work for the root namespace.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",p8,User,0,railties,docs,,,,,,,
https://api.github.com/repos/rails/rails/issues/49757,79006,49757,BroadcastLogger#tagged without a block returns an array instead of a logger,open,4,2023-10-24 08:03:15+00:00,2023-10-25 05:20:19+00:00,,"### Steps to reproduce

1. Use `BroadcastLogger#broadcast_to(logger)` to add a new logger
2. Use `BroadcastLogger#tagged(""MyTag"")` without a block to return a new tagged logger
3. Try to use that new tagged logger

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""pry""
end

require ""active_support""
require ""active_support/core_ext/object/blank""
require ""minitest/autorun""

class BugTest < Minitest::Test
  def test_broadcast_to_multiple_tagged_loggers
    iologger1 = Logger.new($stdout)
    iologger1 = ActiveSupport::TaggedLogging.new(iologger1)

    logger = ActiveSupport::BroadcastLogger.new(iologger1)

    # This works fine
    logger.tagged(""Test1"").info(""OK"")

    iologger2 = Logger.new($stderr)
    iologger2 = ActiveSupport::TaggedLogging.new(iologger2)

    logger.broadcast_to(iologger2)

    # This works fine
    logger.tagged(""Test1"") { _1.info ""OK"" }

    # Now we have a problem. `logger.tagged` returns an Array
    # NoMethodError: undefined method `info' for [#<Logger
    #
    # https://github.com/rails/rails/blob/ca5132b78a44677f708045905dc1b092a02f6b30/activesupport/lib/active_support/broadcast_logger.rb#L242
    logger.tagged(""Test2"").info(""OK"")

    # We'll never get here, but this fails
    assert logger.is_a?(ActiveSupport::BroadcastLogger)
  end
end

```

### Expected behavior

Using `ActiveSupport::BroadcastLogger#tagged` without a block returns a tagged logger that can be used for logging as normal.


### Actual behavior

When broadcasting to more than one logger that supports tagging, an `Array` is returned rather than an object that you can log to directly.

The specific use case where this came up: in some tests, I want to capture logs so I can test them. Previously I was replacing `Rails.logger` entirely, but now I tried adding and removing a broadcast target and I noticed this didn't work.

This appears to be caused by the `method_missing` implementation:
https://github.com/rails/rails/blob/ca5132b78a44677f708045905dc1b092a02f6b30/activesupport/lib/active_support/broadcast_logger.rb#L242

<!-- Tell us what happens instead -->

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
",mroach,User,0,activesupport,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/49752,3640027,49752,Rails 7.1.1: UUID support for MariaDB/MySQL is missing -> ActiveStorage setup migration fails to correctly dump the new schema.rb (with primary key type: UUID),open,14,2023-10-23 22:05:07+00:00,2023-10-30 00:06:41+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

After running the [ActiveStorage setup](https://edgeguides.rubyonrails.org/active_storage_overview.html#setup), the migration producing the new `schema.rb` dump appears to fail, the beginning of it looking like this:

```ruby
ActiveRecord::Schema[7.0].define(version: 2023_09_29_141433) do
# Could not dump table ""active_storage_attachments"" because of following StandardError
#   Unknown type 'uuid' for column 'id'

# Could not dump table ""active_storage_blobs"" because of following StandardError
#   Unknown type 'uuid' for column 'id'

# Could not dump table ""active_storage_variant_records"" because of following StandardError
#   Unknown type 'uuid' for column 'id'
...
```

In the `config/application.rb` file, I have added:
```ruby
config.generators do |g|
  g.orm :active_record, primary_key_type: :uuid
end
```

However, looking at the generated DB tables in phpMyAdmin, all key and foreign-key values in the ""Type"" columns correctly show ""uuid"" (MariaDB [supports the UUID data type](https://mariadb.com/kb/en/uuid-data-type/) natively).

### System configuration
**Rails version**: `7.0.4.3`
**Ruby version**: `3.0.1p64` (2021-04-05 revision 0fb782ee38) [x86_64-linux]
**MariaDB version**: `11.1.2`
**gem mysql2 version**: `0.5.5`",john-999,User,0,With reproduction steps,activestorage,,,,,,,
https://api.github.com/repos/rails/rails/issues/49750,27399986,49750,ActiveRecord: `merge` ignores query in `from`,open,6,2023-10-23 19:59:53+00:00,2023-10-27 11:00:53+00:00,,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""7.1.1""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new($stdout)

ActiveRecord::Schema.define do
  create_table :authors, force: true do |t|
  end

  create_table :book_authors, force: true do |t|
    t.integer :book_id
    t.integer :author_id
  end

  create_table :books, force: true do |t|
    t.integer :library_id
  end

  create_table :libraries, force: true do |t|
  end

end

class ApplicationRecord < ActiveRecord::Base
  self.abstract_class = true
end

class BookAuthor < ApplicationRecord
  belongs_to :book
  belongs_to :author
end

class Author < ApplicationRecord
  has_many :book_authors
  has_many :books, through: :book_authors
end

class Book < ApplicationRecord
  scope :by_author, ->(author) {
    joins(book_authors: :author).where(book_authors: { author: author })
  }
  has_many :book_authors
  has_many :authors, through: :book_authors
  belongs_to :library
end

class Library < ApplicationRecord
  has_many :books
end


class BugTest < Minitest::Test
  def test_union
    library1 = Library.create!
    library2 = Library.create!

    author1 = Author.create!
    author2 = Author.create!
    author3 = Author.create!

    author1.books << Book.create!(library: library1)
    author1.books << Book.create!(library: library1)

    author2.books << Book.create!(library: library1)
    author2.books << Book.create!(library: library1)

    author3.books << Book.create!(library: library2)
    author3.books << Book.create!(library: library2)

    author1_books = Book.by_author(author1)
    author2_books = Book.by_author(author2)

    book_union = Book.from(""(#{author1_books.to_sql} UNION #{author2_books.to_sql}) AS books"")
    # book_union = Book.where(id: Book.from(""(#{author1_books.to_sql} UNION #{author2_books.to_sql}) AS books"").select(:id)) # This works
    assert_equal(4, book_union.count)
    library_query = Library.joins(:books).merge(book_union)

    assert_equal(4, library_query.count)
    assert(library_query.to_sql.include?('UNION'))
  end
end
```

### Expected behavior
Calling `.merge` with the result of a `Record.from` should preserve the query in the `from`

### Actual behavior
The query in the `.from` is discarded and the query that gets executed does not filter by it

### System configuration
**Rails version**: `7.1.1`

**Ruby version**: `ruby 3.0.6p216 (2023-03-30 revision 23a532679b) [arm64-darwin22]`
",ivangreene,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/49746,1722965,49746,`cookies.delete` does not remove cookies with a path if called from a different path,open,9,2023-10-23 12:32:24+00:00,2023-11-10 20:21:24+00:00,,"I don't know if this is intended behavior, but calling `cookies.delete` for a cookie that has a path, doesn't delete it if called from a different path.

This is because Rails only removes cookies that are present in the request, but since cookies with a path are only sent to that path, removing them with `cookies.delete` does not work.

I think it should work since deleting the cookie is actually just setting the value to nil and expiring it, and you can do that from a different path.

https://github.com/rails/rails/blob/23938052acd773fa24068debe56cd892cbf8d868/actionpack/lib/action_dispatch/middleware/cookies.rb#L382-L389

Manually expiring the cookie works.

### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""rails"", ""~> 7.1.1""
end

require ""rack/test""
require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.session_store :cookie_store, key: ""cookie_store_key""
  config.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    get 'set_cookies' => ""test#set_cookies""
    get 'show_cookies' => ""test#show_cookies""
    get 'delete_cookies' => ""test#delete_cookies""
    get 'delete_cookies_hack' => ""test#delete_cookies_hack""
  end
end

class TestController < ActionController::Base
  include Rails.application.routes.url_helpers

  def set_cookies
    cookies[:root] = ""root""
    cookies[:show] = { value: ""show"", path: ""/show_cookies"" }
    render plain: ""OK""
  end

  def show_cookies
    render plain: ""#{cookies[:root]}-#{cookies[:show]}""
  end

  def delete_cookies
    cookies.delete :root
    cookies.delete :show, path: ""/show_cookies""
    render plain: ""OK""
  end

  def delete_cookies_hack
    cookies[:root] = { value: nil, expires: Time.at(0), max_age: 0 }
    cookies[:show] = { value: nil, expires: Time.at(0), max_age: 0, path: ""/show_cookies"" }
    render plain: ""OK""
  end
end

require ""minitest/autorun""

class BugTest < Minitest::Test
  include Rack::Test::Methods

  # This fails
  def test_deletes_cookies_regular
    get ""/set_cookies""
    assert_equal ""OK"", last_response.body
    assert_equal ""/"", last_response.cookies[""root""].path
    assert_equal ""/show_cookies"", last_response.cookies[""show""].path

    get ""/show_cookies""
    assert_equal ""root-show"", last_response.body

    get ""/delete_cookies""
    assert_equal ""OK"", last_response.body
    refute_nil last_response.cookies[""root""]
    # This fails because the 'show' cookie is not set to be deleted.
    refute_nil last_response.cookies[""show""]

    get ""/show_cookies""
    # This fails because the 'show' cookie is still present.
    assert_equal ""-"", last_response.body
  end

  # This passes
  def test_deletes_cookies_hack
    get ""/set_cookies""
    assert_equal ""OK"", last_response.body
    assert_equal ""/"", last_response.cookies[""root""].path
    assert_equal ""/show_cookies"", last_response.cookies[""show""].path

    get ""/show_cookies""
    assert_equal ""root-show"", last_response.body

    get ""/delete_cookies_hack""
    assert_equal ""OK"", last_response.body
    refute_nil last_response.cookies[""root""]
    refute_nil last_response.cookies[""show""]

    get ""/show_cookies""
    assert_equal ""-"", last_response.body
  end

  private
    def app
      Rails.application
    end
end
```

### Expected behavior
Calling `cookies.delete` for a cookie that has a path deletes the cookie, even if called from a different path.

### Actual behavior
Calling `cookies.delete` for a cookie that has a path does not delete it if called from a different path.

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
",zavan,User,0,actionpack,attached PR,With reproduction steps,,,,,,
https://api.github.com/repos/rails/rails/issues/49745,816901,49745,`Rails.logger.tagged` will execute block as many times as the number of tagged loggers in the broadcast,open,6,2023-10-23 09:45:55+00:00,2024-01-16 20:25:21+00:00,,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""debug""
end

require ""active_support""
require ""active_support/core_ext/object/blank""
require ""minitest/autorun""

module ActiveSupport
  class BugTest < Minitest::Test
    def test_tagged_broadcast
      logger1_io = StringIO.new
      logger2_io = StringIO.new

      logger = BroadcastLogger.new(TaggedLogging.new(Logger.new(logger1_io)))
      logger.broadcast_to(TaggedLogging.new(Logger.new(logger2_io)))

      run_counter = 0

      logger.tagged(""TEST"") do
        logger.info(""Doing something"")
        run_counter += 1
      end

      # require ""debug"";binding.b
      assert_equal 1, run_counter                                  # Actual: 2
      assert_equal ""[TEST] Doing something\n"", logger1_io.string   # Actual: ""[TEST] Doing something\nDoing something\n""
      assert_equal ""[TEST] Doing something\n"", logger2_io.string   # Actual: ""Doing something\n[TEST] Doing something\n""
    end
  end
end
```

### Expected behavior

When I do `Rails.logger.tagged(""MY TAG"") { do_something }`, I expect `do_something` to be called once, regardless of how many loggers Rails is broadcasting to.

I also expect my log to be tagged and displayed in each logger. (I should see ""[TEST] Doing something"" once in the first log sink, and once in the second log sink.)

I don't know how common this is, but I've seen many applications (starting with Shopify), passing rather long blocks to `#tagged`, expecting all logs produced by the code in that block to be tagged. This becomes a problem if we for example do database operations in that block.

### Actual behavior

The block passed to `tagged` is run as many times as there are loggers broadcasted to.
The log messages get multiplied too (obviously), and only one for each logger is tagged.

### System configuration

**Rails version**: `HEAD`
**Ruby version**: 3.2.1

---

Still working on a graceful but quick solution to handle this. Suggestions welcome!",davidstosik,User,2,activesupport,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/49735,139634,49735,Catch and handle Resque::DirtyExit exceptions in ActiveJob,open,0,2023-10-21 19:31:07+00:00,2023-11-01 10:12:15+00:00,,"Fixes #49734

<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This allows Resque::DirtyExit exceptions to be handled in the same way as other exceptions in ActiveJobs.

### Detail

This adds an `on_failure` hook to the Resque JobWrapper class so that when a job is detected as having been killed (via prune_dead_workers) standard ActiveJob retry logic can be used to determine what to do next.

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

Because the Resque::DirtyExit exception is generated in the thread that sees that another worker has died (ie. the pruning thread) it's not visible to existing exception handling code in ActiveJob - it requires resque specific code to detect that this has happened and trigger the exception handler.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [?] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",geoffyoungs,User,3,activejob,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49734,139634,49734,Killed Resque jobs cannot be retried using ActiveJob,open,4,2023-10-21 19:25:48+00:00,2023-10-30 12:53:05+00:00,,"Resque workers can be killed.  

If they are killed with SIGKILL, the error handling in ActiveJob doesn't kick in, because it's not raised as an exception within the job code.

The failures _can_ be detected in Resque because other workers call `prune_dead_workers` and trigger `on_failure_XXX` hooks on the job class, which can be handled, but ActiveJob currently misses these exceptions and cannot trigger retry logic.

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

1. Create an ActiveJob instance
2. Add `rescue_from(Resque::DirtyExit) { retry_job } `
3. Enqueue in resque, and kill it mid-job with SIGKILL
4. Wait for the worker to be pruned
5. The error will be visible in the resque failure queue, but the retry will never happen.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

# this requires redis-server to be in PATH

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  # gem ""rails"", github: ""geoffyoungs/rails"", branch: ""resque-dirty-exit-active-job""
  gem 'redis'
  gem 'resque'
end

require ""active_support""
require ""active_support/core_ext/object/blank""
require ""active_job""
require ""resque""
require ""minitest/autorun""

ENV['QUEUE'] = 'std'
ENV['FORK_PER_JOB'] = 'false'
REDIS_PORT = 8765
REDIS_DB = 'resque_dirty_exit_active_job.rdb'+$$.to_s
ActiveJob::Base.queue_adapter = :resque

class BugTest < Minitest::Test
  class Job < ActiveJob::Base
    def self.status=(value)
      Resque.redis.set('job_status', value)
    end

    def self.status
      Resque.redis.get('job_status')
    end

    queue_as ENV['QUEUE']

    rescue_from(Resque::DirtyExit) do |exception|
      Job.status = 'retry'
      retry_job
    end

    def perform
      sleep 2
      Job.status = 'done'
    end
  end

  def setup
    spawn_redis
    connect_to_redis
    clear_redis
    FileUtils.rm_f(REDIS_DB)
  end

  def teardown
    kill_redis
    FileUtils.rm_f(REDIS_DB)
  end

  def test_whether_job_is_retried_after_dirty_exit
    Job.status = 'start'

    Job.perform_later

    assert Job.status.eql?('start')

    work_for(1)

    wait_for_workers_to_be_pruned

    assert Job.status.eql?('retry')

    work_for(3)

    assert Job.status.eql?('done')
  end

  private

  def work_for(time=0.5)
    pid = fork {
      connect_to_redis
      worker = Resque::Worker.new
      worker.prepare
      worker.heartbeat
      worker.work(1)
      exit!
    }
    sleep(time)
    kill('KILL', pid)
  end

  def spawn_redis
    @redis ||= spawn(['redis-server', '--port', REDIS_PORT.to_s, '--dbfilename', REDIS_DB].join(' '), out: File.open('/dev/null', 'w'))
  end

  def clear_redis
    Resque::Failure.clear
    Resque.remove_queue('std')
    Job.status = ''
  end

  def kill_redis
    kill('INT', @redis)
    @redis = nil
  end

  def kill(signal, pid)
    Process.kill(signal, pid)
    Process.waitpid(pid)
  end

  def connect_to_redis
    Resque.redis = Redis.new(port: REDIS_PORT)
  end

  def wait_for_workers_to_be_pruned
    while (workers = Resque::Worker.all).any?
      sleep(0.1)
      workers.first.prune_dead_workers
    end
  end
end

```

### Expected behavior
<!-- Tell us what should happen -->
It should be possible to handle the exception in the ActiveJob class.


### Actual behavior
<!-- Tell us what happens instead -->
It's not possible to handle the exception in ActiveJob without additional resque behaviour added to the JobWrapper class.

### System configuration
**Rails version**: 7.0.0-7.2.0pre (at least)

**Ruby version**: Any
",geoffyoungs,User,1,third party issue,attached PR,activejob,,,,,,
https://api.github.com/repos/rails/rails/issues/49719,7480,49719,Add application/wasm to the compressible content types,open,0,2023-10-20 10:46:35+00:00,2023-10-20 10:51:05+00:00,,"### Motivation / Background

I would like to be able to serve precompiled and compressed WASM files with ActionDispatch::Static.

This Pull Request has been created because I currently don't see how to customize the list of `compressible_content_types` without monkey-patching the middleware. The PR simply adds `application/wasm` to the matched content types.

I was wondering if this simple approach is good enough or if you see a better way to support his. If yes I am happy to add a test with a `.wasm` file-fixture.

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",haberbyte,User,0,actionpack,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49693,248174,49693,Implement `OrderedOptions#dig!`,open,3,2023-10-19 09:51:43+00:00,2023-10-26 09:20:04+00:00,,"### Motivation / Background

We often use `dig` with credentials and custom configurations, but the method
returns `nil` instead of an error if a non-existent key is specified by a typo.

It is possible to write without dig to quickly notice a wrong key, but this is tedious.

```ruby
# Before
Rails.application.credentials.fetch(:aws).fetch(:access_key_id)
Rails.application.config_for(:example).fetch(:foo).fetch(:bar)
```

To make this simple to write, this commit adds a bang version method.

```ruby
# After
Rails.application.credentials.dig!(:aws, :access_key_id)
Rails.application.config_for(:example).dig!(:foo, :bar)
```

### Detail

This Pull Request implements `OrderedOptions#dig!` to raise an exception if a non-existent key is specified.

### Additional information

There was discussion about a similar feature in Ruby, but it was last updated a year ago.

- [Version of dig that raises error if a key is not present](https://bugs.ruby-lang.org/issues/14602)
- [#dig that throws an exception if a key doesn't exist](https://bugs.ruby-lang.org/issues/15563)

In my use case, `OrderedOptions#dig!` is sufficient, so I avoided `Hash#dig!` which has a large impact.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",sinsoku,User,5,activesupport,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49688,701221,49688,"Document for rails >= 7.1 how to run an application in a mounting point different to ""/"".   This will avoid duplication of the relative root path in routes helpers.",open,14,2023-10-18 15:15:30+00:00,2024-01-30 15:07:31+00:00,,"## Simple case

(1) An engine that has a route (let's say `articles_path` pointing to `/articles`) and
(2) an application mounted on a relative route (let's say `/a/`) that mounts the engine on that same route by a) using `config.relative_url_root=""/a""` in `config/application.rb` as well as defining a `scope ""/a""`  in `config/routes.rb` and mounting the engine on the same route.

In the application `articles_path` will be `/a/a/articles` instead of `/a/articles` as it is with rails 7.0

### Steps to reproduce

1. With rails 7 generate part of the engine described at <https://edgeguides.rubyonrails.org/engines.html>:
    ```
    rails plugin new engine49688 --mountable
    cd engine49688
    bundle
    bin/rails generate scaffold article title:string text:text
    bin/rails db:migrate
    ```
   If you prefer you can clone this engine from this repository https://gitlab.com/vtamara/engine49688 or 
   check more details of how we generated it in the    [README.md](https://gitlab.com/vtamara/engine49688/-/blob/main/README.md)
3. With rails 7 generate part of the application described at <https://edgeguides.rubyonrails.org/engines.html>:
    ```sh
    cd ..
    rails new app49688 --minimal --skip-keeps
    cd app49688
    bundle add engine49688 --path=../engine49688
    bundle
    bin/rails engine49688:install:migrations
    bin/rails g scaffold user username:string name:string
    bin/rails db:migrate
    ```
   In this application make sure that the relative root is `/a` by 
   * Adding `config.relative_url_root = ""/a/""` to `config/application.rb`
   * Using that route as main scope in `config/routes.rb` and to mount on it the engine, i.e the contents of the file is:
      ```ruby
      Rails.application.routes.draw do            
        scope ""/a"" do
          resources :users
        end
        mount Engine49688::Engine => ""/a"", as: :engine49688
      end
      ```
    And create the test `test/controllers/routes_test.rb` with:
    ```ruby
     require ""test_helper""
     class RoutesTest < ActionDispatch::IntegrationTest

       test ""articles_path"" do
         assert_equal '/a/articles', engine49688.articles_path
       end
     end
     ```
     If you prefer you can also clone this application from https://gitlab.com/vtamara/app49688 or check details on how 
     we generated it and use it in the [README.md](https://gitlab.com/vtamara/app49688/-/blob/main/README.md).
4.  Run the test with rails 7 and it wil pass
5.  Update the application to rails 7.1 by changing in the `Gemfile` the line `gem ""rails"", ""~> 7.0.8""` with
     `gem ""rails"", ""~> 7.1""` and running `bundle`
6.  Run the same test and it will fail

### Expected behavior
With rails 7.1 the test should pass, i.e `engine49688.articles_path` should be `/a/articles` as it is with Rails 7.0:
```
% bin/rails test test/controllers/routes_test.rb
Running 1 tests in a single process (parallelization threshold is 50)
Run options: --seed 22764

# Running:

.

Finished in 0.345284s, 2.8962 runs/s, 2.8962 assertions/s.
1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
```

### Actual behavior

```
 % bin/rails test test/controllers/routes_test.rb
...
Running 1 tests in a single process (parallelization threshold is 50)
Run options: --seed 2957

# Running:

F

Failure:
RoutesTest#test_articles_path [/home/vtamara/comp/rails/tmp/app49688/test/controllers/routes_test.rb:6]:
Expected: ""/a/articles""
  Actual: ""/a/a/articles""


bin/rails test test/controllers/routes_test.rb:5



Finished in 0.206910s, 4.8330 runs/s, 4.8330 assertions/s.
1 runs, 1 assertions, 1 failures, 0 errors, 0 skips 
```

In the test `articles_path` duplicates the relative  root.

### System configuration
**Rails version**: 7.1

**Ruby version**: 3.2.2

",vtamara,User,1,actionpack,engines,,,,,,,
https://api.github.com/repos/rails/rails/issues/49679,277819,49679,🤫 Quiet down railties tests,open,0,2023-10-17 23:01:18+00:00,2024-01-12 23:04:39+00:00,,"This PR addressed several unrelated issues in the Railties test suite, in order to reduce the amount of noise.

**After**

```
$ bundle exec rake test >> railties_output_patched 2>&1
$ wc -l railties_output_patched
    1491 railties_output_patched
```

**Before**

```
$ bundle exec rake test >> railties_output_unpatched 2>&1
$ wc -l railties_output_unpatched
   19023 railties_output_unpatched
```

I've kept the commits separate as they are intended to be atomic and preserve context for the git history. It's preferred to review them by commit.

https://github.com/rails/rails/pull/49679/commits",zzak,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49675,2575027,49675,Migrate `ActiveRecord::AttributeAssignment` support for multiparameter attributes to Active Model,open,1,2023-10-17 16:23:06+00:00,2024-01-05 02:38:17+00:00,,"### Motivation / Background

Prior to this commit, the only difference between
`ActiveRecord::AttributeAssignment` and
`ActiveModel::AttributeAssignment` was support for multi-parameter attributes like those generated by Action View form helpers.

### Detail

This commit reduces `ActiveRecord::AttributeAssignment`'s responsibility, and instead relies on its inclusion of `ActiveModel::AttributeAssignment` to implement that behavior.

The added benefit of upstreaming this behavior is that Active Model POROs can be designed to be compatible with Action View Date, DateTime, and Time `<select>` elements:

```ruby
class Topic
  include ActiveModel::Model
  include ActiveModel::Attributes

  attribute :last_read_on, :date
end

topic = Topic.new(last_read_on: {
  ""last_read_on(1i)"" => ""2023"",
  ""last_read_on(2i)"" => ""10"",
  ""last_read_on(3i)"" => ""17""
})
topic.last_read_on == Date.new(2023, 10, 17) # => true
```

To maintain backwards compatibility, this commit preserves the `ActiveRecord::AttributeAssignment` module, despite the fact that it's mostly empty. Additionally, it makes sure that
`ActiveRecord::AttributeAssignmentError` and
`ActiveRecord::MultiparameterAssignmentErrors` are still thrown. This is important for applications that have generic
`ActiveRecord::ActiveRecordError` handling, since the new `ActiveModel::AttributeAssignmentError` and
`ActiveModel::MultiparameterAssignmentErrors` do not inherit from `ActiveRecord::ActiveRecordError`.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,1,activemodel,activerecord,docs,,,,,,
https://api.github.com/repos/rails/rails/issues/49672,14981592,49672,`ConnectionNotEstablished` when accessing column data with `check_schema_cache_dump_version = false` on postgres,open,4,2023-10-17 14:29:45+00:00,2023-10-19 20:40:37+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

I started looking into the schema cache functionality that Rails offers. When loading the cache and setting `check_schema_cache_dump_version` to false, accessing column information still queries the database somewhere.

This is not the case on main anymore. Perhaps because of #49378, #49415 or similar work that has been done in that regard.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""rails"", ""~> 7.1.0""
  # Passes on main
  # gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""psych"", ""5.1.1.1""
  gem ""pg""
end

require ""active_record/railtie""
require ""minitest/autorun""
require ""logger""

class TestApp < Rails::Application
  config.load_defaults 7.1
  config.eager_load = false
  config.root = __dir__

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  config.active_record.check_schema_cache_dump_version = false
end

schema_yml = <<~YML
  --- !ruby/object:ActiveRecord::ConnectionAdapters::SchemaCache
  columns:
    ar_internal_metadata:
    - !ruby/object:ActiveRecord::ConnectionAdapters::PostgreSQL::Column
      serial:
      generated: ''
      name: key
      sql_type_metadata: &1 !ruby/object:ActiveRecord::ConnectionAdapters::PostgreSQL::TypeMetadata
        delegate_dc_obj: !ruby/object:ActiveRecord::ConnectionAdapters::SqlTypeMetadata
          sql_type: character varying
          type: :string
          limit:
          precision:
          scale:
        oid: 1043
        fmod: -1
      'null': false
      default:
      default_function:
      collation:
      comment:
    - !ruby/object:ActiveRecord::ConnectionAdapters::PostgreSQL::Column
      serial:
      generated: ''
      name: value
      sql_type_metadata: *1
      'null': true
      default:
      default_function:
      collation:
      comment:
    - !ruby/object:ActiveRecord::ConnectionAdapters::PostgreSQL::Column
      serial:
      generated: ''
      name: created_at
      sql_type_metadata: &2 !ruby/object:ActiveRecord::ConnectionAdapters::PostgreSQL::TypeMetadata
        delegate_dc_obj: !ruby/object:ActiveRecord::ConnectionAdapters::SqlTypeMetadata
          sql_type: timestamp(6) with time zone
          type: :datetime
          limit:
          precision: 6
          scale:
        oid: 1184
        fmod: 6
      'null': false
      default:
      default_function:
      collation:
      comment:
    - !ruby/object:ActiveRecord::ConnectionAdapters::PostgreSQL::Column
      serial:
      generated: ''
      name: updated_at
      sql_type_metadata: *2
      'null': false
      default:
      default_function:
      collation:
      comment:
    posts:
    - !ruby/object:ActiveRecord::ConnectionAdapters::PostgreSQL::Column
      serial: true
      generated: ''
      name: id
      sql_type_metadata: !ruby/object:ActiveRecord::ConnectionAdapters::PostgreSQL::TypeMetadata
        delegate_dc_obj: !ruby/object:ActiveRecord::ConnectionAdapters::SqlTypeMetadata
          sql_type: bigint
          type: :integer
          limit: 8
          precision:
          scale:
        oid: 20
        fmod: -1
      'null': false
      default:
      default_function: nextval('posts_id_seq'::regclass)
      collation:
      comment:
    schema_migrations:
    - !ruby/object:ActiveRecord::ConnectionAdapters::PostgreSQL::Column
      serial:
      generated: ''
      name: version
      sql_type_metadata: *1
      'null': false
      default:
      default_function:
      collation:
      comment:
  primary_keys:
    ar_internal_metadata: key
    posts: id
    schema_migrations: version
  data_sources:
    ar_internal_metadata: true
    posts: true
    schema_migrations: true
  indexes:
    ar_internal_metadata: []
    posts: []
    schema_migrations: []
  version: 20230922142507
  database_version: 150004
YML

file = Tempfile.new([""schema"" "".yml""])
file.write(schema_yml)
file.rewind

ENV[""DATABASE_URL""] = ""postgresql://localhost:5432/doesnt_exist""
Rails.application.initialize!

class Post < ActiveRecord::Base
end

cache = ActiveRecord::ConnectionAdapters::SchemaCache._load_from(file.path)
ActiveRecord::Base.connection_pool.schema_reflection.set_schema_cache(cache)

class BugTest < ActiveSupport::TestCase
  def test_association_stuff
    assert_nothing_raised do
      assert_equal([""id""], Post.column_names)
    end
  end
end
```

### Expected behavior
No attempted connection to the database.

### Actual behavior
Attempted connection to the database.

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
",Earlopain,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/49671,11908414,49671,AR nullifies one of the primary_key if we nullify the belongs_to association with composite_keys  ,open,8,2023-10-17 11:37:53+00:00,2024-01-23 16:22:36+00:00,,"### Steps to reproduce


```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :organizations do
  end

  create_table :items, primary_key: %i[id organization_id] do |t|
    t.integer :id, null: false
    t.integer :organization_id, null: false
    t.integer :group_id
  end
end

class Organization < ActiveRecord::Base
end

class Item < ActiveRecord::Base
  self.primary_key = %i[id organization_id]

  belongs_to :organization
  belongs_to :group,
             class_name: 'Item',
             optional: true,
             query_constraints: %i[group_id organization_id]
end

class BugTest < Minitest::Test
  def test_nullify_association
    organization = Organization.create!
    first_item = Item.create!(id: [1, organization.id])

    second_item = Item.create!(id: [2, organization.id])
    second_item.group = first_item
    second_item.save!

    second_item.group = nil
    
    refute_nil(second_item.organization_id)
    assert_nil(second_item.group_id)
  end
  
  def test_adding_association
    organization = Organization.create!
    first_item = Item.create!(id: [1, organization.id])

    second_item = Item.new
    second_item.group = first_item

    assert_nil(second_item.organization_id)
    assert_equal(second_item.group_id, first_item.id.first)
  end
end
```


### Expected behavior

The expected behaviour for the `test_nullify_association` case is not nullifying the composite `primary_keys` of the Item record.

```  
#<Item id: 2, organization_id: 1, group_id: nil>
```


The expected behaviour for the `test_adding_association` case doesn't add an `organization_id`

```
#<Item id: nil, organization_id: nil, group_id: 1>
```

### Actual behavior

In the case `test_nullify_association` we get one of the Item's composite primary_keys `organization_id` as nil

```
#<Item id: 2, organization_id: nil, group_id: nil>
```


In the case `test_adding_association` we get filled field `organization_id`

```
#<Item id: nil, organization_id: 1, group_id: 1>
```

### System configuration
**Rails version**: 7.1.1 and also main

**Ruby version:** 3.2.2
",prog-supdex,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/49655,5512772,49655,Fix `update_all/delete_all` on CPK model relation with join subquery,open,0,2023-10-16 19:16:03+00:00,2024-01-16 19:50:21+00:00,,"Fixes https://github.com/rails/rails/issues/49597

Currently Rails generates an invalid SQL when using `update_all`/`delete_all` on composite primary models relations with a join subquery due to composite primary key being treated as a single key:
```sql
UPDATE ""my_table"" SET ""my_column"" = ? WHERE ""my_table"".""[""""pk_col1"""", """"pk_col2""""]"" IN (SELECT ""my_table"".""[""""pk_col1"""", """"pk_col2""""]""
```

This PR changes `update_all` and `delete_all` SQL to build a proper subquery which utilizes what sometimes referred as a row-constructor statement:
```sql
UPDATE ""my_table"" SET ""my_column"" = ? WHERE (""my_table"".""pk_col1"", ""my_table"".""pk_col2"") IN (SELECT ""my_table"".""pk_col1"", ""my_table"".""pk_col2"" ...
```
",nvasilevski,User,3,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49654,674321,49654,kill activestorage blob's anonymous validation,open,0,2023-10-16 16:50:41+00:00,2023-10-16 16:50:45+00:00,,"Per PR #48189 , can we just merge this simple changes first? then I can customize my own validation with module prepending, otherwise I have to link gem to github repo.",xiaohui-zhangxh,User,0,activestorage,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49652,617116,49652,Show the error messages next to the related fields instead of on top of the form,open,0,2023-10-16 13:21:10+00:00,2023-10-17 23:03:54+00:00,,"### Motivation / Background

The default scaffold in Rails displays all the form errors in a `<div>` on top of the form.

```erb
  <% if user.errors.any? %>
    <div style=""color: red"">
      <h2><%= pluralize(user.errors.count, ""error"") %> prohibited this user from being saved:</h2>

      <ul>
        <% user.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>
```

Which is not a common UX pattern on most websites.

It's way more usual to display the error messages right next to the field related to the error.
IMO, it would be much nicer/more intuitive to have something like this instead:

```erb
<%= form_with(model: user) do |form| %>
  <div>
    <%= form.label :name, style: ""display: block"" %>
    <%= form.text_field :name %>
    <%= form.error :name, style: ""color: red"" %>
  </div>

  <div>
    <%= form.submit %>
  </div>
<% end %>
```

### Detail

This Pull Request adds the method `error` to the form builder and updates the forms generated via scaffold.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",n-studio,User,0,railties,actionview,actiontext,,,,,,
https://api.github.com/repos/rails/rails/issues/49648,73684,49648,Active Support test cases fail using Ubuntu 23.10,open,4,2023-10-16 06:41:55+00:00,2024-01-15 12:05:47+00:00,,"### Steps to reproduce
1. Install or upgrade to Ubuntu 23.10
2. Install Ruby 3.2 or whatever Ruby version supported by Rails main branch

```ruby
git clone https://github.com/rails/rails
cd rails/activesupport
bundle install
bin/test -n ""/^(?:RangeTest#(?:test_overlap_last_exclusive)|DateAndTimeCompatibilityTest#(?:test_datetime_to_time_does_not_preserve_time_zone|test_datetime_to_time_frozen_does_not_preserve_time_zone|test_string_to_time_does_not_preserve_time_zone|test_string_to_time_frozen_does_not_preserve_time_zone|test_time_to_time_does_not_preserve_time_zone|test_time_to_time_frozen_does_not_preserve_time_zone|test_twz_to_time_does_not_preserve_time_zone|test_twz_to_time_frozen_does_not_preserve_time_zone)|DateExtCalculationsTest#(?:test_xmlschema)|DateTimeExtCalculationsTest#(?:test_current_returns_date_today_when_zone_is_not_set|test_current_returns_time_zone_today_when_zone_is_set|test_getlocal|test_localtime|test_to_time)|DurationTest#(?:test_since_and_ago_anchored_to_time_zone_now_when_time_zone_is_set)|StringConversionsTest#(?:test_daylight_savings_string_to_time_when_current_time_is_daylight_savings|test_daylight_savings_string_to_time_when_current_time_is_standard_time|test_partial_string_to_time_when_current_time_is_daylight_savings|test_partial_string_to_time_when_current_time_is_standard_time|test_standard_time_string_to_time_when_current_time_is_daylight_savings|test_standard_time_string_to_time_when_current_time_is_standard_time|test_string_to_time_utc_offset)|TestJSONEncoding#(?:test_time_to_json_includes_local_offset)|TimeExtCalculationsTest#(?:test_advance_preserves_offset_for_local_times_around_end_of_dst|test_advance_preserves_offset_for_zoned_times_around_end_of_dst|test_at_with_datetime_returns_local_time|test_at_with_local_time|test_at_with_time_with_zone_returns_local_time|test_change_preserves_offset_for_local_times_around_end_of_dst|test_change_preserves_offset_for_zoned_times_around_end_of_dst|test_daylight_savings_time_crossings_backward_end|test_daylight_savings_time_crossings_backward_start|test_daylight_savings_time_crossings_forward_end|test_daylight_savings_time_crossings_forward_start|test_formatted_offset_with_local|test_future_with_time_current_as_time_local|test_future_with_time_current_as_time_with_zone|test_past_with_time_current_as_time_local|test_past_with_time_current_as_time_with_zone|test_seconds_since_midnight_at_daylight_savings_time_end|test_seconds_since_midnight_at_daylight_savings_time_start|test_seconds_until_end_of_day_at_daylight_savings_time_end|test_seconds_until_end_of_day_at_daylight_savings_time_start|test_time_created_with_local_constructor_cannot_represent_times_during_hour_skipped_by_dst|test_to_fs)|TimeWithZoneMethodsForTimeAndDateTimeTest#(?:test_current_returns_time_zone_now_when_zone_set|test_in_time_zone_with_time_local_instance)|TimeWithZoneTest#(?:test_future_with_time_current_as_time_local|test_past_with_time_current_as_time_local|test_to_time_with_preserve_timezone|test_to_time_without_preserve_timezone|test_utc\\?)|TimeZoneTest#(?:test_map_kyiv_to_tzinfo|test_map_rangoon_to_tzinfo|test_now|test_now_enforces_spring_dst_rules|test_parse_with_day_omitted|test_strptime_with_day_omitted))$/""
```

### Expected behavior
It should pass.

### Actual behavior
It gets 53 failures and 5 errors as follows.

```ruby
$ bin/test -n ""/^(?:RangeTest#(?:test_overlap_last_exclusive)|DateAndTimeCompatibilityTest#(?:test_datetime_to_time_does_not_preserve_time_zone|test_datetime_to_time_frozen_does_not_preserve_time_zone|test_string_to_time_does_not_preserve_time_zone|test_string_to_time_frozen_does_not_preserve_time_zone|test_time_to_time_does_not_preserve_time_zone|test_time_to_time_frozen_does_not_preserve_time_zone|test_twz_to_time_does_not_preserve_time_zone|test_twz_to_time_frozen_does_not_preserve_time_zone)|DateExtCalculationsTest#(?:test_xmlschema)|DateTimeExtCalculationsTest#(?:test_current_returns_date_today_when_zone_is_not_set|test_current_returns_time_zone_today_when_zone_is_set|test_getlocal|test_localtime|test_to_time)|DurationTest#(?:test_since_and_ago_anchored_to_time_zone_now_when_time_zone_is_set)|StringConversionsTest#(?:test_daylight_savings_string_to_time_when_current_time_is_daylight_savings|test_daylight_savings_string_to_time_when_current_time_is_standard_time|test_partial_string_to_time_when_current_time_is_daylight_savings|test_partial_string_to_time_when_current_time_is_standard_time|test_standard_time_string_to_time_when_current_time_is_daylight_savings|test_standard_time_string_to_time_when_current_time_is_standard_time|test_string_to_time_utc_offset)|TestJSONEncoding#(?:test_time_to_json_includes_local_offset)|TimeExtCalculationsTest#(?:test_advance_preserves_offset_for_local_times_around_end_of_dst|test_advance_preserves_offset_for_zoned_times_around_end_of_dst|test_at_with_datetime_returns_local_time|test_at_with_local_time|test_at_with_time_with_zone_returns_local_time|test_change_preserves_offset_for_local_times_around_end_of_dst|test_change_preserves_offset_for_zoned_times_around_end_of_dst|test_daylight_savings_time_crossings_backward_end|test_daylight_savings_time_crossings_backward_start|test_daylight_savings_time_crossings_forward_end|test_daylight_savings_time_crossings_forward_start|test_formatted_offset_with_local|test_future_with_time_current_as_time_local|test_future_with_time_current_as_time_with_zone|test_past_with_time_current_as_time_local|test_past_with_time_current_as_time_with_zone|test_seconds_since_midnight_at_daylight_savings_time_end|test_seconds_since_midnight_at_daylight_savings_time_start|test_seconds_until_end_of_day_at_daylight_savings_time_end|test_seconds_until_end_of_day_at_daylight_savings_time_start|test_time_created_with_local_constructor_cannot_represent_times_during_hour_skipped_by_dst|test_to_fs)|TimeWithZoneMethodsForTimeAndDateTimeTest#(?:test_current_returns_time_zone_now_when_zone_set|test_in_time_zone_with_time_local_instance)|TimeWithZoneTest#(?:test_future_with_time_current_as_time_local|test_past_with_time_current_as_time_local|test_to_time_with_preserve_timezone|test_to_time_without_preserve_timezone|test_utc\\?)|TimeZoneTest#(?:test_map_kyiv_to_tzinfo|test_map_rangoon_to_tzinfo|test_now|test_now_enforces_spring_dst_rules|test_parse_with_day_omitted|test_strptime_with_day_omitted))$/""
WARNING: Nokogiri was built against libxml version 2.11.5, but has dynamically loaded 2.9.14

Run options: -n ""/^(?:RangeTest#(?:test_overlap_last_exclusive)|DateAndTimeCompatibilityTest#(?:test_datetime_to_time_does_not_preserve_time_zone|test_datetime_to_time_frozen_does_not_preserve_time_zone|test_string_to_time_does_not_preserve_time_zone|test_string_to_time_frozen_does_not_preserve_time_zone|test_time_to_time_does_not_preserve_time_zone|test_time_to_time_frozen_does_not_preserve_time_zone|test_twz_to_time_does_not_preserve_time_zone|test_twz_to_time_frozen_does_not_preserve_time_zone)|DateExtCalculationsTest#(?:test_xmlschema)|DateTimeExtCalculationsTest#(?:test_current_returns_date_today_when_zone_is_not_set|test_current_returns_time_zone_today_when_zone_is_set|test_getlocal|test_localtime|test_to_time)|DurationTest#(?:test_since_and_ago_anchored_to_time_zone_now_when_time_zone_is_set)|StringConversionsTest#(?:test_daylight_savings_string_to_time_when_current_time_is_daylight_savings|test_daylight_savings_string_to_time_when_current_time_is_standard_time|test_partial_string_to_time_when_current_time_is_daylight_savings|test_partial_string_to_time_when_current_time_is_standard_time|test_standard_time_string_to_time_when_current_time_is_daylight_savings|test_standard_time_string_to_time_when_current_time_is_standard_time|test_string_to_time_utc_offset)|TestJSONEncoding#(?:test_time_to_json_includes_local_offset)|TimeExtCalculationsTest#(?:test_advance_preserves_offset_for_local_times_around_end_of_dst|test_advance_preserves_offset_for_zoned_times_around_end_of_dst|test_at_with_datetime_returns_local_time|test_at_with_local_time|test_at_with_time_with_zone_returns_local_time|test_change_preserves_offset_for_local_times_around_end_of_dst|test_change_preserves_offset_for_zoned_times_around_end_of_dst|test_daylight_savings_time_crossings_backward_end|test_daylight_savings_time_crossings_backward_start|test_daylight_savings_time_crossings_forward_end|test_daylight_savings_time_crossings_forward_start|test_formatted_offset_with_local|test_future_with_time_current_as_time_local|test_future_with_time_current_as_time_with_zone|test_past_with_time_current_as_time_local|test_past_with_time_current_as_time_with_zone|test_seconds_since_midnight_at_daylight_savings_time_end|test_seconds_since_midnight_at_daylight_savings_time_start|test_seconds_until_end_of_day_at_daylight_savings_time_end|test_seconds_until_end_of_day_at_daylight_savings_time_start|test_time_created_with_local_constructor_cannot_represent_times_during_hour_skipped_by_dst|test_to_fs)|TimeWithZoneMethodsForTimeAndDateTimeTest#(?:test_current_returns_time_zone_now_when_zone_set|test_in_time_zone_with_time_local_instance)|TimeWithZoneTest#(?:test_future_with_time_current_as_time_local|test_past_with_time_current_as_time_local|test_to_time_with_preserve_timezone|test_to_time_without_preserve_timezone|test_utc\\?)|TimeZoneTest#(?:test_map_kyiv_to_tzinfo|test_map_rangoon_to_tzinfo|test_now|test_now_enforces_spring_dst_rules|test_parse_with_day_omitted|test_strptime_with_day_omitted))$/"" --seed 18207

# Running:

F

Failure:
StringConversionsTest#test_standard_time_string_to_time_when_current_time_is_standard_time [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/string_ext_test.rb:631]:
Expected: 2012-01-01 13:00:00 +0000
  Actual: 2012-01-01 10:00:00 -0800


bin/test test/core_ext/string_ext_test.rb:626

F

Failure:
StringConversionsTest#test_string_to_time_utc_offset [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/string_ext_test.rb:604]:
Expected: -18000
  Actual: 0


bin/test test/core_ext/string_ext_test.rb:600

F

Failure:
StringConversionsTest#test_standard_time_string_to_time_when_current_time_is_daylight_savings [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/string_ext_test.rb:650]:
Expected: 2012-01-01 13:00:00 +0000
  Actual: 2012-01-01 10:00:00 -0800


bin/test test/core_ext/string_ext_test.rb:645

F

Failure:
StringConversionsTest#test_partial_string_to_time_when_current_time_is_standard_time [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/string_ext_test.rb:707]:
Expected: 2012-01-01 06:00:00 +0000
  Actual: 2012-01-01 10:00:00 -0100


bin/test test/core_ext/string_ext_test.rb:702

F

Failure:
StringConversionsTest#test_partial_string_to_time_when_current_time_is_daylight_savings [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/string_ext_test.rb:730]:
Expected: 2012-07-01 07:00:00 +0000
  Actual: 2012-07-01 10:00:00 -0100


bin/test test/core_ext/string_ext_test.rb:725

F

Failure:
StringConversionsTest#test_daylight_savings_string_to_time_when_current_time_is_daylight_savings [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/string_ext_test.rb:688]:
Expected: 2012-07-01 13:00:00 +0000
  Actual: 2012-07-01 10:00:00 -0700


bin/test test/core_ext/string_ext_test.rb:683

F

Failure:
StringConversionsTest#test_daylight_savings_string_to_time_when_current_time_is_standard_time [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/string_ext_test.rb:669]:
Expected: 2012-07-01 13:00:00 +0000
  Actual: 2012-07-01 10:00:00 -0700


bin/test test/core_ext/string_ext_test.rb:664

E

Error:
TimeWithZoneTest#test_utc?:
NoMethodError: undefined method `period_for_utc' for nil:NilClass
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/time_with_zone.rb:73:in `period'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/time_with_zone.rb:134:in `zone'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/time_with_zone.rb:106:in `utc?'
    /home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_with_zone_test.rb:69:in `test_utc?'


bin/test test/core_ext/time_with_zone_test.rb:64

F

Failure:
TimeWithZoneTest#test_past_with_time_current_as_time_local [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_with_zone_test.rb:322]:
Expected: true
  Actual: false


bin/test test/core_ext/time_with_zone_test.rb:319

F

Failure:
TimeWithZoneTest#test_future_with_time_current_as_time_local [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_with_zone_test.rb:341]:
Expected: false
  Actual: true


bin/test test/core_ext/time_with_zone_test.rb:338

F

Failure:
TimeWithZoneTest#test_to_time_with_preserve_timezone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_with_zone_test.rb:527]:
Expected: 1999-12-31 19:00:00 +0000
  Actual: 1999-12-31 19:00:00 -0500


bin/test test/core_ext/time_with_zone_test.rb:520

F

Failure:
TimeWithZoneTest#test_to_time_without_preserve_timezone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_with_zone_test.rb:540]:
Expected: 1999-12-31 19:00:00 +0000
  Actual: 2000-01-01 00:00:00 +0000


bin/test test/core_ext/time_with_zone_test.rb:533

F

Failure:
TimeExtCalculationsTest#test_formatted_offset_with_local [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:1110]:
Expected: ""-05:00""
  Actual: ""+00:00""


bin/test test/core_ext/time_ext_test.rb:1108

F

Failure:
TimeExtCalculationsTest#test_daylight_savings_time_crossings_forward_start [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:297]:
st+24.hours=>dt.
Expected: 2005-04-03 20:27:00 +0000
  Actual: 2005-04-03 19:27:00 +0000


bin/test test/core_ext/time_ext_test.rb:294

F

Failure:
TimeExtCalculationsTest#test_time_created_with_local_constructor_cannot_represent_times_during_hour_skipped_by_dst [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:1240]:
Expected: 2006-04-02 03:00:00 +0000
  Actual: 2006-04-02 02:00:00 +0000


bin/test test/core_ext/time_ext_test.rb:1236

F

Failure:
TimeExtCalculationsTest#test_daylight_savings_time_crossings_backward_end [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:239]:
st-24.hours=>dt.
Expected: 2005-10-29 05:03:00 +0000
  Actual: 2005-10-29 04:03:00 +0000


bin/test test/core_ext/time_ext_test.rb:236

F

Failure:
TimeExtCalculationsTest#test_advance_preserves_offset_for_local_times_around_end_of_dst [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:674]:
Expected 2005-10-30 01:00:00 +0000 to be < 2005-10-30 01:00:00 +0000.


bin/test test/core_ext/time_ext_test.rb:666

F

Failure:
TimeExtCalculationsTest#test_seconds_since_midnight_at_daylight_savings_time_end [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:43]:
just after DST end.
Expected: 10801
  Actual: 7201.0


bin/test test/core_ext/time_ext_test.rb:38

E

Error:
TimeExtCalculationsTest#test_advance_preserves_offset_for_zoned_times_around_end_of_dst:
ArgumentError: Invalid Timezone: US/Eastern
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/core_ext/time/zones.rb:84:in `find_zone!'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/core_ext/time/zones.rb:42:in `zone='
    /home/yahonda/src/github.com/rails/rails/activesupport/test/time_zone_test_helpers.rb:6:in `with_tz_default'
    /home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:699:in `test_advance_preserves_offset_for_zoned_times_around_end_of_dst'


bin/test test/core_ext/time_ext_test.rb:698

E

Error:
TimeExtCalculationsTest#test_change_preserves_offset_for_zoned_times_around_end_of_dst:
ArgumentError: Invalid Timezone: US/Eastern
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/core_ext/time/zones.rb:84:in `find_zone!'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/core_ext/time/zones.rb:42:in `zone='
    /home/yahonda/src/github.com/rails/rails/activesupport/test/time_zone_test_helpers.rb:6:in `with_tz_default'
    /home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:495:in `test_change_preserves_offset_for_zoned_times_around_end_of_dst'


bin/test test/core_ext/time_ext_test.rb:494

F

Failure:
TimeExtCalculationsTest#test_future_with_time_current_as_time_with_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:1090]:
Expected: true
  Actual: false


bin/test test/core_ext/time_ext_test.rb:1084

F

Failure:
TimeExtCalculationsTest#test_seconds_until_end_of_day_at_daylight_savings_time_start [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:75]:
just before DST start.
Expected: 75600
  Actual: 79200


bin/test test/core_ext/time_ext_test.rb:72

F

Failure:
TimeExtCalculationsTest#test_change_preserves_offset_for_local_times_around_end_of_dst [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:474]:
Expected 2005-10-30 01:00:00 +0000 to be < 2005-10-30 01:00:00 +0000.


bin/test test/core_ext/time_ext_test.rb:466

F

Failure:
TimeExtCalculationsTest#test_at_with_time_with_zone_returns_local_time [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:1186]:
Expected: 1999-12-31 19:00:00 +0000
  Actual: 2000-01-01 00:00:00 +0000


bin/test test/core_ext/time_ext_test.rb:1183

F

Failure:
TimeExtCalculationsTest#test_future_with_time_current_as_time_local [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:1077]:
Expected: false
  Actual: true


bin/test test/core_ext/time_ext_test.rb:1071

F

Failure:
TimeExtCalculationsTest#test_daylight_savings_time_crossings_backward_start [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:216]:
dt-24.hours=>st.
Expected: 2005-04-02 03:18:00 +0000
  Actual: 2005-04-02 04:18:00 +0000


bin/test test/core_ext/time_ext_test.rb:213

F

Failure:
TimeExtCalculationsTest#test_past_with_time_current_as_time_with_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:1062]:
Expected: false
  Actual: true


bin/test test/core_ext/time_ext_test.rb:1057

F

Failure:
TimeExtCalculationsTest#test_seconds_until_end_of_day_at_daylight_savings_time_end [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:90]:
just before DST end.
Expected: 86400
  Actual: 82800


bin/test test/core_ext/time_ext_test.rb:86

F

Failure:
TimeExtCalculationsTest#test_at_with_local_time [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:1213]:
--- expected
+++ actual
@@ -1 +1,3 @@
-""EST""
+# encoding: US-ASCII
+#    valid: true
+""""



bin/test test/core_ext/time_ext_test.rb:1210

F

Failure:
TimeExtCalculationsTest#test_past_with_time_current_as_time_local [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:1050]:
Expected: true
  Actual: false


bin/test test/core_ext/time_ext_test.rb:1044

F

Failure:
TimeExtCalculationsTest#test_at_with_datetime_returns_local_time [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:1156]:
Expected: 1999-12-31 19:00:00 +0000
  Actual: 2000-01-01 00:00:00 +0000


bin/test test/core_ext/time_ext_test.rb:1153

F

Failure:
TimeExtCalculationsTest#test_daylight_savings_time_crossings_forward_end [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:359]:
dt+24.hours=>st.
Expected: 2005-10-30 23:45:00 +0000
  Actual: 2005-10-31 00:45:00 +0000


bin/test test/core_ext/time_ext_test.rb:356

F

Failure:
TimeExtCalculationsTest#test_to_fs [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:845]:
--- expected
+++ actual
@@ -1 +1 @@
-""Thu, 05 Feb 2009 14:30:05 -0600""
+""Thu, 05 Feb 2009 14:30:05 +0000""



bin/test test/core_ext/time_ext_test.rb:829

F

Failure:
TimeExtCalculationsTest#test_seconds_since_midnight_at_daylight_savings_time_start [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:28]:
just after DST start.
Expected: 7201
  Actual: 10801.0


bin/test test/core_ext/time_ext_test.rb:24

F

Failure:
DurationTest#test_since_and_ago_anchored_to_time_zone_now_when_time_zone_is_set [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/duration_test.rb:306]:
Expected: 2000-01-01 00:00:05 UTC
  Actual: 1999-12-31 19:00:05 UTC


bin/test test/core_ext/duration_test.rb:300

F

Failure:
TimeWithZoneMethodsForTimeAndDateTimeTest#test_in_time_zone_with_time_local_instance [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_with_zone_test.rb:1145]:
--- expected
+++ actual
@@ -1 +1 @@
-""Fri, 31 Dec 1999 15:00:00.000000000 AKST -09:00""
+""Fri, 31 Dec 1999 10:00:00.000000000 AKST -09:00""



bin/test test/core_ext/time_with_zone_test.rb:1142

F

Failure:
TimeWithZoneMethodsForTimeAndDateTimeTest#test_current_returns_time_zone_now_when_zone_set [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_with_zone_test.rb:1284]:
Expected: 2000-01-01 00:00:00 UTC
  Actual: 1999-12-31 19:00:00 UTC


bin/test test/core_ext/time_with_zone_test.rb:1278

F

Failure:
DateExtCalculationsTest#test_xmlschema [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_ext_test.rb:320]:
Expected /^1980-02-28T00:00:00-05:?00$/ to match ""1980-02-28T00:00:00+00:00"".


bin/test test/core_ext/date_ext_test.rb:318

.F

Failure:
DateAndTimeCompatibilityTest#test_time_to_time_frozen_does_not_preserve_time_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_and_time_compatibility_test.rb:69]:
Expected: -14400
  Actual: 0


bin/test test/core_ext/date_and_time_compatibility_test.rb:61

F

Failure:
DateAndTimeCompatibilityTest#test_twz_to_time_does_not_preserve_time_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_and_time_compatibility_test.rb:161]:
Expected: -14400
  Actual: 0


bin/test test/core_ext/date_and_time_compatibility_test.rb:152

F

Failure:
DateAndTimeCompatibilityTest#test_twz_to_time_frozen_does_not_preserve_time_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_and_time_compatibility_test.rb:207]:
Expected: -14400
  Actual: 0


bin/test test/core_ext/date_and_time_compatibility_test.rb:198

F

Failure:
DateAndTimeCompatibilityTest#test_time_to_time_does_not_preserve_time_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_and_time_compatibility_test.rb:40]:
Expected: -14400
  Actual: 0


bin/test test/core_ext/date_and_time_compatibility_test.rb:32

F

Failure:
DateAndTimeCompatibilityTest#test_string_to_time_frozen_does_not_preserve_time_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_and_time_compatibility_test.rb:270]:
Expected: -14400
  Actual: 0


bin/test test/core_ext/date_and_time_compatibility_test.rb:262

F

Failure:
DateAndTimeCompatibilityTest#test_string_to_time_does_not_preserve_time_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_and_time_compatibility_test.rb:243]:
Expected: -14400
  Actual: 0


bin/test test/core_ext/date_and_time_compatibility_test.rb:235

F

Failure:
DateAndTimeCompatibilityTest#test_datetime_to_time_does_not_preserve_time_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_and_time_compatibility_test.rb:97]:
Expected: -14400
  Actual: 0


bin/test test/core_ext/date_and_time_compatibility_test.rb:89

F

Failure:
DateAndTimeCompatibilityTest#test_datetime_to_time_frozen_does_not_preserve_time_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_and_time_compatibility_test.rb:124]:
Expected: -14400
  Actual: 0


bin/test test/core_ext/date_and_time_compatibility_test.rb:116

F

Failure:
DateTimeExtCalculationsTest#test_current_returns_time_zone_today_when_zone_is_set [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_time_ext_test.rb:384]:
--- expected
+++ actual
@@ -1 +1 @@
-Fri, 31 Dec 1999 23:59:59 -0500
+Fri, 31 Dec 1999 18:59:59 -0500



bin/test test/core_ext/date_time_ext_test.rb:380

F

Failure:
DateTimeExtCalculationsTest#test_to_time [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_time_ext_test.rb:88]:
Expected: 2005-02-21 05:11:12 +0000
  Actual: 2005-02-21 10:11:12 +0000


bin/test test/core_ext/date_time_ext_test.rb:83

F

Failure:
DateTimeExtCalculationsTest#test_getlocal [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_time_ext_test.rb:69]:
Expected: 2016-03-11 10:11:12 +0000
  Actual: 2016-03-11 15:11:12 +0000


bin/test test/core_ext/date_time_ext_test.rb:66

F

Failure:
DateTimeExtCalculationsTest#test_current_returns_date_today_when_zone_is_not_set [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_time_ext_test.rb:375]:
--- expected
+++ actual
@@ -1 +1 @@
-Fri, 31 Dec 1999 23:59:59 -0500
+Fri, 31 Dec 1999 23:59:59 +0000



bin/test test/core_ext/date_time_ext_test.rb:372

F

Failure:
DateTimeExtCalculationsTest#test_localtime [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_time_ext_test.rb:60]:
Expected: 2016-03-11 10:11:12 +0000
  Actual: 2016-03-11 15:11:12 +0000


bin/test test/core_ext/date_time_ext_test.rb:57

F

Failure:
TimeZoneTest#test_now [/home/yahonda/src/github.com/rails/rails/activesupport/test/time_zone_test.rb:95]:
Expected: 2000-01-01 05:00:00 UTC
  Actual: 2000-01-01 00:00:00 UTC


bin/test test/time_zone_test.rb:90

E

Error:
TimeZoneTest#test_map_kyiv_to_tzinfo:
NoMethodError: undefined method `tzinfo' for nil:NilClass
    /home/yahonda/src/github.com/rails/rails/activesupport/test/time_zone_test.rb:54:in `block (2 levels) in <class:TimeZoneTest>'


bin/test test/time_zone_test.rb:52

F

Failure:
TimeZoneTest#test_now_enforces_spring_dst_rules [/home/yahonda/src/github.com/rails/rails/activesupport/test/time_zone_test.rb:108]:
Expected: 2006-04-02 03:00:00 UTC
  Actual: 2006-04-01 21:00:00 UTC


bin/test test/time_zone_test.rb:101

F

Failure:
TimeZoneTest#test_strptime_with_day_omitted [/home/yahonda/src/github.com/rails/rails/activesupport/test/time_zone_test.rb:671]:
--- expected
+++ actual
@@ -1 +1 @@
-2000-02-01 00:00:00 +0000
+Tue, 01 Feb 2000 00:00:00.000000000 EST -05:00



bin/test test/time_zone_test.rb:668

E

Error:
TimeZoneTest#test_map_rangoon_to_tzinfo:
NoMethodError: undefined method `tzinfo' for nil:NilClass
    /home/yahonda/src/github.com/rails/rails/activesupport/test/time_zone_test.rb:54:in `block (2 levels) in <class:TimeZoneTest>'


bin/test test/time_zone_test.rb:52

F

Failure:
TimeZoneTest#test_parse_with_day_omitted [/home/yahonda/src/github.com/rails/rails/activesupport/test/time_zone_test.rb:443]:
--- expected
+++ actual
@@ -1 +1 @@
-2000-02-01 00:00:00 +0000
+Tue, 01 Feb 2000 00:00:00.000000000 EST -05:00



bin/test test/time_zone_test.rb:440

F

Failure:
TestJSONEncoding#test_time_to_json_includes_local_offset [/home/yahonda/src/github.com/rails/rails/activesupport/test/json/encoding_test.rb:108]:
--- expected
+++ actual
@@ -1 +1 @@
-""\""2005-02-01T15:15:10.000-05:00\""""
+""\""2005-02-01T15:15:10.000+00:00\""""



bin/test test/json/encoding_test.rb:105



Finished in 0.140540s, 419.8095 runs/s, 875.1962 assertions/s.
59 runs, 123 assertions, 53 failures, 5 errors, 0 skips
$
```
### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]
",yahonda,User,0,activesupport,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/49646,771968,49646,Add `AR::Base::normalizes_attributes_of_type`,open,1,2023-10-15 21:39:16+00:00,2023-10-17 15:45:31+00:00,,"`ActiveRecord::Base::normalizes_attributes_of_type` behaves like `ActiveRecord::Base::normalizes`, but targets attributes having one of the specified types.  For example:

  ```ruby
  class Snippet < ActiveRecord::Base
    normalizes_each :string, :text, with: -> { _1.strip }
  end

  snippet = Snippet.new(title: ""  Title"", description: ""Description.\n"", code: ""  code\n"")
  snippet.title        # => ""Title""
  snippet.description  # => ""Description.""
  snippet.code         # => ""  code\n""
  ```

---

Closes #49314.

@codergeek121 I've added you as a co-author for your work on #49314.
",jonathanhefner,User,3,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49637,2575027,49637,Introduce `ActiveModel::NestedAttributes`,open,4,2023-10-14 15:36:22+00:00,2023-11-06 19:04:13+00:00,,"
### Motivation / Background

Largely inspired by the Active Record implementation, this commit introduces support for assigning instances of objects to classes that `include ActiveModel::Model`.

### Detail

It aims to handle assignment of `_attributes`-suffixed values in an ActionView- and ActionPack-compliant way:

```ruby
Author = Struct.new(:name)
Category = Struct.new(:name)

class Article
  include ActiveModel::Model
  include ActiveModel::NestedAttributes

  attr_accessor :author
  attr_accessor :tags

  accepts_nested_attributes_for :author
  accepts_nested_attributes_for :tags, class_name: Category
end

article = Article.new(
  author_attributes: { name: ""Pseudo Nym"" },
  tags_attributes: {
      0 => { name: ""actionview"" },
      1 => { name: ""actionpack"" },
  }
)

article.author.name # => ""Pseudo Nym""
article.tags.pluck(:name) # => [""actionview"", ""actionpack""]
```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,6,activemodel,activerecord,docs,,,,,,
https://api.github.com/repos/rails/rails/issues/49634,3461,49634,ActionCable PostgreSQL adapter: support payloads larger than 8000 bytes,open,20,2023-10-14 12:32:22+00:00,2023-11-04 19:20:22+00:00,,"**UPDATE:** Since getting this enhanced merged into rails might take some time I've released [a gem](https://rubygems.org/gems/actioncable-enhanced-postgresql-adapter) which can be used in the meantime. Documentation can be found in the [GitHub README](https://github.com/reclaim-the-stack/actioncable-enhanced-postgresql-adapter#readme).

### Motivation / Background

PostgreSQL's `NOTIFY` command which is used by the ActionCable PostgreSQL adapter has a hard coded payload limit of 8000 bytes. As stated in the [NOTIFY docs](https://www.postgresql.org/docs/16/sql-notify.html):

> The “payload” string to be communicated along with the notification. This must be specified as a simple string literal. In the default configuration it must be shorter than 8000 bytes. (If binary data or large amounts of information need to be communicated, it's best to put it in a database table and send the key of the record.)

Note that the limit can not be reconfigured, even though the documentation makes it seem like it by mentioning ""default configuration"".

In practice this implies that whenever `ActionCable::SubscriptionAdapter::PostgreSQL#broadcast` is invoked with a large payload it will fail with the `PG::InvalidParameterValue: ERROR: payload string too long` exception.

When googling for information about this adapter, this issue surfaced in quite a few places and seems to be a major reason why it sees so little real world usage.

Also, given the push from 37 signals to move caching and queuing to the SQL database layer via Solid Cache / Solid Queue this leaves only ActionCable left to enable a super simple ""SQL database only"" deployment possibility for a fully featured Rails app. Which was a big motivation for me to look into solving this issue.

### Detail

This Pull Request evolves the implementation of the adapter by following the advice given in the Postgres documentation, ie. to store large payloads in a table, then pass the record ID as the message payload, then fetch the payload from the table when running the listener callback.

Documentation is provided in the Rails Guides for how to create the table. If no table exists, instead of the previous `PG::InvalidParameterValue` exception, a helpful custom exception will be raised instead, linking to the documentation.

### Additional information

#### Performance

Storing and fetching payloads from a table will clearly have a performance impact. However, since the approach is used only for payloads violating the limit, and only if a dedicated table has been explicitly created, this PR avoids any performance implications for existing users (if there even are any 😅).

#### Alternatives / ideas

Having to manually create the large payloads table doesn't make for a completely seamless developer experience. I considered lazily creating the table ""on the fly"" as needed. However this might go too far in hiding what's going on in the database from the developer, it would also create confusing diffs from `db:schema:dump` which would now include the lazily created table unless we also add the table to `ActiveRecord::SchemaDumper.ignore_tables` during Rails boot.

Not having built in expiry of old payloads could be reconsidered. One approach of doing it would be to delete old payloads at the same time as we insert new entries (simiilar to how [Solid Cache approaches this problem](https://github.com/rails/solid_cache/blob/e4865809025d650736d818fce26d09737f6623b1/lib/solid_cache/cluster/expiry.rb#L6-L7)). To avoid too much database churn we could do it for every 100 or 1000 messages by looking at the auto incrementing ID returned during insert-time. Feedback appreciated!

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",dbackeus,User,15,docs,actioncable,,,,,,,
https://api.github.com/repos/rails/rails/issues/49630,4289625,49630,[ci-skip][Docs]Add description for CTE to querying guide,open,4,2023-10-13 23:33:02+00:00,2023-10-23 03:58:12+00:00,,"### Motivation / Background

This Pull Request has been created because the current querying guide has no entries for CTE and the link to `with` method.

### Detail

This Pull Request adds the entry for CTE.

### Additional information

ref: https://github.com/rails/rails/pull/37944
ref: https://github.com/rails/rails/pull/46843

cc: @vlado @palkan 

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
",hachi8833,User,2,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49627,277819,49627,Use Rack::BodyProxy instead of RackBody,open,4,2023-10-13 18:30:03+00:00,2023-10-21 09:01:04+00:00,,"There is an inherit complexity with wrapping the Rack body inside Rails which can lead to bugs, like #49588.

While #49616 fixed the bug, it's probably not a good long-term solution.

If we go all the way back to 6a89850d, we can see this was the original behavior. However, we were trying to solve a separate issue with streaming bodies during disconnect.

The `live_stream_test#test_abort_with_full_buffer` test fails in this PR, but I wanted to raise that maybe this could be handled a different way.

Also there are two failures in `response_test` which are questions to me:

* `ResponseTest#test_[response.to_a].flatten_does_not_recurse_infinitely`
* `ResponseTest#test_compatibility_with_Rack::ContentLength`

The first seems it is actually resolved upstream, per this comment: https://github.com/rails/rails/pull/47092#discussion_r1087250243

The second means we broke `Rack::ContentLength` and there is a bit on this in #44953.

FWIW: I'm not proposing this PR exactly, but looking for a path forward and would love some feedback. :bow:

/cc @ioquatix 
",zzak,User,0,actionpack,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49624,47848,49624,Remove all deprecated code,open,4,2023-10-13 15:33:35+00:00,2024-01-30 00:13:33+00:00,,Remove all code deprecated in 7.1.,rafaelfranca,User,7,actionmailer,actionpack,activerecord,railties,docs,activejob,,,
https://api.github.com/repos/rails/rails/issues/49623,22231095,49623,Show warning if the url host option contains the protocol,open,4,2023-10-13 13:26:07+00:00,2023-11-23 19:11:33+00:00,,"### Motivation / Background

If you specify the protocol (e.g., 'https') within the `host` option in a URL, it may lead to unexpected results. This is because the host option is typically overridden by the default 'http' protocol, causing the URL to be constructed with 'http' instead of the desired 'https' protocol. If we want to get the result with https, we pass that in the protocol option (`protocol: ""https""`).

```ruby
# bin/rails c
# Loading development environment (Rails 7.2.0.alpha)

>> app.rails_health_check_url
=> ""http://www.example.com/up""

>> app.rails_health_check_url host: ""https://github.com""
=> ""http://github.com/up""
```

ref: https://github.com/rails/rails/issues/46822#issuecomment-1365401165

### Detail

This Pull Request adds a warning to the url host, it  shows the warning if  the url host options contains the protocol.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.

/cc: @ghiculescu, @zzak ",akhilgkrishnan,User,0,actionpack,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49614,1121058,49614,Variants support through url,open,0,2023-10-12 22:59:29+00:00,2023-10-13 16:39:04+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

Fixes #18818.  

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created to add support for specifying variants in the URL via `format+variant` syntax.  Besides being a requested feature from DHH, this would be useful for requesting variants of partials for rendering in different contexts, e.g. `post.html+list` could be used render a post that would be shown in a list page.

This PR is a continuation of these previous PRs:
- https://github.com/rails/rails/pull/23189
- https://github.com/rails/rails/pull/19245
- https://github.com/rails/rails/pull/18865

Notably, in the most recent PR ([23189](https://github.com/rails/rails/pull/23189)), @kaspth [mentioned](https://github.com/rails/rails/pull/23189#issuecomment-190349099) not moving forward with the PR due to internal discussions:

> Punted to 5.1 because of internal discussions where we concluded we need more time to evaluate changing the meaning of + in generated URLs.

It's been a while since then, so I'd like to see if we can reassess what those concerns were and if they're still applicable?  If they are -- I'm wondering if we can flag this behavior via configuration setting to allow apps to opt in/out of this behavior?

### Detail

The implementation is based on the prior work from the other PRs, which seems primarily centered around a couple of small changes to action_dispatch/routing/mapper.rb.

One particular area of interest for this PR is the change to actionpack/lib/action_dispatch/journey/path/pattern.rb.  I'm not sure how the previous PRs avoided touching this file, but it seems necessary in order to ensure the variant is ignored when routing with anchored routes.  Totally open to other approaches there, this is my first foray into that area of the Rails codebase.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",mgodwin,User,1,actionpack,railties,,,,,,,
https://api.github.com/repos/rails/rails/issues/49604,85654561,49604,Rails 7.1: incorrect path when submitting form for a singular resource,open,30,2023-10-12 13:40:59+00:00,2023-12-10 08:51:08+00:00,,"### Steps to reproduce
When submitting a form with an error, Rails 7.1 redirects to incorrect path when the resource is singular.
This may be an issue with Turbo (see expected and actual behaviors below).

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""rails"", ""~> 7.1.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :authors, force: true do |t|
    t.string :name
  end
end

class Author < ActiveRecord::Base
  validates :name,
            format: { with: /\A[a-zA-Z0-9-]{0,39}\z/, message: 'can only contain alphanumeric characters and dashes' },
            length: { maximum: 39 }
end

require ""rack/test""
require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.session_store :cookie_store, key: ""cookie_store_key""
  config.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    resource :author, only: %i[edit update]
  end
end

class AuthorsController < ActionController::Base
  include Rails.application.routes.url_helpers

  before_action :set_author, only: %i[edit update]

  def edit; end

  def update
    if @author.update(author_params)
      redirect_to edit_author_path
    else
      render :edit, status: :unprocessable_entity
    end
  end

  private

  def set_author
    @author = Author.find(1) # Actual application would use session to find author logged in
  end

  def author_params
    params.require(:author).permit(:name)
  end
end

class BugTest < Minitest::Test
  include Rack::Test::Methods

  Author.create!(name: 'name')

  def test_author_updated_success
    patch '/author', { author: { name: 'validName' } }
    assert_equal 'http://example.org/author/edit', last_response.headers['location']
  end

  def test_author_updated_failure
    patch '/author', { author: { name: 'invalid!!!name?' } }
    assert_equal 'http://example.org/author/edit', last_response.headers['location']
  end

  private

  def app
    Rails.application
  end
end
```

### Expected behavior
The request path should be `author/edit`.
The console in Rails 7.0.8 showed
```ruby
Started PATCH ""/author"" for 127.0.0.1 at 2023-10-12 09:22:13 -0400
Processing by AuthorsController#update as TURBO_STREAM
```

### Actual behavior
The request path is `author/#{author.id}”`.
The console in Rails 7.1.0 shows
```ruby
Started PATCH ""/author.1"" for 127.0.0.1 at 2023-10-12 09:21:10 -0400
Processing by AuthorsController#update as */*
```

### System configuration
**Rails version**: 7.1.0

**Ruby version**: 3.2.2
",jp524,User,1,routing,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/49597,191521,49597,update_all on a joined query with composite primary keys generates invalid SQL,open,3,2023-10-12 08:26:29+00:00,2024-01-15 23:00:57+00:00,,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :books, force: true, primary_key: %i[number] do |t|
    t.integer :number
    t.string :title
  end

  create_table :chapters, force: true, primary_key: %i[book_number number] do |t|
    t.integer :book_number
    t.integer :number
    t.string :title
  end
end

class Book < ActiveRecord::Base
  has_many :chapters, foreign_key: :book_number, inverse_of: :book
end

class Chapter < ActiveRecord::Base
  self.primary_key = %i[book_number number]

  belongs_to :book, foreign_key: :book_number, inverse_of: :chapters
end

class BugTest < Minitest::Test
  def test_association_stuff
    book = Book.create!(number: 1, title: ""First book"")
    book.chapters << Chapter.create!(book:, number: 1, title: ""Chapter one"")

    assert_equal 1, book.chapters.count
    assert_equal 1, Chapter.count
    assert_equal 1, Chapter.joins(:book).where(book: {title: ""First book""}).update_all(title: ""Chapter"")
  end
end
```

### Expected behaviour
The expected behaviour is for the test to pass.
The expected generated SQL is
```sql
UPDATE ""chapters"" SET ""title"" = ? WHERE (""chapters"".""book_number"", ""chapters"".""number"") IN (SELECT ""chapters"".""book_number"", ""chapters"".""number"" FROM ""chapters"" INNER JOIN ""books"" ""book"" ON ""book"".""number"" = ""chapters"".""book_number"" WHERE ""book"".""title"" = ?)  [[""title"", ""Chapter""], [""title"", ""First book""]]
```

A working example using rails 7.0 and [composite_primary_keys](https://github.com/composite-primary-keys/composite_primary_keys) gem is here:
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", ""~> 7.0.8""
  gem ""sqlite3""
  gem ""composite_primary_keys"", ""~> 14.0.0""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :books, force: true, primary_key: %i[number] do |t|
    t.integer :number
    t.string :title
  end

  create_table :chapters, force: true, primary_key: %i[book_number number] do |t|
    t.integer :book_number
    t.integer :number
    t.string :title
  end
end

class Book < ActiveRecord::Base
  has_many :chapters, foreign_key: :book_number, inverse_of: :book
end

class Chapter < ActiveRecord::Base
  self.primary_key = %i[book_number number]

  belongs_to :book, foreign_key: :book_number, inverse_of: :chapters
end

class BugTest < Minitest::Test
  def test_association_stuff
    book = Book.create!(number: 1, title: ""First book"")
    book.chapters << Chapter.create!(book:, number: 1, title: ""Chapter one"")

    assert_equal 1, book.chapters.count
    assert_equal 1, Chapter.count
    assert_equal 1, Chapter.joins(:book).where(book: {title: ""First book""}).update_all(title: ""Chapter"")
  end
end
```

### Actual behaviour
The test case fails with
```shell
ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: chapters.[""book_number"", ""number""]
```

The actual generated SQL is
```sql
UPDATE ""chapters"" SET ""title"" = ? WHERE ""chapters"".""[""""book_number"""", """"number""""]"" IN (SELECT ""chapters"".""[""""book_number"""", """"number""""]"" FROM ""chapters"" INNER JOIN ""books"" ""book"" ON ""book"".""number"" = ""chapters"".""book_number"" WHERE ""book"".""title"" = ?)  [[""title"", ""Chapter""], [""title"", ""First book""]]
```
### System configuration
**Rails version**: `7.1.1` and also `main`

**Ruby version**: 3.2.2
",jarl-dk,User,0,activerecord,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/49590,3908,49590,Render Partial Collection ignores layout parameter,open,3,2023-10-11 22:51:56+00:00,2023-12-13 14:11:28+00:00,,"### Steps to reproduce
Try to add a layout to rendering of a collection that uses `partial:collection` syntax.

`<%= render partial: @conversation.messages, as: :message, layout: ""message_wrapper"" %>`

### Expected behavior
The message wrapper partial should be invoked to wrap each partial rendered.

### Actual behavior
Layout parameter is ignored. Including both `partial` and `collection` parameters does respect the `layout` parameter, but hardcoding the partial name makes you lose the polymorphic rendering behavior that makes rendering of heterogeneous collections so valuable.

### System configuration
**Rails version**: 7.1

**Ruby version**: 3.2.2
",obie,User,1,actionview,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49586,149785,49586,Prevent large error messages when using middleware instrumentation,open,2,2023-10-11 15:49:49+00:00,2023-11-08 09:36:05+00:00,,"### Motivation / Background

When you use `ActiveSupport::Notifications` to instrument `process_middleware.action_dispatch`, certain errors may cause a very large error message to be generated. This can exhaust resources and make the application unresponsive

### Detail

This problem happens if the object that caused the exception has direct or indirect reference back to the application middleware stack and the error's exception message includes a representation of the object that raised. For example, a `NoMethod` error on an instance of `ActionDispatch::Request::Session` causes this as this has a reference to `ActionDispatch::Session::CookieStore` which contains a reference to the middleware stack through `@app`.

The error message grows incredibly large because the instrumenter runs around each middleware and handles an error by saving the error message to the `@payload` instance variable. When the next middleware runs, the it error message will include the string of the previously generated error message. This causes the length of the error to more than double for each middleware in the stack.

This effected a real application that I work on, and caused an error to be generated that was an estimated **61,000,000 characters long**.

This change prevents this problem by stopping the `@payload` instance variable from being inspected. `@payload` contains the `:exception_object` and `:exception` keys that cause the error message to grow and grow. The change makes sure `@middleware` is still inspected to match current behavior as much as possible.

This is reproducible in Rails 6.1.7.6, 7.0.8 and 7.1.0. Note that this is no longer an issue for `NoMethodError` in Ruby 3.3.0 preview 1, [as the exception message no longer includes the printed representation of the object](https://github.com/ruby/ruby/pull/6950). I haven't investigated if other standard library errors trigger this behavior.

I originally reported this to the Rails security team as it could be use to perform denial of service attacks on applications, but we decided that this is unlikely because of the very specific error that needs to be raised to trigger this issue.

### Additional information

Here's a minimal reproduction of the issue:

```ruby
# frozen_string_literal: true
require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  gem 'rails', '7.0.8'
  gem 'puma'
end

require ""rails""
require ""action_controller/railtie""
require ""action_view/railtie""

class App < Rails::Application
  config.root = __dir__
  config.consider_all_requests_local = true
  config.secret_key_base = 'i_am_a_secret'
  config.eager_load = false

  routes.append do
    root to: 'welcome#index'
  end
end

ActiveSupport::Notifications.subscribe('process_middleware.action_dispatch') do |x|
  # just subscribing is enough to trigger this issue
end

class WelcomeController < ActionController::Base
  def index
    session[:key] = 'initialize-session'
    session.non_existant_method
    render inline: 'never reached'
  end
end

App.initialize!

Rack::Server.start(app: App)

# see error message by visiting / on app
```

Here's the [error the example produces before](https://github.com/rails/rails/files/12871979/example_error_before_patch.txt) and [after](https://github.com/rails/rails/files/12871978/example_error_after_patch.txt) the change.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",zetter,User,1,actionpack,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49584,1080678,49584,Fix remove connection for shards,open,4,2023-10-11 14:47:34+00:00,2023-10-13 13:28:04+00:00,,"Don't change conn spec name if there are more connections

Previously we were setting `connection_specification_name` to `nil`
which would cause connection calls to fall back to the parent,
`ActiveRecord::Base`. This is fine in a single db app, but in a multi-db
app we should not do this unless it is the last remaining connection on
that class. So now we check the pool list size before setting the name
to `nil`. I move the `remove_connection_pool` call inside
`retrieve_connection` because you literally can't remove a connection
that does not exist, so it doesn't change behavior and is just more
accurate.

This also undoes the changes in https://github.com/rails/rails/pull/49403 that are no longer necessary
which requires us to remove the `not_default` shard connection in
another test since we don't want that one sticking around.

Related: https://github.com/rails/rails/pull/49382, https://github.com/rails/rails/pull/49403
Fixes https://github.com/rails/rails/issues/49373

cc/ @rafaelfranca @fractaledmind ",eileencodes,User,2,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49566,347921,49566,Improve docs for `order` (ActiveRecord),open,0,2023-10-10 14:01:19+00:00,2024-01-05 06:44:44+00:00,,"When reading documentation I was confused about 2 things:

- What order directions are actually supported? There was no mention of ascending order. While playing with my code I also discovered that it allows a few variations (uppercase and string variants).

- How do you swap columns in this example: `User.order(:name, email: :desc)`. I forgot you can chain multiple `order` calls, not mentioned in the docs.",semaperepelitsa,User,0,activerecord,docs,,,,,,,
https://api.github.com/repos/rails/rails/issues/49555,1154398,49555,Allow SchemaDumper to ignore schemas,open,4,2023-10-09 17:30:03+00:00,2023-10-13 23:07:20+00:00,,"### Motivation / Background

When generating the schema file, SchemaDumper can be instructed to ignore tables based on the name or a Regex. This PR adds the same functionality applied to schemas using the `ignored_schemas` attribute.

This can be used to ignore schemas that are automatically generated by extensions and cannot be re-created. For example, TimescaleDB creates several schemas to track it's internal configuration and metadata. These schemas are not created as part of loading the schema and will cause Rails database setup to fail.

### Detail

This Pull Request add functionality to `SchemaDumper` to allow patterns to be specified that will be compared against the detected schema names and will keep `SchemaDumper` from outputting a `create_schema` call in the generated `schema.rb`

### Additional information

None

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",cbisnett,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49545,15077823,49545,"Incorrect value of current shard inside log tags - always falls back to ""default"" ",open,2,2023-10-08 21:12:00+00:00,2023-11-20 15:14:18+00:00,,"### Steps to reproduce
1. Create a sample app with multiple db shards, let's say ""cats"" & ""dogs"".
2. Implement abstract class ""AnimalsRecord"" that can connect to shards ""cats"" & ""dogs"".
3. In `application.rb` implement shard_resolver (`config.active_record.shard_resolver`) to always return ""dogs"".
4. Configure logger to have tag that represents the current shard (`AnimalsRecord.current_shard`)

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
  #config/application.rb
  config.active_record.shard_resolver = -> (request) { :dogs }
```

```ruby
 #config/environments/development.rb
  logger = ActiveSupport::Logger.new(STDOUT)
  logger.formatter = config.log_formatter
  config.logger = ActiveSupport::TaggedLogging.new(logger)
  config.log_tags = [:request_id, lambda { |request| AnimalsRecord.current_shard }]
```


### Expected behavior
The logs should indicate the `[dogs]` tag set by a shard resolver

### Actual behavior
The logs indicate the `[default]` tag, ignoring the current shard configuration. Please see SS below
<img width=""653"" alt=""image"" src=""https://github.com/rails/rails/assets/15077823/c4a0c9b7-1e94-4fc2-8901-59b8b6740507"">


Sample app where problem can be observed: https://github.com/pospieszynski/testapp
Related problem where current shard is not set correctly this time for ActionCable channel was mentioned here https://github.com/rails/rails/issues/49052


Thanks for looking into it


### System configuration
Rails version: 7.0.7.2

Ruby version: 3.0.2",pospieszynski,User,0,railties,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/49540,36794420,49540,Add download options to S3 service configuration,open,2,2023-10-08 11:15:00+00:00,2023-10-09 09:13:39+00:00,,"### Motivation / Background

Currently, activestorage S3 service supports additional upload options, for example [customer-provided server-side encryption keys](https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3/Object.html#put-instance_method):
```yml
# config/storage.yml
s3:
  service: S3
  # ...
  upload:
    sse_customer_algorithm: AES256
    sse_customer_key: KEY
    sse_customer_key_md5: KEY_MD5
```

Files uploaded with customer-provided keys can only be fetched using those same options again ([ref](https://docs.aws.amazon.com/AmazonS3/latest/userguide/ServerSideEncryptionCustomerKeys.html)), and they have to be passed to e.g. [Aws::S3::Object#get](https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3/Object.html#get-instance_method).

Because activestorage supports these options only for upload, and not for download as well, calling `Attachment#download` results in the following error if you uploaded the file with your own keys:
> Aws::S3::Errors::InvalidRequest: The object was stored using a form of Server Side Encryption. The correct parameters must be provided to retrieve the object

Similarily, `S3Service#exist?` fails as well if the keys aren't provided, though the error is a bit more ambiguous:
> Caused by Aws::Waiters::Errors::UnexpectedError: stopped waiting due to an unexpected error: Aws::S3::Errors::BadRequest

### Detail

This PR adds `download` key to S3 service configuration, allowing you specify options for downloading files which are passed to relevant S3 methods:
```yml
# config/storage.yml
s3:
  service: S3
  # ...
  upload:
    sse_customer_algorithm: AES256
    sse_customer_key: KEY
    sse_customer_key_md5: KEY_MD5
  download:
    sse_customer_algorithm: AES256
    sse_customer_key: KEY
    sse_customer_key_md5: KEY_MD5
```

With these options, `Attachment#download` (and `Attachment#download_chunk`) and `S3Service#exist?` return expected results for objects uploaded with customer-provided SSE keys.

### Additional information

`download` options are passed to [`Aws::S3::Object#get`](https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3/Object.html#get-instance_method), [`Aws::S3::Object#exists?`](https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3/Object.html#exists%3F-instance_method) and [`Aws::S3::Object#head`](https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3/Object.html#head-instance_method) methods, so the options used must be supported by all three methods.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",lovro-bikic,User,0,docs,activestorage,,,,,,,
https://api.github.com/repos/rails/rails/issues/49534,20938712,49534,Add `ActiveModel::Validations::ModelValidator`,open,10,2023-10-07 19:11:42+00:00,2024-01-05 19:30:35+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

Using `ActiveModel::Model` is [very useful to create form objects](https://thoughtbot.com/blog/activemodel-form-objects) that have custom logic, while still preserving the Rails-way of building models, controllers, and views.

They can be very handy to save multiple objects at once, for example. The problem is that there's not a good way to validate the associated objects. While Active Record has a `AssociatedValidator`, ActiveModel lacks one, so have to manually write validations like:

```rb
class Registration
  attr_accessor :account, :profile
  validate :account_is_valid
  validate :profile_is_valid

  def save!
    if valid?
      # save objects
    end
  end

  private

  def account_is_valid
    errors.add(:account, ""is invalid"") if account.invalid?
  end

  def profile_is_valid
    errors.add(:profile, ""is invalid"") if profile.invalid?
  end
end
```

### Detail

This PR adds an `ActiveModel::Validations::ModelValidator` validator, which is similar to the `ActiveRecord::Validations::AssociatedValidator` but doesn't require the associated object to be an `ActiveRecord` object.

The example above could be rewritten as:

```rb
class Registration
  attr_accessor :account, :profile
  validates_model :account, :profile

  def save!
    if valid?
      # save objects
    end
  end
end
```
### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",MatheusRich,User,1,activemodel,activerecord,needs work,,,,,,
https://api.github.com/repos/rails/rails/issues/49530,54629302,49530,Show deprecation warning when using `:required` on `belongs_to` associations,open,7,2023-10-07 16:40:24+00:00,2023-10-20 01:39:35+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

`:required` for `belongs_to` has been considered to be ['deprecated' since `v5.0`](https://github.com/rails/rails/pull/18937) but has never had a deprecation warning. My guess is that at the time, the framework didn't have a well established pattern / process for deprecating features as it does now, other than including this information in public documentation:
https://github.com/rails/rails/blob/46857fb7f51e084e9b26edc80d152b700ec57c7d/activerecord/lib/active_record/associations.rb#L1855-L1856

Adding one now (probably in the `v7.2` release) will allow us to completely remove this feature in `v7.3` (I'm unsure if this is an actual planned release version).

### Detail

Adds a deprecation warning when:
- using the `:required` option with `belongs_to` associations
- setting the global `config.active_record.belongs_to_required_by_default` configuration to `false`
- setting the per model `#belongs_to_required_by_default` configuration attribute to `false` (this is also set to `false` when the global config is set to false but I think it's fine to show the warning regardless since both use the same naming convention)

Also removes any public documentation encouraging the use of this feature and relevant config.

I left the following documentation untouched as it's been written in the context of `v5.0` where this is still available:
https://github.com/rails/rails/blob/e5124aed3fdcacb05204391e236c4fd60a1e6e74/guides/source/upgrading_ruby_on_rails.md?plain=1#L1569-L1600

https://github.com/rails/rails/blob/e5124aed3fdcacb05204391e236c4fd60a1e6e74/guides/source/configuring.md?plain=1#L156

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

I am happy to take ownership of this deprecation and follow up with a PR for the removal :)

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",joshuay03,User,0,activerecord,railties,docs,,,,,,
https://api.github.com/repos/rails/rails/issues/49527,277819,49527,Enable remote chrome selenium tests for actiontext,open,1,2023-10-07 09:04:28+00:00,2023-10-08 20:43:54+00:00,,"Blocks: rails/buildkite-config#33

Previous works: #47030, #47127

> This is going to affect users' apps. What is the impact of having this option by default?

RF was concerned this might impact users apps, but I'm not seeing how an actiontext test case would do so, if anyone has any ideas!


cc @hahmed @matthewd @rafaelfranca 
",zzak,User,0,actiontext,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49520,27399986,49520,strict_loading is ignored when using a subsequent .includes on a nested record,open,4,2023-10-06 20:17:56+00:00,2023-12-18 11:33:14+00:00,,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""7.1.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new($stdout)

ActiveRecord::Schema.define do
  create_table :authors, force: true do |t|
  end

  create_table :book_authors, force: true do |t|
    t.integer :book_id
    t.integer :author_id
  end

  create_table :books, force: true do |t|
    t.integer :library_id
  end

  create_table :libraries, force: true do |t|
  end

end

class ApplicationRecord < ActiveRecord::Base
  self.abstract_class = true
end

class BookAuthor < ApplicationRecord
  belongs_to :book
  belongs_to :author
end

class Author < ApplicationRecord
  has_many :book_authors
  has_many :books, through: :book_authors
end

class Book < ApplicationRecord
  has_many :book_authors
  has_many :authors, through: :book_authors
  belongs_to :library
end

class Library < ApplicationRecord
  has_many :books
end


class BugTest < Minitest::Test
  def test_association_stuff
    library = Library.create!

    author1 = Author.create!
    author2 = Author.create!

    author1.books << Book.create!(library: library)
    author1.books << Book.create!(library: library)

    author2.books << Book.create!(library: library)
    author2.books << Book.create!(library: library)

    library = Library.includes(:books).strict_loading.first

    assert_raises ActiveRecord::StrictLoadingViolationError do
      library.books.each do |book|
        puts book.authors
                 .includes(:books) # Remove this line to see the expected behavior
                 .each(&:inspect)
      end
    end
  end
end
```

### Expected behavior
StrictLoadingViolationError should be thrown

### Actual behavior
N+1 queries are run. No exception is thrown

### System configuration
**Rails version**: `7.1.0`

**Ruby version**: `ruby 3.0.6p216 (2023-03-30 revision 23a532679b) [arm64-darwin22]`
",ivangreene,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/49513,2575027,49513,Document `ActionDispatch::IntegrationTest#register_encoder` [ci skip],open,4,2023-10-06 14:16:14+00:00,2024-01-30 03:13:49+00:00,,"### Motivation / Background

As of [#47144][], `response.parsed_body` supports parsing both `format: :json` and `format: :html` responses. This commit updates the documentation to reflect that.

Additionally, it cribs the `ActionDispatch::IntegrationTest` documentation that mentions `register_encoder`, and copies it to the method definition so that the documentation entry for that method has descriptive information.

[#47144]: https://github.com/rails/rails/pull/47144

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,0,actionpack,docs,,,,,,,
https://api.github.com/repos/rails/rails/issues/49512,5122678,49512,`Rails::Generators::Actions#gem_group`: Prepend existing gem groups,open,0,2023-10-06 12:55:22+00:00,2023-10-06 13:21:46+00:00,,"### Motivation / Background

Prior to this commit, calls to `gem_group` would amend the `Gemfile` even if there was an existing [gem group][], resulting in duplication.

This commit prepends existing gem groups with the added gem.

[gem group]: https://bundler.io/guides/groups.html

### Detail

Because `gem_group` invokes `instance_eval(&block)` via `with_indentation`, a call to `gem` is made. This means we needed to do the following:

1. Check if the `Gemfile` contains an existing gem group in `gem_group`.
2. Pass information about that  existing gem group to the `gem` method.

### Additional information

Because the `Gemfile` used in existing tests has a `:test` and `:development, :test` groups, we modify the existing tests to use groups not used in the `Gemfile`.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",stevepolitodesign,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49473,2439912,49473,Strict loading in `:n_plus_one_only` mode should not eager load child associations,open,0,2023-10-03 15:23:23+00:00,2023-10-04 10:57:29+00:00,,"### Description
Strict loading in `:n_plus_one_only` mode is designed to prevent performance issues when deeply traversing associations. It allows `Person.find(1).posts`, but _not_ `Person.find(1).posts.map(&:category)`. This fix avoids the surprise that occurs when `person.posts.first` eagerly loads the whole association rather than allowing the user to manage the child association.

This fixes a serious ordering issue. Without strict loading, `person.posts.first` is guaranteed to return the first post in primary key order. On the other hand, `person.posts.load.first` is nondeterministic. The database is not guaranteed to return in a consistent order, in particular under load with other operations occurring. This is a rude surprise when trying to use `:n_plus_one_only` mode.

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
This can be reproduced via any `has_many` association. Here's an example using ActiveRecord test models:
```ruby
person = Person.find(1)
person.strict_loading!(mode: :n_plus_one_only)
person.posts.first
# SELECT * FROM posts WHERE person_id = 1; -- non-deterministic order
```

### Expected behavior
<!-- Tell us what should happen -->
```ruby
person = Person.find(1)
person.strict_loading!(mode: :n_plus_one_only)
person.posts.first # this is 1+1, not N+1
# SELECT * FROM posts WHERE person_id = 1 ORDER BY id LIMIT 1;
```

### Actual behavior
<!-- Tell us what happens instead -->
```ruby
person = Person.find(1)
person.strict_loading!(mode: :n_plus_one_only)
person.posts.first
# SELECT * FROM posts WHERE person_id = 1; -- non-deterministic order
```

### Proposed fix
Please see #48785 

### System configuration
**Rails version**: `rails (7.0.7.2)`
**Ruby version**: `ruby 3.2.2`
",reid-rigo,User,0,activerecord,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/49459,29257107,49459,Reading from read replica using connected_to method will not enforce limit query,open,17,2023-10-02 18:41:57+00:00,2024-01-02 14:11:29+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
ActiveRecord::Base.connected_to(role: :reading) { Customer.where(name: ""Roberto"") }
```

### Expected behavior
<!-- Tell us what should happen -->
SELECT ""customers"".* FROM ""customers"" WHERE ""customers"".""name"" = 'Roberto' LIMIT 11.

### Actual behavior
<!-- Tell us what happens instead -->
SELECT ""customers"".* FROM ""customers"" WHERE ""customers"".""name"" = 'Roberto' 

Query without limit can lead to a query that would take a lot of time to execute, so I am wondering why using `connected_to` will not add limit query implicitly exactly as if we are executing query without using `connected_to`

Doing the following query in rails console
```ruby
Customer.where(name: ""Roberto"")
```

will generate the following sql
SELECT ""customers"".* FROM ""customers"" WHERE ""customers"".""name"" = 'Roberto' LIMIT 11.

### System configuration
**Rails version**: 6.0.5.1

**Ruby version**: 2.7.6
",taman9333,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49445,2575027,49445,Support multiple analyzers during `ActiveStorage::Blob#analyze`,open,3,2023-10-01 15:18:51+00:00,2024-01-02 10:13:34+00:00,,"
### Motivation / Background

Prior to this commit, Blob analysis could only involve a single Analyzer. By default, the metadata typically includes information about dimensions (for image and video).

If applications need to include more involved analysis, they also have to re-implement the dimension analysis on their own (either through composition, inheritance, or copy-pasting).

### Detail

This commit extends analysis to support *multiple* anaylzer classes by replacing [Enumerable#detect][] with [Enumerable#select][], and a [Hash#merge][] with an [Enumerable#reduce][].

[Enumerable#detect]: https://ruby-doc.org/core-3.0.2/Enumerable.html#method-i-detect
[Enumerable#select]: https://ruby-doc.org/core-3.0.2/Enumerable.html#method-i-select
[Hash#merge]: https://ruby-doc.org/3.2.2/Hash.html#method-i-hash
[Enumerable#reduce]: https://ruby-doc.org/core-3.0.2/Enumerable.html#method-i-reduce

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,0,docs,activestorage,,,,,,,
https://api.github.com/repos/rails/rails/issues/49434,59967,49434,"Using group and aggregated functions on dates with sqlite3, returns date as a string and not as a Time object.",open,7,2023-09-29 17:36:37+00:00,2023-10-06 18:22:12+00:00,,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.timestamps
  end
end

class Post < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_association_stuff
    Post.create!

    assert_kind_of Time, Post.group(:created_at).pluck(""MAX(created_at) AS last_date"").first
  end
end
```

### Expected behavior
Returned date must be a Time object.
2023-09-29 00:00:00 -0400 - Time

### Actual behavior
Returned date is a String.
2023-09-29 17:32:20.148108 - String

```
Failure:
BugTest#test_association_stuff [sqlite.rb:39]:
Expected ""2023-09-29 17:35:06.041688"" to be a kind of Time, not String.
```

NOTE: Postgresql adapter returns a Time object.

### System configuration
**Rails version**:
main@d38dcdc

**Ruby version**:
3.2.2",mariochavez,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/49425,47848,49425,No more _klass,open,2,2023-09-29 00:36:08+00:00,2023-09-29 20:21:39+00:00,,"We use `klass` because `class` is a reserved word in Ruby.

But, any word ending with the suffix `_class` isn't reserved, so we don't need to use the suffix `_klass` anywhere.",rafaelfranca,User,1,actionpack,activerecord,actionview,activejob,actioncable,,,,
https://api.github.com/repos/rails/rails/issues/49388,688886,49388,Postgres: use ANY instead of IN for array inclusion queries,open,25,2023-09-26 16:23:19+00:00,2024-02-01 16:27:56+00:00,,"### Motivation

`ANY` has several advantages over `IN`:
- using a single bind param allows the use of prepared statements
- query parsing is faster
- `pg_stat_statements` churn can be avoided
- queries are less likely to be truncated in `pg_stat_activity` (when using prepared statements)

### Detail

Currently, array inclusion queries like `where(id: [1,2])` generate the SQL `id IN (1, 2)`. This PR replaces that with `id = ANY ('{1,2}')`, or `id = ANY ($1)` when prepared statements are enabled.

`NOT IN` is implemented using `!= ALL` https://stackoverflow.com/a/11730845

See also the forum post: https://discuss.rubyonrails.org/t/83667

### Additional information

This is measurably faster on Postgres 15.4. Here are the min and max iterations per second from several benchmark runs:

- 490 - 600 on the main branch
- 750 - 950 on this branch with `BENCHMARK_PREPARED=1`
- 780 - 1020 on this branch with `BENCHMARK_PREPARED=0`

<details><summary>Here's the benchmark:</summary>

```rb
# Adapted from activerecord/examples/performance.rb

require ""active_record""
require ""benchmark/ips""

TIME    = (ENV[""BENCHMARK_TIME""] || 20).to_i
RECORDS = (ENV[""BENCHMARK_RECORDS""] || TIME * 1000).to_i

conn = {
  adapter: ""postgresql"",
  database: ""postgres"",
  prepared_statements: ENV[""BENCHMARK_PREPARED""] == ""1""
}

ActiveRecord::Base.establish_connection(conn)

class User < ActiveRecord::Base
  connection.create_table :users, force: true do |t|
    t.string :name, :email
    t.timestamps
  end
end

def progress_bar(int); print ""."" if (int % 100).zero? ; end

puts ""Generating data...""

module ActiveRecord
  class Faker
    LOREM = ""Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse non aliquet diam. Curabitur vel urna metus, quis malesuada elit.
     Integer consequat tincidunt felis. Etiam non erat dolor. Vivamus imperdiet nibh sit amet diam eleifend id posuere diam malesuada. Mauris at accumsan sem.
     Donec id lorem neque. Fusce erat lorem, ornare eu congue vitae, malesuada quis neque. Maecenas vel urna a velit pretium fermentum. Donec tortor enim,
     tempor venenatis egestas a, tempor sed ipsum. Ut arcu justo, faucibus non imperdiet ac, interdum at diam. Pellentesque ipsum enim, venenatis ut iaculis vitae,
     varius vitae sem. Sed rutrum quam ac elit euismod bibendum. Donec ultricies ultricies magna, at lacinia libero mollis aliquam. Sed ac arcu in tortor elementum
     tincidunt vel interdum sem. Curabitur eget erat arcu. Praesent eget eros leo. Nam magna enim, sollicitudin vehicula scelerisque in, vulputate ut libero.
     Praesent varius tincidunt commodo"".split

    def self.name
      LOREM.grep(/^\w*$/).sort_by { rand }.first(2).join "" ""
    end

    def self.email
      LOREM.grep(/^\w*$/).sort_by { rand }.first(2).join(""@"") + "".com""
    end
  end
end

begin
  puts ""Inserting #{RECORDS} users...""
  RECORDS.times do |record|
    user = User.create(
      created_at: Date.today,
      name: ActiveRecord::Faker.name,
      email: ActiveRecord::Faker.email
    )
    progress_bar(record)
  end
  puts ""Done!\n""

  Benchmark.ips(TIME) do |x|
    x.report ""Model.where(id: [...])"" do
      User.where(id: (1..100).to_a).count
    end
  end
ensure
  User.connection.drop_table :users
end
```

</details>",seanlinsley,User,17,activerecord,PostgreSQL,ready,,,,,,
https://api.github.com/repos/rails/rails/issues/49382,47848,49382,Add failing test for remove_connection,open,0,2023-09-26 00:16:29+00:00,2023-09-28 17:05:37+00:00,,"It is not removing all the shards connections when we call it.

It is because the first time we call it we are resetting the `connection_specification_name` so the next call doesn't find the right connection pool.",rafaelfranca,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49377,2575027,49377,Action View: Remove internal calls to `tag` with positional arguments,open,6,2023-09-25 13:10:59+00:00,2024-01-29 14:28:56+00:00,,"### Motivation / Background
    
    
Follow-up to [#49371][]
    
In the wake of the deprecation of `tag(:div)` in favor of `tag.div`, this commit replaces all calls made internally with the more modern syntax.

This change is separate from the deprecation cycle, since there are **slight** behavioral changes, since the HTML output changes from self-closing elements like `<input />` to open void elements like `<input>`.

[#49371]: https://github.com/rails/rails/pull/49371

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,0,activerecord,railties,actionview,,,,,,
https://api.github.com/repos/rails/rails/issues/49371,2575027,49371,Deprecate `tag` with positional arguments,open,7,2023-09-25 00:50:17+00:00,2024-02-02 19:45:53+00:00,,"The bulk of this diff is related to indentation changes, so it's best reviewed [ignoring spacing changes](https://github.com/rails/rails/pull/49371/files?w=1)
---

### Motivation / Background

Modern evolutions of the `ActionView::Helpers::TagHelper#tag` method are intended to be called _on_ the `TagBuilder` instance itself instead of with positional arguments.

For example, `tag(""div"")` would be called with `tag.div`.

According to the [Legacy Syntax](https://api.rubyonrails.org/classes/ActionView/Helpers/TagHelper.html#method-i-tag-label-Legacy+syntax) heading of the [ActionView::Helpers::TagHelper#tag](https://api.rubyonrails.org/classes/ActionView/Helpers/TagHelper.html#method-i-tag) guides:

> The following format is for legacy syntax support. It will be deprecated in future versions of Rails.

Since deprecations must occur during releases, this commit proposes that 7.2 be the release to start the deprecation process so that a subsequent release can remove ""Legacy syntax"" support entirely.

### Detail

This commit adds a deprecation warning to encourage callers to invoke the helper in the more modern style.

Internally, Rails utilizes the positional argument syntax in several places. Since deprecations must be part of minor version releases, this commit wraps the internal invocations in `ActionView.deprecator.silence` blocks so that they can remain while the deprecation is made public. This compromise buys the framework time to re-structure those invocations to be compatible with the more modern syntax before the next major release.

There are several calls to `tag` with positional arguments in the test suite. This commit wraps those as well. In the future, some of those tests will be able to remove those blocks, while other tests will be able to be removed entirely once that style of invocation is no longer supported.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,0,activerecord,actionview,,,,,,,
https://api.github.com/repos/rails/rails/issues/49369,2575027,49369,Action View: Reduce public API of `tag` helper,open,1,2023-09-24 21:36:45+00:00,2023-12-02 13:53:42+00:00,,"### Motivation / Background

The `TagBuilder` instance returned by the
[ActionView::Helpers::TagHelper#tag][] method has the ability to build various HTML elements through its reliance on `method_missing`. The magic of that instance hinges on the fact that it has a **minimal** public interface, and transforms missing methods names into HTML elements. For example, calling `tag.div` invokes a missing `#div` method, which renders a `<div>` element.

There are two exceptional cases:

* `tag.p` is defined, since the existing [Kernel#p][] definition would prevent the underlying `#method_missing` invocation
* `tag.attributes` is a defined method to transform `Hash` instances and keyword arguments in HTML attribute strings

In addition to those two _intentional_ exceptions, there are also several methods that are incidentally part of the public interface:

* `#tag_string`
* `#content_tag_string`
* `#tag_options`
* `#boolean_tag_option`
* `#tag_option`

Along with those methods, the class also includes [OutputSafetyHelper][] and [CaptureHelper][], which expand surface area of the class's public interface even further.

While it's unlikely that these methods would collide with method invocations intended to construct HTML elements, they still impact that design of the object.

The ""public"" nature of the `TagBuilder` interface has some subtle nuances. While it **is** marked with `:nodoc:`, instances are returned by a public `tag` method, despite it being considered a private class only meant for internal consumption.

That same is true for the incidentally public methods mentioned above: no consuming applications should be invoking `#tag_string` or `#tag_options`. While that's true, those methods _are_ being invoked **directly** by other Action View classes.

### Detail

This commit removes those invocations, and instead replaces them with public method calls.

In cases where the tag name is statically know ahead of time, they're replaced with calls to that method (for example, `tag(:option)` becomes `tag.option`). When they're dynamic, they're replaced by calls to [public_send][] (for example, `tag(name)` becomes
`tag.public_send(name)`).

The majority of these changes are painless, with one exception. Some calls to the `#tag` helper also pass an `open` positional argument that isn't part of the `TagBuilder` class's public interface. As a result, that becomes slightly more complicated, and requires some String mutation to continue to pass the test suite.

This commit also removes the `OutputSafetyHelper` and `CaptureHelper` modules from the class, and delegates to the methods it depended on to j`@view_context`.

Hopefully, calls to `#tag` with positional arguments are less and less common, since the documentation describes it as a [Legacy Syntax][] marked for deprecation in future versions of Rails.

[Kernel#p]: https://ruby-doc.org/3.2.2/Kernel.html#method-i-p
[ActionView::Helpers::TagHelper#tag]: https://api.rubyonrails.org/classes/ActionView/Helpers/TagHelper.html#method-i-tag
[public_send]: https://ruby-doc.org/3.2.2/Object.html#method-i-public_send
[Legacy Syntax]: https://api.rubyonrails.org/classes/ActionView/Helpers/TagHelper.html#method-i-tag-label-Legacy+syntax
[OutputSafetyHelper]: https://api.rubyonrails.org/classes/ActionView/Helpers/OutputSafetyHelper.html
[CaptureHelper]: https://api.rubyonrails.org/classes/ActionView/Helpers/CaptureHelper.html

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,0,actionview,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49368,2575027,49368,Action View: Document `TagBuilder` as part of the public interface,open,6,2023-09-24 21:19:34+00:00,2023-12-02 13:44:14+00:00,,"### Motivation / Background

Since the `ActionView::Helpers::TagHelper::TagBuilder` class is marked with
`:nodoc:`, the `tag.attributes` method isn't directly discoverable by
the [API Documentation][], despite it being mentioned under the
[Building HTML Attributes][] subheading of the [tag][] helper method
documentation.

Similarly, methods like `tag.div` and `tag.h1` are also not
discoverable, since they're dependent on method missing.

### Detail

This commit promotes `ActionView::Helpers::TagHelper::TagBuilder` to be
part of Action View's public API. This commit marks all of its methods
as `:nodoc:` to omit them from the public interface, then adds RubyDoc
comments for `#attributes` and the generated tag building methods like
`#div` and `#a` to provide hooks for the [API Documentation][] to serve
search results.

To further reduce the publicly discoverable interface, this commit also
removes the `CaptureHelper` and `OutputSafetyHelper` modules from the
class. To preserve the existing behavior, delegate those methods to the
`@view_context` instance variable instead.

[API Documentation]: https://api.rubyonrails.org
[Building HTML Attributes]: https://api.rubyonrails.org/classes/ActionView/Helpers/TagHelper.html#method-i-tag-label-Building+HTML+attributes
[tag]: https://api.rubyonrails.org/classes/ActionView/Helpers/TagHelper.html#method-i-tag

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",seanpdoyle,User,2,actionview,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49365,25947043,49365,Update Action Cable Overview guide,open,1,2023-09-24 04:07:09+00:00,2023-10-24 00:54:26+00:00,,"### Motivation / Background

The `actioncable-examples` repo referenced in the guide is no longer maintained: https://github.com/rails/actioncable-examples/pull/46#issuecomment-1647505744. We should remove it from the guide. 

I also took the opportunity to update the guide with new sections on importing JavaScript channel files, `bin/rails generate channel`, and stopping streams.

### Detail

This Pull Request changes the following:

* Remove unmaintained `actioncable-examples` reference. For more info: https://github.com/rails/actioncable-examples/pull/46#issuecomment-1647505744
* Add `disconnect` and `unsubscribed` methods to the example connection and channel files.
* Add reference for `bin/rails generate channel`
* Add guide on importing JavaScript channel files with import maps.
* Add section on stopping streams

### Additional information

The new sections are easily found in the API documentation. That said, I still think it's valuable to add them to the guide for new developers.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",julianfssen,User,2,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49360,6014046,49360,"Use `ruby file: "".ruby-version""` for new apps",open,9,2023-09-23 20:06:37+00:00,2024-01-01 19:08:50+00:00,,"### Motivation / Background

Previously, new apps would have a Ruby version set in both the Gemfile and the .ruby-version file. This duplication makes it more difficult to quickly change an application's ruby version as users must remember to update multiple files.

### Detail

This commit updates the app generator's Gemfile to read the Ruby version from the .ruby-version file. Since this feature was introduced in the latest version of Bundler, it will only be enabled if a supported version of Bundler is used.

### Additional information

Alternatively, another solution mentioned on the original PR adding .ruby-version was that the .ruby-version file could be removed once rvm/rbenv support reading the Ruby version from the Gemfile. This has a downside that many other tools like chruby do not have plans to support reading a Ruby version from the Gemfile, and so users of those tools would have a worse experience if the .ruby-version file is removed.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",skipkayhil,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49355,1088050,49355,ActiveRecord: `preload` for `has_many through` with `source_type` provided fails if `has_many through` association without `source_type` was specified in `preload` earlier.,open,2,2023-09-22 23:02:51+00:00,2023-09-23 14:04:08+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  gem ""rails"", ""7.0.8""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new($stdout)

ActiveRecord::Schema.define do
  create_table ""invoices"", force: :cascade, &:timestamps

  create_table ""invoice_payments"", force: :cascade do |t|
    t.integer ""invoice_id""
    t.integer ""source_id""
    t.string ""source_type""
  end

  create_table ""checks"", force: :cascade, &:timestamps

  create_table ""charges"", force: :cascade do |t|
    t.integer ""card_id""
  end

  create_table ""cards"", force: :cascade, &:timestamps
end

class Invoice < ActiveRecord::Base
  has_many :invoice_payments
  has_many :charges, through: :invoice_payments, source: :source, source_type: ""Charge""
end

class InvoicePayment < ActiveRecord::Base
  belongs_to :invoice
  belongs_to :source, polymorphic: true
end

class Check < ActiveRecord::Base
end

class Charge < ActiveRecord::Base
  belongs_to :card
end

class Card < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_preload
    invoice = Invoice.create!
    check = Check.create!
    card = Card.create!
    charge = Charge.create!(card: card)
    InvoicePayment.create!(invoice: invoice, source: charge)
    InvoicePayment.create!(invoice: invoice, source: check)

    assert_equal invoice, Invoice.preload(:invoice_payments).first # works
    assert_equal invoice, Invoice.preload(:charges).first # works
    assert_equal invoice, Invoice.preload(:invoice_payments, :charges).first # works
    assert_equal invoice, Invoice.preload(:charges, :invoice_payments).first # works
    assert_equal invoice, Invoice.preload({ charges: :card }, :invoice_payments).first # works
    assert_equal invoice, Invoice.preload(:invoice_payments, { charges: :card }).first # fails
  end
end

```

### Expected behavior
```
Invoice.preload(:invoice_payments, { charges: :card }).first
```
Should return first invoice with preloaded associations provided in `preload` same way how 
```
Invoice.preload({ charges: :card }, :invoice_payments).first
```
does. Order inside `preload` must not matter.

### Actual behavior
Following error is raised:
```
ActiveRecord::AssociationNotFoundError: Association named 'card' was not found on Check; perhaps you misspelled it?
```

### System configuration
**Rails version**: 7.0.8
**Ruby version**: 3.2.2
",EnotPoloskun,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/49348,1558372,49348,Get fixture label from a record,open,1,2023-09-21 21:27:36+00:00,2023-11-08 22:06:07+00:00,,"### Motivation / Background

This Pull Request has been created because I'd like to get the label of a fixture from a record, if it was created by a fixture. 

### Detail

When working with fixtures, it inserts records in the database at the beginning of the test suite. I like to validate those fixtures to avoid inserting invalid data for testing. In case of validation error, I need to find out which fixture created the failing record.
For some models it's easy to go from one record  to the fixture that created it, for other models it can be more complicated, for example a join model with an id and foreign_keys.

This PR introduces `ActiveRecord::FixtureSet.label_of(record)` which returns the fixture label of the record if it was created by a fixture.

I'd like to get feedback regarding this PR and could it be useful in the project ?
This is working for records with primary_key. 
~~Composite primary keys are not supported, should it be supported in this PR ?~~

**Edit**
I added support for composite primary keys.

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",jean-francois-labbe,User,2,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49337,5657035,49337,Include connection details into the exception messages raised by adapters,open,10,2023-09-20 20:12:27+00:00,2024-02-02 15:25:33+00:00,,"Fixes #49331.
Fixes #50935.",fatkodima,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49332,76983,49332,Handle update and update! on scopes properly,open,18,2023-09-20 14:34:30+00:00,2023-11-29 20:25:21+00:00,,"### Motivation / Background

This Pull Request has been created because the current behavior is misleading and could cause potential data loss. If you define a scope and you try to call an `update` or `update!` on the scope then you would expect that the updates will be executed on the scope and not on every record by ignoring the scope completely.

If I wanted to update every record, then I would call the `update` or `update!` on the model directly.

### Detail

This change updates the behavior of the `update` and `update!` methods of the `ActiveRecord::Relation`. If you pass a set of ids then the update will be executed on those records that match the selected ids but also satisfy the scope.

With this change, we also make the `update` and `update!` methods symmetric regardless of whether the first parameter was `:all` or a set of ids.

### Additional information

This might be considered a breaking change, but I do believe this is an actual bugfix since the behavior was misleading and it was asymmetric depending on the first argument.

Consider the following scenario, if you want to update the `Model` record and set all of the `sent_at` attributes to the actual time if the items have been sent, then this would work.

```ruby
Model.unsent.update!(:all, sent_at: Time.zone.now)
```

But if you want to reduce it to just a subset of ids:

```ruby
Model.unsent.update!([1, 2], { sent_at: Time.zone.now }, { sent_at: Time.zone.now })
```

Then this method call would update all the `Model` records with the matching ids in the DB and we would lose the previous `sent_at` values if for example Model with id `1` was sent already.

#### Undocumented and untested behavior

I made my change symmetric to `ActiveRecord::Persistence` so it will also raise an `ActiveRecord::RecordNotFound` error if a record could not be found, it also raises similar `ArgumentError` exceptions when invalid arguments are passed.  This behavior was undocumented and untested, now I added tests to cover the cases.

I was using `respond_to?` to check if we received an `Enumerable` like argument. This code is almost the exact copy of the `ActiveRecord::Persistence#update` or `ActiveRecord::Persistence#update!`, we could merge these three methods into one concern, but I did not want to introduce any bigger changes with this PR.

### Checklist

Before submitting the PR make sure the following are checked:

* [X] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [X] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [X] Tests are added or updated if you fix a bug or add a feature.
* [X] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",raszi,User,7,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49331,26460,49331,Report what connection spec failed on `ActiveRecord::StatementInvalid`,open,11,2023-09-20 14:12:26+00:00,2023-09-29 20:26:55+00:00,,"### Steps to reproduce
Backtraces doesn't always point exactly to what connection have failed.

```ruby
ActiveRecord::Base.configurations.configs_for(env_name: ActiveRecord::Tasks::DatabaseTasks.env).each do |db_config|
  ActiveRecord::Base.establish_connection(db_config)
  puts ActiveRecord::Base.connection.select_values 'select now()'
end
```

### Expected behavior
```
ActiveRecord::StatementInvalid
primary --> [connection name or something about what connection failed]
PG::ConnectionBad: PQconsumeInput() FATAL:  terminating connection due to idle-in-transaction timeout
ERROR:  server conn crashed?
SSL connection has been closed unexpectedly
```

### Actual behavior
```
ActiveRecord::StatementInvalid
PG::ConnectionBad: PQconsumeInput() FATAL:  terminating connection due to idle-in-transaction timeout
ERROR:  server conn crashed?
SSL connection has been closed unexpectedly
PG::ConnectionBad
```

### System configuration
**Rails version**: 6.1.7.5

**Ruby version**: 2.7.6
",sobrinho,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/49324,6947247,49324,Cannot detect when touch is called with belongs_to touch: true,open,11,2023-09-19 23:44:30+00:00,2024-01-30 16:12:39+00:00,,"I can't seem to find a way to detect when a touch event is called in an `after_commit` hook when the touch event is triggered by a relational ""touch: true"" event. If I manually call `comment.touch` the behavior is different and I can detect that the change being made is only a touch event.

In our system we rely on `updated_at` for caching, but we also have plenty of actioncable subscriptions and various other calculations being called on `after_commit`, but we only want to actually run those events when the record was updated, not just touched from a related record. 

Is there any way to detect when a commit is caused by a `belongs_to ... touch: true`? I can't seem to find anything about it and this seems like it'd be a pretty useful thing...

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  gem ""rails"", ""7.0.8""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :events, force: true do |t|
    t.string :name
    t.timestamps
  end

  create_table :posts, force: true do |t|
    t.integer :author_id
    t.string :results
    t.timestamps
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
    t.string :description
    t.timestamps
  end
end

class Event < ActiveRecord::Base
end

class Post < ActiveRecord::Base
  has_many :comments

  after_commit :create_change_event, unless: :touched_only?

  def create_change_event
    Event.create(name: 'POST')
  end

  def touched_only?
    saved_changes.keys == ['updated_at']
  end
end

class Comment < ActiveRecord::Base
  belongs_to :post, touch: true
end

class BugTest < Minitest::Test
  def test_relational_touch_should_skip_hook_but_still_touch_parents
    post = Post.create!
    comment = Comment.create!(post:)
    Event.destroy_all
    post.reload

    assert_equal 0, Event.count, 'should have no events in the database'

    comment.update(description: 'something...')
    # Post should not create a new updated event because it was touched only
    assert_equal 0, Event.count, 'should still have no events in the database as we do not want to track touch only events'
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->
`saved_changes` should include `updated_at` to prevent unnecessary operations in the `after_commit` hook.

### Actual behavior
<!-- Tell us what happens instead -->
`saved_changes` is empty, leading the system to believe that nothing was changed but the `after_commit` hook was still called.

### System configuration
**Rails version**: 7.0.8

**Ruby version**: 3.2.2
",humphreyja,User,0,activerecord,stale,,,,,,,
https://api.github.com/repos/rails/rails/issues/49314,4910785,49314,Add normalizes_type to apply common normalizations,open,5,2023-09-18 22:00:16+00:00,2023-10-14 21:54:45+00:00,,"### Motivation / Background

Many apps use the https://github.com/rmm5t/strip_attributes gem to strip most string attributes.
The new `normalizes` API is a perfect fit for this. One ""downside"" in contrast to the strip_attributes gem, is that you have to explicitly list all attributes you want to normalize. It would be nice to have a simple way to e.g. ""strip all string attributes in most models"".

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",codergeek121,User,0,activerecord,needs work,,,,,,,
https://api.github.com/repos/rails/rails/issues/49303,7942714,49303,"`render` with no arguments or non-existent partial returns `200 OK "" ""` in API controller",open,0,2023-09-16 15:48:13+00:00,2023-10-12 22:59:04+00:00,,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""rack"", ""~> 2.0""
end

require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    get ""/base_no_arguments"" => ""test_base#no_arguments""
    get ""/base_non_existent_partial"" => ""test_base#non_existent_partial""
    get ""/api_no_arguments"" => ""test_api#no_arguments""
    get ""/api_non_existent_partial"" => ""test_api#non_existent_partial""
  end
end

class TestBaseController < ActionController::Base
  include Rails.application.routes.url_helpers

  def no_arguments
    render
  end

  def non_existent_partial
    render partial: ""foo/bar""
  end
end

class TestApiController < ActionController::API
  include Rails.application.routes.url_helpers

  def no_arguments
    render
  end

  def non_existent_partial
    render partial: ""foo/bar""
  end
end

require ""minitest/autorun""
require ""rack/test""

class BugTest < Minitest::Test
  include Rack::Test::Methods

  def test_base_no_arguments_returns_500
    get ""/base_no_arguments""

    refute last_response.ok?
    # ActionView::MissingTemplate
    assert_equal 500, last_response.status
    assert_equal """", last_response.body
  end

  def test_base_non_existent_partial_returns_500
    get ""/base_non_existent_partial""

    refute last_response.ok?
    # ActionView::MissingTemplate
    assert_equal 500, last_response.status
    assert_equal """", last_response.body
  end

  def test_api_no_arguments_returns_success
    get ""/api_no_arguments""

    assert last_response.ok?
    assert_equal 200, last_response.status
    assert_equal "" "", last_response.body
  end

  def test_api_non_existent_partial_returns_success
    get ""/api_non_existent_partial""

    assert last_response.ok?
    assert_equal 200, last_response.status
    assert_equal "" "", last_response.body
  end

  private
    def app
      Rails.application
    end
end
```

### Expected behavior
When I call `render` with no arguments or with a non-existent partial (e.g. `render(partial: ""foo/bar"")`) in an API controller. I'd expect to get some feedback that I'm doing something wrong. In a controller that inherits from `ActionController::Base`, this raises a `ActionView::MissingTemplate` error. I would expect Rails to raise a similar error in a controller that inherits from `ActionController::API`.

### Actual behavior
When I call `render` with no arguments or with a non-existent partial (e.g. `render(partial: ""foo/bar"")`), the controller returns a `200 OK` response with a body of `"" ""`.

I proposed deprecating this behavior in https://github.com/rails/rails/pull/49212.

### System configuration
**Rails version**: `main`

**Ruby version**: 3.1.2
",nholden,User,0,actionpack,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/49301,107635,49301,[ci skip] clarify the benefits of using ActiveJob's execution wrappers,open,6,2023-09-16 10:36:45+00:00,2023-09-23 12:55:07+00:00,,"### Motivation / Background

I've been stuck on a failing test about a job that was supposed to be rescued from exceptions, and after an embarrassing amount of time I came to realise that using `perform` shortcuts all of the ActiveJob niceties.

This Pull Request has been created because I don't want other people to confuse the `perform`, `perform_now` or `perform_later` altogether and waste valuable time trying to understand why the first one doesn't behave like the two others.

Feel free to challenge the wording as you please :v:

### Detail

This Pull Request changes the ActiveJob guide.

Before submitting the PR make sure the following are checked:

* [X] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [X] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [X] Tests are added or updated if you fix a bug or add a feature.
* [X] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",freesteph,User,2,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49267,1518299,49267,Add `save_and_open_page` helper to IntegrationTest,open,0,2023-09-13 23:07:56+00:00,2023-10-04 01:44:58+00:00,,"`save_and_open_page` is a capybara helper that lets developers inspect the status of the page at any given point in their tests. This is helpful when trying to keep a short feedback loop while working on a test.

This change adds a similar helper with a matching signature to integration tests.


https://github.com/rails/rails/assets/1518299/8137fa68-619b-4673-bd95-495f56eb0984

### Motivation / Background

I have seen similar helpers defined in a number of projects in their `test_helper.rb`. 
I figured this would be a good candidate to upstream as we already have the same helper for system tests.

### Detail

Launchy is required to automatically open the dump in a browser, but the helper still works without. Without launchy it prints a warning along with the path to the dump for manual review. 

### Additional information

- I wasn't sure where to put the changelog notice. I've put it above the Rails 7.1 release header as I assume this won't make the cut for the release
- I did not add launchy to the [Gemfile template](https://github.com/rails/rails/blob/bb2fedbf013d2a087087c6456f3c54bc74d3e609/railties/lib/rails/generators/rails/app/templates/Gemfile.tt). Maybe I should?
### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",JoeDupuis,User,0,actionpack,ready,,,,,,,
https://api.github.com/repos/rails/rails/issues/49259,15970,49259,rails console backtrace cleaner is too aggressive and removes all lines,open,0,2023-09-13 19:39:11+00:00,2023-09-14 00:38:38+00:00,,"In Rails 7.0.8, ruby 3.2.2, the backtrace cleaner completely removes all backtrace lines from any exception thrown in the rails console. Only the exception message is shown, which contains the location of the raised exception, but not any call stack info.

### Steps to reproduce

```
rails new consoletest
# add to app/models/application_record.rb:
  def self.ex
    raise 'an exception'
  end
  def self.ex2
    ex
  end
# then run the console
rails c
Loading development environment (Rails 7.0.8)
irb(main):001> ApplicationRecord.ex2
/private/tmp/consoletest/app/models/application_record.rb:5:in `ex': an exception (RuntimeError)
irb(main):002>

# note that no caller frames of the backtrace were shown - in particular the ex2 stack frame should be there. 
```

### Expected behavior

The backtrace should at least contain any app code stack frames for the exception call stack.

### Actual behavior

The rails backtrace silencer inside the railties lib removes each line.  I was unable to figure out why this happens in the console but not in a puma process.  Workaround is to remove all the backtrace silencers when running via the rails console.

### System configuration
**Rails version**: 7.0.8

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin22]
",wlipa,User,0,railties,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/49245,6014046,49245,Move started_request_message into LogSubscriber,open,4,2023-09-12 22:18:50+00:00,2023-09-20 21:49:12+00:00,,"### Motivation / Background

This commit is intended to address a few separate but related problems.

The first issue is that this log message is currently impossible to customize without monkey patching `Rails::Rack::Logger`. Gems like lograge and rails_semantic_logger currently monkey patch the class in order to remove or modify the message logged. Whether or not one of these specific gems is used, apps that want to use structured logging in production will almost certainly want to change or remove this message since it does not have a uniform structure.

Another issue is that this log message makes `Rails::Rack::Logger` dependent on `ActionDispatch::RemoteIp` if an application wants to be protected from IP spoofing (`RemoteIp` must appear before it in the middleware stack). There is currently an issue open because `RemoteIp` will raise an uncaught error when IP spoofing is detected, when really it should return a 4xx response. That type of issue is normally solved by `ActionDispatch::ShowExceptions`, however, `Rails::Rack::Logger` additionally depends on `ShowExceptions` being below it in the middleware stack so that the proper response status is logged. By moving the `started_request_message` out of `Rails::Rack::Logger`, the second dependency is removed and both `Rails::Rack::Logger` and `ShowExceptions` could be moved up to the top of the middleware stack in the future.

In addition to fixing the 5xx response for Ip spoofing requests, there is another large benefit to moving request instrumentation higher in the middleware stack. Currently, `process_action.action_controller` is the default instrumentation enabled in Rails applications. However, it is limited to returning information about the response returned from the controller action. This has lead to another issue opened where a user reported seeing 2xx responses logged (from `process_action`) even though the `ConditionalGet` middleware was intercepting the response and actually returning a 3xx response. So by enabling `Rails::Rack::Logger` to be moved higher up in the middleware stack, we are also creating an opportunity to have more realistic instrumentation and logs.

### Additional information

Issues references:
- #46003
- #46869 

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",skipkayhil,User,0,actionpack,railties,actionview,,,,,,
https://api.github.com/repos/rails/rails/issues/49240,14993828,49240,Add an internal route for bin/rails notes,open,1,2023-09-12 14:11:15+00:00,2023-09-18 13:00:02+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

Looking for early feedback on notes

Inspired by the `rails/info/routes` route I am suggesting a `rails/info/notes` internal route.

This will be same as doing 

```sh
$ bin/rails notes

app/controllers/posts_controller.rb:
  * [ 9] [TODO] Move this logic to a concern
  * [18] [FIXME] Refactor this method

app/models/post.rb:
  * [ 2] [TODO] Refactor this validation
```

### Detail

Adding an internal route for the `bin/rails notes` so we can check the notes on UI.

### Additional information

**Option 1:**

<img width=""890"" alt=""Screenshot 2023-09-12 at 19 40 07"" src=""https://github.com/rails/rails/assets/14993828/7bde94f3-629b-42b0-b85f-54826af9b553"">

**Option 2:**

<img width=""890"" alt=""Screenshot 2023-09-12 at 19 36 03"" src=""https://github.com/rails/rails/assets/14993828/104e15cb-460b-403d-93d8-5dcfae02d991"">

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",deepakmahakale,User,4,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49227,14981592,49227,`CurrentAttribute`s are cleared when a job gets executed inline in tests,open,9,2023-09-11 21:28:34+00:00,2024-01-19 13:44:27+00:00,,"### Steps to reproduce

I have a test case like this

```rb
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""active_support/railtie""
require ""active_job/railtie""
require ""minitest/autorun""

class TestApp < Rails::Application
  config.load_defaults 7.1

  config.active_job.queue_adapter = :inline
  config.eager_load = false
end

Rails.application.initialize!

class Current < ActiveSupport::CurrentAttributes
  attribute :user
end

class DummyJob < ActiveJob::Base
  def perform
  end
end

class CurrentAttributeTest < ActiveSupport::TestCase
  test ""CurrentAttributes"" do
    Current.user = ""test""
    DummyJob.perform_later

    assert_equal(""test"", Current.user, ""CurrentAttributes reset"")
  end
end
```

Using the inline queue adapter the second assertion failed. ~~I tried making a self-contained test script but couldn't manage, the attributes only seem to be reset when I run it in a full-blown rails app. I have created a sample app here https://github.com/Earlopain/rails-current-attributes, you can just run rake test there.~~

I found issue #37526 and pr #37568 which seem to be about the same thing and it looks like they were closed as fixed/completed. Don't know what to make of that, just wanted to document.

### Expected behavior
CurrentAttributes are preserved.

### Actual behavior
CurrentAttributes are cleared.

### System configuration
**Rails version**: main

**Ruby version**: 3.2.2
",Earlopain,User,1,activejob,With reproduction steps,pinned,,,,,,
https://api.github.com/repos/rails/rails/issues/49223,1297651,49223,Rails::Paths::Root can contains multiple directories,open,4,2023-09-11 17:50:25+00:00,2023-09-27 13:59:06+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->


Originally Rails::Paths::Root supported multiple directories simply by appenending them to it (path << 'lib/something'), or a specific directory like:
  `path.add 'app/helpers', with: 'app/helpers', eager_load: true`
which is the default for 'app/helpers'.

As a complex app may has a complex directory layout, sometimes it's better to let add an array of directories, as the underlying Path object already supports it, and also Rails code, like: abstract_controller/helper.rb, def all_helpers_from_path


  

### Detail

This Pull Request changes `Rails::Paths::Root.add`.

While the change is backward-compatible, it enables the full potential of the Path class:
 `path.add 'app/helpers', with: ['app/helpers', 'lib/helpers'], eager_load: true`

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [ ] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",LA-Toth,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49217,28561,49217,Add `ActiveStorage::Blob#pdf?`,open,1,2023-09-11 12:08:55+00:00,2023-09-11 17:26:40+00:00,,"It returns true if the content type is ""application/pdf"".
Similar to the existing `audio?`, `image?`, `video?` and `text?`
methods.

We probably don't want to add methods for every content type,
but pdf is pretty common and it's also used internally by Rails for
the Previewers.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",p8,User,0,activestorage,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49212,7942714,49212,Deprecate calling `render` with no arguments in API controllers,open,0,2023-09-10 01:05:59+00:00,2023-09-10 15:42:40+00:00,,"### Motivation / Background

This Pull Request has been created because when I called `render_to_string(partial: 'foo')` in an API controller, I got back `"" ""` whether or not the partial existed.

It turns out that in API controllers, the `partial` option on `render` does nothing, so it's equivalent to calling `render` with no arguments. I learned that in API controllers, calling `render` with no arguments has the surprising response of 200 OK with a body of `"" ""`.

### Detail

This change deprecates that surprising behavior and proposes that in the future, calling `render` with no arguments in API controllers will raise an error.

### Additional information

I'm open to other approaches here! Just trying to help other developers avoid this head-scratching behavior. 😅 

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",nholden,User,0,actionpack,actionview,,,,,,,
https://api.github.com/repos/rails/rails/issues/49198,28561,49198,Support custom content type matchers on ActiveStorage::Blob,open,0,2023-09-08 09:23:59+00:00,2023-09-27 13:39:52+00:00,,"ActiveStorage::Blob has methods for checking if it's an image, video, etc. In some case we might want to override the matchers or define our own matchers, for example to check if it's a PDF.

Instead of adding new methods for every possible content type, we should make this configurable with
`Rails.application.config.active_storage.content_type_matchers`.

```ruby
Rails.application.config.active_storage.content_type_matchers[:pdf] = -> (c) { c == ""application/pdf"" }
blob = ActiveStorage::Blob.last
blob.pdf? # => true
```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",p8,User,0,docs,activestorage,,,,,,,
https://api.github.com/repos/rails/rails/issues/49197,474554,49197,ActiveRecord: Incorrect preloading behavior on has_many through associations with strict_loading,open,1,2023-09-08 09:22:02+00:00,2023-12-31 09:10:39+00:00,,"This issue may be linked to #49084 but conditions to reproduce seems to differ a bit

### Steps to reproduce
```ruby
require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  gem 'rails', '7.0.7.2'
  gem 'sqlite3'
end

require 'active_record'
require 'minitest/autorun'
require 'logger'

ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new($stdout)

ActiveRecord::Schema.define do
  create_table 'groups', force: :cascade
  create_table 'members', force: :cascade

  create_table 'memberships', force: :cascade do |t|
    t.integer 'group_id'
    t.integer 'member_id'
  end

  create_table 'contributions', force: :cascade do |t|
    t.integer 'member_id'
  end
end

class Group < ActiveRecord::Base
  has_many :memberships
  has_many :members, through: :memberships
end

class Member < ActiveRecord::Base
  has_many :memberships
  has_many :groups, through: :memberships
  has_many :contributions
end

class Membership < ActiveRecord::Base
  belongs_to :group
  belongs_to :member
end

class Contribution < ActiveRecord::Base
  belongs_to :member
end

class BugTest < Minitest::Test
  def test_preload
    group = Group.create!
    member = Member.create!
    member.contributions.create!
    group.members << member

    assert Group.preload(:members, members: :contributions).first.members.first.contributions.loaded?
    assert Group.strict_loading.preload(:members, members: :contributions).first.members.first.contributions.loaded?
  end
end
```
### Expected behavior

The following expressions should both preload and returns first member's contributions:

```ruby
Group.preload(:members, members: :contributions).first.members.first.contributions
=> [#<Contribution:0x0000000108dd6e00 id: 1, member_id: 1>]

Group.strict_loading.preload(:members, members: :contributions).first.members.first.contributions
=> [#<Contribution:0x0000000108dd6e00 id: 1, member_id: 1>]
```

### Actual behavior

Actually, the second one raises an exception :

```ruby
Group.strict_loading.preload(:members, members: :contributions).first.members.first.contributions
# An error occurred when inspecting the object: #<ActiveRecord::StrictLoadingViolationError: `Member` is marked for strict_loading. The Contribution association named `:contributions` cannot be lazily loaded.>
# An error occurred when running Kernel#inspect: #<ActiveRecord::StrictLoadingViolationError: `Member` is marked for strict_loading. The Contribution association named `:contributions` cannot be lazily loaded.>
# .../active_record/core.rb:242:in `strict_loading_violation!'
# .../active_record/associations/association.rb:220:in `find_target'
# .../active_record/associations/collection_association.rb:264:in `load_target'
# .../active_record/associations/collection_proxy.rb:43:in `load_target'
# .../active_record/associations/collection_proxy.rb:1101:in `inspect'
```

This seems to happen when 3 conditions are met:

* using `strict_loading`
* using a `has_many through` association
* calling twice the `through` association in `preload`

It works when preloaded associations are inverted:

```ruby
Group.strict_loading.preload({ members: :contributions }, :members).first.members.first.contributions
=> [#<Contribution:0x0000000108dd6e00 id: 1, member_id: 1>]
```


### System configuration
**Rails version**: 7.0.7.2

**Ruby version**: 3.2.1 & 3.2.2

Cannot reproduce on Rails 6.0 or 6.1
",inkstak,User,0,activerecord,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/49189,191320,49189,Allow access to the full set of options when managing PostgreSQL extensions,open,5,2023-09-07 16:33:18+00:00,2023-10-01 21:31:13+00:00,,"### Motivation / Background

This allows a fuller feature set for managing and interacting with PostgreSQL extensions.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",ccutrer,User,0,activerecord,PostgreSQL,,,,,,,
https://api.github.com/repos/rails/rails/issues/49185,14993828,49185,Add support for index option with add_column,open,4,2023-09-07 11:18:30+00:00,2023-09-13 11:09:36+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->
With `create_table` and `add_reference` supporting the `index` option, 
most developers assume the `index: true` should work with `add_column` as well.

```ruby
create_table :users do |t|
  t.string :email, index: { unique: true }
end
```
```ruby
add_reference(:orders, :user, index: true)
```

Which is not the case.

![Screenshot 2023-09-07 at 16 51 33](https://github.com/rails/rails/assets/14993828/3cb6e797-a987-47df-a3d3-edf03e7015e5)
_Screenshot of a discussion we had last month:_

### Detail

This pull request adds support for the `index` option on the `add_column`

**Before:**

```ruby
class AddEmailAndPhoneNumberToUsers < ActiveRecord::Migration[7.1]
  def change
    add_column :users, :email, :string
    add_column :users, :phone_number, :string

    add_index :users, :email, unique: true
    add_index :users, :phone_number
  end
end
```

**After:**

```ruby
class AddEmailAndPhoneNumberToUsers < ActiveRecord::Migration[7.1]
  def change
    add_column :users, :email, :string, index: { unique: true }
    add_column :users, :phone_number, :string, index: true
  end
end
```

```sql
                                           Table ""public.users""
    Column    |              Type              | Collation | Nullable |              Default
--------------+--------------------------------+-----------+----------+-----------------------------------
 id           | bigint                         |           | not null | nextval('users_id_seq'::regclass)
 phone        | character varying              |           |          |
 created_at   | timestamp(6) without time zone |           | not null |
 updated_at   | timestamp(6) without time zone |           | not null |
 email        | character varying              |           |          |
 phone_number | character varying              |           |          |
Indexes:
    ""users_pkey"" PRIMARY KEY, btree (id)
    ""index_users_on_email"" UNIQUE, btree (email)
    ""index_users_on_phone_number"" btree (phone_number)
```

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [ ] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",deepakmahakale,User,7,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49181,496367,49181,Expose Active Storage service names,open,0,2023-09-06 21:24:20+00:00,2023-09-06 21:44:15+00:00,,"This is useful to configure multiple disk services for parallel testing without having to resort to something like `ActiveStorage::Blob.services.send(:configurations).keys` to get this information.
",bdewater,User,0,docs,activestorage,,,,,,,
https://api.github.com/repos/rails/rails/issues/49168,13851881,49168,Record ping on every actioncable message,open,0,2023-09-06 13:14:51+00:00,2023-12-22 19:19:13+00:00,,"### Motivation / Background

This PR is a fix for this issue described and closed due to inactivity here https://github.com/rails/rails/issues/42336
It still happens in apps with rails 7.0.7.2, ruby 3.2.2 and @rails/actioncable 7.0.4: when large number of events is sent via actioncable (in our case they are turbo broadcast messages) it prevents ping messages from coming in time (currently ping threshold is 6 seconds), so actioncable assumes connection as stale and creates a new one. However, during a downtime between closing/opening connections events could (and are) miss(ed).

In this PR pings are also recorded on every normal message coming to the client.

### Expected behavior

Connection does not become stale and does not get reconnected when ping messages are delayed due to large number of normal messages.

### Actual behavior

The client is disconnected if it doesn't receive ping events within the staleThreshold even though it's receiving other events.",yauhenininjia,User,17,actioncable,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49160,188464,49160,Add an error when saving a record that was previously destroyed,open,1,2023-09-05 18:40:38+00:00,2023-09-23 04:15:11+00:00,,"### Motivation / Background

Currently, if we call `save` or `save!` in an object that was already destroyed, `save` returns `false` and `save!` raises an exception, but there's no information about why the save failed.

I ran into this issue with a legacy app that, because of a complicated set of callbacks, was destroying an object at some point and then calling `save!` somewhere else. This produced an exception, but there was no information about the reason.

After a lot of research I realized that the issue was the record was destroyed (so `.destroyed?` was `true`), but I think it will help a lot to have an error added to avoid having to find this out.

### Detail

This PR updates the `create_or_update` method to add a `:base` error message for this specific scenario.

I added a configuration for this to keep the old behavior if needed and during upgrades, since I imagine some apps may rely on the errors hash being empty.

### Additional information

No additional information.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",arielj,User,1,actionmailer,actionpack,activemodel,activerecord,railties,docs,activejob,,
https://api.github.com/repos/rails/rails/issues/49124,58332033,49124,Feat: control active storage service urls caching,open,0,2023-09-02 17:54:03+00:00,2023-10-19 19:47:40+00:00,,"### Motivation / Background

This Pull Request has been created because some browsers have a bug and didn't respect the cache max-age and never invalidate the cached URLs even if service_urls_expire_in is set to zero. Hence, I had to override the redirect controller and disable the cache.

This PR makes it easy to toggle caching without override and 

### Detail

- Active storage by default allows caching service URLs in browsers by adding cache-control max-age = `service_urls_expire_in` value
- This PR adds the ability to control caching by decoupling it from service_urls_expire_in.
- Adds a new boolean active storage config `cache_service_urls` equal to true by default 
- If it is set to false It will set `cache-control` to `no-store` 

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",civilcoder55,User,0,docs,activestorage,,,,,,,
https://api.github.com/repos/rails/rails/issues/49115,50139,49115,"Add option validation to HABTM, closes #48939",open,2,2023-09-01 21:17:02+00:00,2023-11-16 20:35:53+00:00,,"### Motivation / Background

This Pull Request has been created because it's annoying that HABTM doesn't alert you when you supply the wrong options.

### Detail

This Pull Request changes HABTM so it works like the other associations and raises `ArgumentError` when you supply options that it doesn't handle.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.

Fixes #48939
",smathy,User,1,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49104,816758,49104,ActiveStorage Javascript: Error parameter passed to the DirectUpload create callback should provide response status code and body,open,6,2023-09-01 13:54:40+00:00,2023-11-24 05:37:39+00:00,,"My example below implements a custom direct uploads controller (for authentication) and uses the Javascript class `DirectUpload` in the frontend code. It mostly follows the example code given in https://edgeguides.rubyonrails.org/active_storage_overview.html#integrating-with-libraries-or-frameworks

This issue is about the Javascript code, specifically the callback passed to the `create` method in `DirectUpload`. In the unauthenticated case, where the server responds with status code 401 (and potentially a JSON document body containing some extra information), the `error` parameter currently is just a simple string.

### Steps to reproduce
The Rails controller (backend):
```ruby
class DirectUploadsController < ActiveStorage::DirectUploadsController
  skip_forgery_protection
  before_action :authenticate!

  def authenticate!
    @token = request.headers['Authorization']&.split&.last

    return head :unauthorized unless @token == ""secret""
  end
end
```

The Javascript frontend code:
```javascript
import { DirectUpload } from ""@rails/activestorage""

const file = new File([], ""test.txt"")

const upload = new DirectUpload(file, ""/custom_direct_uploads"")
upload.create((error, blob) => console.log(error))
```

### Expected behavior
The `error` parameter passed to the callback should hold some structured information about the failed direct upload request - the response's status code and probably the body (most likely a JSON document).

### Actual behavior
The `error` parameter is a plain string: `Error creating Blob for ""test.txt"". Status: 401`.

### System configuration
**Rails version**:
7.0.7.2

**Ruby version**:
3.2.2",alexandergitter,User,1,attached PR,activestorage,,,,,,,
https://api.github.com/repos/rails/rails/issues/49084,498185,49084,ActiveRecord: incorrect Preloader behavior on has_many through associations when through association is preloaded,open,4,2023-08-30 11:53:38+00:00,2023-12-08 22:26:02+00:00,,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  gem 'rails', '7.0.7.2'
  gem 'sqlite3'
end

require 'active_record'
require 'minitest/autorun'
require 'logger'

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new($stdout)

ActiveRecord::Schema.define do
  create_table 'companies', force: :cascade, &:timestamps

  create_table 'announcements', force: :cascade, &:timestamps

  create_table 'announcement_references', force: :cascade do |t|
    t.integer 'announcement_id'
    t.integer 'owner_id'
    t.string 'owner_type'
  end

  create_table 'taxonomy_references', force: :cascade do |t|
    t.integer 'company_id'
    t.integer 'taxonomy_id'
    t.string 'taxonomy_type'
  end

  create_table 'categories', force: :cascade do |t|
    t.string 'name'
  end

  create_table 'groups', force: :cascade do |t|
    t.string 'name'
  end
end

class Company < ActiveRecord::Base
  has_many :taxonomy_references, dependent: :destroy
  has_many :group_references, -> { where(taxonomy_type: 'Group') }, class_name: 'TaxonomyReference', foreign_key: :company_id
  has_many :groups, through: :group_references, source: :taxonomy, source_type: 'Group'
  has_many :category_references, -> { where(taxonomy_type: 'Category') }, class_name: 'TaxonomyReference', foreign_key: :company_id
  has_many :categories, through: :category_references, source: :taxonomy, source_type: 'Category'

  has_many :announcement_references, foreign_key: :owner_id, as: :owner, inverse_of: :owner, dependent: :restrict_with_error
  has_many :announcements, through: :announcement_references, source: :announcement, dependent: :restrict_with_error
  has_many :announcements_from_groups, class_name: 'Announcement', through: :groups, source: :announcements
end

class TaxonomyReference < ActiveRecord::Base
  belongs_to :taxonomy, optional: false, polymorphic: true
  belongs_to :company, optional: false
end

class Category < ActiveRecord::Base
  has_many :taxonomy_references, as: :taxonomy, foreign_key: :taxonomy_id, dependent: :destroy
  has_many :companies, through: :taxonomy_references, source: :company
end

class Group < ActiveRecord::Base
  has_many :taxonomy_references, as: :taxonomy, foreign_key: :taxonomy_id, dependent: :destroy
  has_many :companies, through: :taxonomy_references, source: :company

  has_many :announcement_references, foreign_key: :owner_id, as: :owner, inverse_of: :owner, dependent: :restrict_with_error
  has_many :announcements, through: :announcement_references, source: :announcement, dependent: :restrict_with_error
end

class Announcement < ActiveRecord::Base
  has_many :announcement_references, foreign_key: :announcement_id, inverse_of: :announcement, dependent: :destroy

  has_many :companies, through: :announcement_references, source_type: 'Company', source: :owner
  has_many :groups, through: :announcement_references, source_type: 'Group', source: :owner
  has_many :companies_in_groups, through: :groups, source: :companies
end

class AnnouncementReference < ActiveRecord::Base
  belongs_to :announcement, optional: false, foreign_key: :announcement_id
  belongs_to :owner, optional: false, polymorphic: true
end

class BugTest < Minitest::Test
  def test_preload
    company = Company.create!
    group = Group.create!
    category = Category.create!
    company.categories << category
    company.groups << group
    group_announcement = Announcement.create!
    group_announcement.announcement_references.create(owner_type: 'Group', owner_id: group.id)
    company_announcement = Announcement.create!
    company_announcement.announcement_references.create(owner_type: 'Company', owner_id: company.id)

    assert_equal 1, company.groups.size
    assert_equal 1, company.categories.size
    assert_equal 1, group.announcements.size
    assert_equal 1, company.announcements.size
    assert_equal 1, company.announcements_from_groups.size

    assert_equal group_announcement, Announcement.preload(:companies => :categories).first # works
    assert_equal company_announcement, Announcement.preload(:companies => :categories).last # works
    assert_equal company_announcement, Announcement.preload(:announcement_references, :companies => :categories).last # works
    assert_equal group_announcement, Announcement.preload(:announcement_references, :companies, :companies => :categories).first # works!
    assert_equal group_announcement, Announcement.preload(:announcement_references, :companies => :categories).first # fails
  end
end
```

### Expected behavior
Should preload `companies => categories` only if there are `companies` as owners

### Actual behavior
Tries to preload `categories` on `Group`
```
ActiveRecord::AssociationNotFoundError: Association named 'categories' was not found on Group; perhaps you misspelled it?
```

### System configuration
**Rails version**: 7.0.7.2
**Ruby version**: 3.1.4
",kshnurov,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/49079,96156234,49079,Makes sure values have the correct type in _update_record. Fixes #49009.,open,2,2023-08-29 16:47:38+00:00,2023-10-24 23:49:17+00:00,,"By transforming the values hash and adding in the type from the table it's being added to it ensures that the correct Type is used for the table.  This enables a user to make sure the specified type is used if one is set in the model. 

Fixes #49009.
### Checklist

Before submitting the PR make sure the following are checked:

* [ X] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [ X] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ X] Tests are added or updated if you fix a bug or add a feature.
* [ X] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",paulreece,User,1,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49049,39473,49049,fixes issue where rails console filters lines that match 'APP_DIRS_PATTERN' because they are prefixed with 'from',open,5,2023-08-27 01:29:32+00:00,2023-11-16 04:02:57+00:00,,"### Motivation / Background
I noticed and confirmed with others that rails console was omitting expected backtrace lines as seen here:
```
$ cat app/models/user.rb
class User < ApplicationRecord

  def foo
    bar
  end

  def bar
    baz
  end

  def baz
    raise
  end
end

$  rc
Loading development environment (Rails 7.0.7)
3.1.4 :001 > User.new.foo
/Users/jsharpe/railsapp/app/models/user.rb:12:in `baz': unhandled exception
(irb):1:in `<main>
```

I believe this is caused by irb itself prefixing backtrace lines with the string: `\tfrom ` as seen here:
```
√ (9:21:40 PM) ~ irb
3.0.4 :001 > class Foo
3.0.4 :002 > def foo
3.0.4 :003 > bar
3.0.4 :004 > end
3.0.4 :005 > def bar
3.0.4 :006 > baz
3.0.4 :007 > end
3.0.4 :008 > def baz
3.0.4 :009 > raise
3.0.4 :010 > end
3.0.4 :011 > end
 => :baz
3.0.4 :012 >
3.0.4 :013 > Foo.new.foo
(irb):9:in `baz': unhandled exception
	from (irb):6:in `bar'
	from (irb):3:in `foo'
	from (irb):13:in `<main>'
	from /Users/jsharpe/.rvm/gems/ruby-3.0.4/gems/irb-1.7.4/exe/irb:9:in `<top (required)>'
	from /Users/jsharpe/.rvm/gems/ruby-3.0.4/bin/irb:25:in `load'
	from /Users/jsharpe/.rvm/gems/ruby-3.0.4/bin/irb:25:in `<main>'
	from /Users/jsharpe/.rvm/gems/ruby-3.0.4/bin/ruby_executable_hooks:22:in `eval'
	from /Users/jsharpe/.rvm/gems/ruby-3.0.4/bin/ruby_executable_hooks:22:in `<main>'
```


This causes rails console to mistakenly filter lines that would otherwise match `Rails::BacktraceCleaner::APP_DIRS_PATTERN` because that regex hasn't anticipated the prefix.  
This patch filters `\tfrom ` if it exists which then allows the filter using `APP_DIRS_PATTERN` below to work correctly:

```
$ rc
Loading development environment (Rails 7.0.7)
3.1.4 :001 > User.new.foo
/Users/jsharpe/railsapp/app/models/user.rb:12:in `baz': unhandled exception
app/models/user.rb:8:in `bar'
app/models/user.rb:4:in `foo'
(irb):1:in `<main>'
```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",josh-m-sharpe,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49047,96156234,49047,This allows Users to merge the actual model to an already aliased/scoped model when using the missing or associated methods. Fixes #48945. ,open,0,2023-08-26 23:23:50+00:00,2023-09-01 14:56:01+00:00,,"Since `aliased_table_for` is called later on in the stack as to make the `missing` and `associated` methods have no awareness of aliasing taking place, I decided to make a similar data structure available within both.  By adding `@scope.table_name`, and  any `joins` `table_names` to an array, I am offering up a similar object that the `alias_tracker.aliases` hash would contain.  I used an array instead of a hash because in this case we don't need to check the values of the keys like `aliased_table_for` does.  By building this array it gives these methods an awareness of what aliasing might take place further on in the stack so that it can take the correct course of action when building the where clause.  

This adds an `alias_prediction` method which implements the behavior noted above:
```Ruby
        def alias_prediction
          alias_table_names = []
          alias_table_names.push(@scope.table_name)
          if @scope.values[:joins]
            @scope.values[:joins].each do |join|
              current_join = scope_association_reflection(join)
              alias_table_names.push(current_join.table_name)
            end
          end
          alias_table_names
        end
```

Note: The initial `reflection.options[:class_name]` check is still necessary to avoid false positives.

### Motivation / Background

This Pull Request has been created because a bug report was raised. Fixes #[48945](https://github.com/rails/rails/issues/48945).

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",paulreece,User,1,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49043,1724355,49043,Fix column typecasting with duplicate column names for PostgreSQL,open,0,2023-08-26 17:30:53+00:00,2023-10-11 22:53:54+00:00,,"Fixes incorrect typecasting that occurred when there were duplicate column names returned from PostgreSQL which is always the case when calculations/aggregates are use multiple times when no aliases are used. The `column_type` method was moved from private to public, and the typecasting logic was updated.

Fixes #48946.

### Additional information

There are several other places where the `ActiveRecord::Result#column_type` is used directly, but I'm not sure if accessing the column_type via index would be correct/possible there. To me it seems these places are even incorrect since https://github.com/rails/rails/pull/45783 because the the `types`/`column_types` potentially not only contains columns by name but also by index.
- https://github.com/rails/rails/blob/f6b987d521b9ad3f9938b40f039fbdda78058a06/activerecord/lib/active_record/querying.rb#L66-L66
- https://github.com/rails/rails/blob/f6b987d521b9ad3f9938b40f039fbdda78058a06/activerecord/lib/active_record/associations/join_dependency.rb#L127-L127
- https://github.com/rails/rails/blob/f6b987d521b9ad3f9938b40f039fbdda78058a06/activerecord/lib/active_record/relation/calculations.rb#L508-L508


<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",Flixt,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49036,722037,49036,ActionText now supports storage in text column instead of separate table,open,4,2023-08-25 14:02:19+00:00,2023-08-27 13:03:00+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background
ActionText uses a separate table to store HTML data. WIth advanced RDBMS like Postgres, it's not necessary as the database optimization engine will manage storage of columns with large data on its own.

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This PR introduces the possibility of using ActionText with only a 'string' column in the model table itself as storage.

### Detail

This Pull Request adds a new feature to ActionText, without any change to the existing ones. Code not explicitly choosing to use the new feature won't be affected in any way.

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",brunoenten,User,0,actiontext,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49025,7149034,49025,[Feature Request] Fixture scenarios for complex associations,open,0,2023-08-24 10:13:33+00:00,2023-08-24 20:40:28+00:00,,"# Introducing fixture scenarios

This pull request proposes a new feature: Fixture Scenarios via a new TestCase method, `#load_scenario`. This concept aims to improve test data management by introducing situational fixtures known as ""scenarios."" The primary goal is to enable the creation of manageable sets of fixtures with complex associations within a single file.

Your feedback on this proposal would be highly appreciated! :) 

## Problem Statement

The current approach to managing throwaway scenarios with fixtures has limitations. Fixtures accumulate in various files, often leading to confusion about their original intent. On-the-fly records or using FactoryBot can result in unnecessary records creation and does not adequately manage associations between records.

## Solution Overview

By grouping fixtures per scenario or purpose instead of types, fixture scenarios offer an alternative to loading sets of records for each test. They provide the following benefits:

- Utilize familiar features like ERB, `_fixture` configuration, associations, and table access.
- Manage all records' relationships within a single file, which is particularly useful for testing scenarios with complex associations.
- Load scenarios only when explicitly specified, ensuring the flexibility to use permanent fixtures when needed.

This can be useful to snapshot a set of records when reproducing a bug or a complex state without bloating the test setup with method calls that are irrelevant to the thing tested. A dev could build records manually once and snapshot their state in a scenario instead of building that state every time the test runs on a pipeline.

## Scenario Example

Here's an example of how a scenario could look:

```yml
# test/scenarios/organisation_with_author_and_posts.yml
organizations:
  _fixture:
    model_class: Organization

  code_monkeys:
    name: The code monkeys

posts:
  <% 1.upto(5) do |i| %>
  alex_post<%= i %>:
    author: alex
    title: Alex post <%= i %>
    body: Such a lovely day
    type: Post
  <% end %>

authors:
  alex:
    name: Alex
    author_address_id: 100
    organization: code_monkeys

  nsa_author:
    name: NSA Author
    author_address_id: 100
    organization: nsa

author_addresses:
  alex_address:
    id: 100

```

### Usage

```ruby
require ""test_helper""

class TestLoadScenario < ActiveRecord::TestCase
  def test_create_scenario
    load_scenario(SCENARIOS_ROOT + ""/organisation_with_author_and_posts.yml"")

    author = authors(:alex)

    assert author.author_address
    assert_equal ""The Code Monkeys"", author.organization.name
    assert_equal 5, author.posts.count
  end
end
```

## Implemented Rules

This PR is a POC with the following rules governing scenario fixtures:

* They are not loaded by default.
* They do not delete existing fixtures.
* They can reference existing fixtures.
* They can reference other existing scenario fixtures.
* They cannot override existing fixtures.
* They cannot override existing scenario fixtures.
* They allow ERB for dynamic data generation.
* They allow \_fixture configuration.
* They are accessible through table access.

## Caveats

One of the caveats is that managing records of the same type across multiple files can become challenging with schema changes unless shared defaults are established. This caveat likely applies to normal fixtures as well.

",AlexB52,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/49009,2575714,49009,AR::Base#becomes no longer handles attribute type changes,open,1,2023-08-23 01:14:39+00:00,2023-11-25 09:18:05+00:00,,"On Rails 6.1, it was possible to use `AR::Base#becomes` to handle converting one model to another with the same attribute but a different type. In the below example, two models share the same table but one stores emails in Base64. This appears to have broken in Rails 7.

### Steps to reproduce
```ruby
require ""base64""
require ""bundler/inline""

gemfile do
  gem ""activerecord"", ""~> 7.0""
  gem ""sqlite3""
end

require ""active_record""

ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')

ActiveRecord::Schema.define do
    create_table :users do |t|
      t.string :email
    end
end

class Base64String < ActiveModel::Type::Value
  def serialize(value)
    ::Base64.strict_encode64(value) unless value.nil?
  end

  def deserialize(value)
     ::Base64.strict_decode64(value) unless value.nil?
  end
end

ActiveRecord::Type.register(:base64_string, Base64String)

class User < ActiveRecord::Base
  self.primary_key = ""id""
end

class EncryptedUser < ActiveRecord::Base
  self.primary_key = ""id""
  self.table_name = ""users""

  attribute :email, :base64_string
end

user = User.create!(email: ""foo@example.com"")

encrypted_user = EncryptedUser.create!(email: ""secret@example.com"")

# The EncryptedUser's email is stored as a Base64 encoded string
User.exists?(email: ""secret@example.com"") # => false
User.exists?(email: ::Base64.strict_encode64(""secret@example.com"")) # => true

converted_user = user.becomes(EncryptedUser)
converted_user.email = ""secret2@example.com""
converted_user.save!

# When a User is converted to an EncryptedUser, their email should be stored as a Base64 encoded string
User.exists?(email: ""secret2@example.com"") # => false on Rails 6.1, true on Rails 7.0
User.exists?(email: Base64.strict_encode64(""secret2@example.com"")) # => true on Rails 6.1, false on Rails 7.0
```

### Expected behavior
Converting a `User` to an `EncryptedUser` and saving it should automatically persist the `email` attribute using the Base64String type. This was the behavior in Rails 6.1.

### Actual behavior
The custom attribute type on `EncryptedUser` is ignored and `email` is saved as plain text. 

I believe this accidentally changed with https://github.com/rails/rails/commit/6ee96a8f42d6b13bffd46342248f447d9f289288#diff-11b42664eb9834972953ecd5725c75fd6020af6d4ee5da37ef6d8e0c146f7773R432-R435, since `PredicateBuilder#build_bind_attribute` would get the updated attribute type from the table definition: https://github.com/rails/rails/blob/90b0266e9bfaaadbd2d249ad2eeec042077a0063/activerecord/lib/active_record/relation/predicate_builder.rb#L71-L74

I have fixed this manually by overriding the setter:

```ruby
def email=(value)
   super
   @attributes[""email""] = @attributes[""email""].with_type(self.type_for_attribute(""email""))
end
```
but I propose that a more generic solution be added directly to `#becomes`.

### System configuration
**Rails version**: 7.0.7

**Ruby version**: 3.2.2",mlarraz,User,1,activerecord,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/48993,740289,48993,Make `has_secure_password` pluginable/extendable with different password hashing algorithms,open,2,2023-08-21 21:01:57+00:00,2023-09-29 20:50:03+00:00,,"### Motivation / Background

Based on an idea by @rafaelfranca in https://github.com/rails/rails/issues/41420#issuecomment-1686745412.

While BCrypt may be the desirable default password hashing algorithm in Rails for the foreseeable future, making the mechanism for hashing and verifying passwords in `has_secure_password` extendable/modular is valuable.

Developers may opt for different hashing algorithms and can now extend or plug in their own alongside BCrypt in a clean and maintainable way. From the referenced thread, there is discourse amongst people on what should be the _de facto_ password algorithm and disagreement on whether Argon2 should be it. Rails should make it easier for the community to progress on best password hashing practices.

This also unlocks Rails shipping with more than BCrypt as an available hashing algorithm.

I _could_ see a world where Rails offers PBKDF2 (for those wanting FIPS 140 compliance), BCrypt (the safe default), and Argon2 (since OWASP recommends it).

### Detail

This PR takes BCrypt-specific code in `ActiveModel::SecurePassword` and extracts it out into an object `ActiveModel::SecurePassword::BCrypt`. The object adheres to a simple interface (`ActiveModel::SecurePassword::Base`) so developers can supplement with different algorithms (or different libraries of the same underlying algo). 

A user of the Rails framework uses the newly added `:algorithm` option in `has_secure_password` to declare what password hashing algo should be used on a given attribute.

Developers can write libraries or even initializers to add different password hashing algorithm support following a very clean interface.

Below is an example of someone opting to use Argon2 using `ruby-argon2`:

```ruby
# config/initializers/add_argon2_to_activemodel_securepassword.rb

require ""active_model/secure_password/base""

module ActiveModel
  module SecurePassword
    class Argon2id < Base
      def initialize
        require ""argon2""
      rescue LoadError
        warn ""You don't have argon2 installed in your application. Please add it to your Gemfile and run bundle install.""
        raise
      end

      def self.algorithm_name
        :argon2id
      end

      def hash_password(unencrypted_password, options = {})
        if options[:min_cost]
          hasher = Argon2::Password.new(t_cost: 1, m_cost: 3, p_cost: 1)
        else
          hasher = Argon2::Password.new(t_cost: 2, m_cost: 19, p_cost: 1)  # Latest OWASP recommended values
        end
        hasher.create(unencrypted_password)
      end

      def verify_password(password, digest)
        Argon2::Password.verify_password(password, digest)
      end

      def password_salt(digest)
        Argon2::HashFormat.new(digest).salt
      end
    end
  end
end
```

```ruby
# app/models/user.rb

class User < ActiveRecord::Base
  has_secure_password :password, algorithm: :argon2
end
```

### Additional information

I'm a bit of a novice when it comes to making Rails aware of different files and how to ""register"" a series of subclasses (some of which could be defined in libraries or the initializers folder) to a part of Rails. Open to whatever pattern is the most appropriate.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.

",f3ndot,User,1,activemodel,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48986,54629302,48986,[Fix #46509] Run autosave validations regardless of changes,open,1,2023-08-20 02:25:41+00:00,2023-08-30 20:17:56+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created to fix https://github.com/rails/rails/issues/46509.

### Detail

This Pull Request changes association autosave logic to decouple validation and save conditions, so that validations are always run (still taking into consideration options like `:validate`) regardless of whether or not the record is changing. This makes autosave validations consistent with direct persistence methods like `save`, as shown in https://github.com/rails/rails/issues/46509#issuecomment-1322641993 and the test I've added in this PR.

This approach was inspired by the comments in https://github.com/rails/rails/pull/47088, which was an alternate approach to fixing the linked issue.

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

Failing one edge case test, see https://github.com/rails/rails/pull/48986#issuecomment-1685203599.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",joshuay03,User,1,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48968,5014629,48968,ActiveRecord - Dependent destroy relies on cached ActiveRecord::Relation,open,4,2023-08-17 18:50:35+00:00,2023-12-08 04:30:23+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby

class ThingsTodo < ApplicationRecord
   belongs_to :task # without FK constraint

class Task < ApplicationRecord
   has_many :things_todo, dependent: :destroy

   after_create :init_things_todo
   
   def init_things_todo
       # call service that creates things to do
       InitializeTodo.call(self)

@todo = Todo.create()
@todo.id  # 123
@todo.things_todo.count  # Zero, Expected
ThingsTodo.count # Not Zero, Expected

@todo.destroy!
ThingsTodo.count # Not Zero, NOT expected?
ThingsTodo.first.id # 123

ThingsTodo.destroy_all

@todo = Todo.create()
@todo.reload
@todo.destroy!
ThingsTodo.count # Zero 

```
### Expected behavior
Although I do not expect the just created object to contain the initialised related objects - created by the `after_save` callback, I was expecting the the `dependent: :destroy` to make a query to delete the related records, instead of using the cached ActiveRecord::Relation. 

### Actual behavior
Dependent destroy calls destroy on the cached ActiveRecord::Relation (which is empty). This might be by design as a way to avoid one extra query, but it took me a while to realise because in this case there was no foreign key constraint. I was also getting a fk_constraint error on another case, and didn't realise why I was getting it until I found this.

Also note that this makes the behaviour of destroy and destroy async different, as destroy async will make a separate query with `find_by`.

### Going forward 
A) make dependent destroy make a query, with a performance penalty.
B) Expand on the warning in the documentations - https://guides.rubyonrails.org/association_basics.html#options-for-belongs-to-dependent - to include this caveat. 

### System configuration
**Rails version**: 7.0.4
**Ruby version**: 3.2.2
",sergioisidoro,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/48946,57948,48946,Regression in Postgres aggregate function data type inference/casting in Rails >= 7.0.5,open,2,2023-08-15 19:41:45+00:00,2023-10-18 07:40:53+00:00,,"### Steps to reproduce
```sql
-- Create Postgres database, required to reproduce
CREATE DATABASE type_inference_test;
```

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # gem ""rails"", github: ""rails/rails"", tag: ""v7.0.4.3"" # OK
  # gem ""rails"", github: ""rails/rails"", tag: ""v7.0.5""   # Fail
  # gem ""rails"", github: ""rails/rails"", tag: ""v7.0.7""   # Fail
  gem ""rails"", github: ""rails/rails"", branch: ""main""    # Fail
  gem ""pg""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# The issue appears appears with Postgres, not with SQLite. I have not tested other adapters.
# ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
# N.b., in sqlite3 .pluck(""sum(decimal_column)"").first returns a Float instead of a BigDecimal. Though that arguably is a bug, AFAICT it is _not_ a regression.
ActiveRecord::Base.establish_connection(adapter: ""postgresql"", database: ""type_inference_test"", encoding: ""unicode"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :line_items, force: true do |t|
    t.integer :unit_count
    t.decimal :subtotal
  end
end

class LineItem < ActiveRecord::Base
end

class TypeInferenceBug < Minitest::Test
  def setup
    LineItem.create! unit_count: 5, subtotal: 47.98
    LineItem.create! unit_count: 1, subtotal: 13.13
  end

  # This works correctly
  def test_single_column
    assert_kind_of Integer, LineItem.sum(:unit_count)
    assert_kind_of Integer, LineItem.pluck(""sum(unit_count)"").first
    assert_kind_of BigDecimal, LineItem.sum(:subtotal)
    assert_kind_of BigDecimal, LineItem.pluck(""sum(subtotal)"").first
  end

  # All these fail starting in 7.0.5. ActiveRecord seems to apply the type of the last item to all numeric(?) columns.
  def test_two_column_decimal_last
    # Fails in 7.0.5-7.0.7, ok in 7.0.4.3
    assert_kind_of Integer, LineItem.pluck(""sum(unit_count)"", ""sum(subtotal)"").first.first
  end

  def test_two_column_integer_last
    # Fails in 7.0.5-7.0.7, ok in 7.0.4.3
    assert_kind_of BigDecimal, LineItem.pluck(""sum(subtotal)"", ""sum(unit_count)"").first.first
  end

  def test_same_problem_with_another_aggregate_function
    # Fails in 7.0.5-7.0.7, ok in 7.0.4.3
    assert_kind_of BigDecimal, LineItem.pluck(""max(subtotal)"", ""max(unit_count)"").first.first
  end
end

```

### Expected behavior
Type of values returned from `pluck(""aggregate_function(column)"",...)` depends on database's data type and does not change if additional values are also plucked. Up through Rails 7.0.4.3, this worked as expected.

### Actual behavior
When plucking sums (or other aggregate functions) of more than one numeric column, `pluck` coerces all numeric(?) values to the type of the last column, at least when using the postgresql adapter. In our use, this results in integers inconveniently cast to BigDecimals and (more perniciously) decimal values representing dollars and cents being truncated to integers—and the data type of existing columns of a `pluck` call changing based on order or from adding an additional column.

### System configuration
**Rails version**: 7.0.7

**Ruby version**: 3.1.1p18
",midnightmonster,User,2,activerecord,attached PR,With reproduction steps,,,,,,
https://api.github.com/repos/rails/rails/issues/48945,89070,48945,Broken table alias referencing in Rails 7.0.7,open,11,2023-08-15 16:11:26+00:00,2024-01-23 02:20:25+00:00,,"### Steps to reproduce

We're using a combination of ""where missing"" and ""or + scope"" to find goals without a state, either because they have no state record or because they have a state record with a NULL state column on it.

The behaviour has changed in Rails 7.0.7 to throw an ActiveRecord::StatementInvalid error, because on 7.0.6 the left joined table was not given an alias but on 7.0.7 it is given an alias and that alias is then not consistently used in the where clauses produced.

Note this looks a lot like https://github.com/rails/rails/issues/48334 but that bug is fixed on 7.0.6 and 7.0.7.

```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # gem 'rails', '~> 7.0', '= 7.0.6'
  gem 'rails', '~> 7.0', '= 7.0.7'
  # gem 'rails', github: 'rails/rails'
  gem 'sqlite3'
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
#ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :goals, force: true do |t|
  end

  create_table :goal_states, force: true do |t|
    t.integer :goal_id
    t.string :state
  end
end

class Goal < ActiveRecord::Base
  has_one :state, class_name: 'GoalState', dependent: :destroy

  scope :no_state, -> { where.missing(:state).or(left_joins(:state).merge(GoalState.not_set)) }
end

class GoalState < ActiveRecord::Base
  belongs_to :goal

  scope :set, -> { where.not(state: nil) }
  scope :not_set, -> { where(state: nil) }
end

class BugTest < Minitest::Test
  def setup
    @g1 = Goal.create

    @g2 = Goal.create
    @g2.create_state(state: nil)

    @g3 = Goal.create
    @g3.create_state(state: 'cool')
  end

  # This works on Rails 7.0.6 and gives an ActiveRecord::StatementInvalid on
  # Rails 7.0.7 because the table alias behaviour has changed.
  def test_no_state
    puts
    puts Goal.no_state.to_sql
    puts

    assert_equal 2, Goal.no_state.count
    assert_equal Goal.no_state, [@g1, @g2]
  end
end
```

### Expected behavior

On Rails 7.0.6 the SQL produced is:

```sql
SELECT ""goals"".* FROM ""goals"" LEFT OUTER JOIN ""goal_states"" ON ""goal_states"".""goal_id"" = ""goals"".""id"" WHERE (""goal_states"".""id"" IS NULL OR ""goal_states"".""state"" IS NULL)
```

### Actual behavior

On Rails 7.0.7 (and on the main branch of `rails/rails`) the SQL produced is:

```sql
SELECT ""goals"".* FROM ""goals"" LEFT OUTER JOIN ""goal_states"" ""state"" ON ""state"".""goal_id"" = ""goals"".""id"" WHERE (""state"".""id"" IS NULL OR ""goal_states"".""state"" IS NULL)
```

Which throws an error:

```
ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: goal_states.state
```

Because the missing gives the left join an alias of ""state"" but the check produced by the ""OR"" uses the table name ""goal_states"".

I've fixed this in our codebase by changing the code to `scope :no_status, -> { left_joins(:status).merge(Goals::Status.not_set) }` because technically with a left join the missing check is redundant anyway! But I thought I'd report the bug in case it's affecting other people with harder-to-fix query cases.

### System configuration

**Rails version**: 7.0.7

**Ruby version**: 3.2.2",kaoru,User,8,activerecord,attached PR,With reproduction steps,,,,,,
https://api.github.com/repos/rails/rails/issues/48944,142183,48944,Order of `id` column in `select` changes loaded record ID,open,2,2023-08-15 15:44:05+00:00,2023-10-25 20:48:54+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
require ""bundler/inline""                                                         
                                                                                 
gemfile(true) do                                                                 
  source ""https://rubygems.org""                                                  
                                                                                 
  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }                
                                                                                 
  # Activate the gem you are reporting the issue against.                        
  gem ""activerecord"", ""~> 7.0.0""                                                 
  gem ""sqlite3""                                                                  
end                                                                              
                                                                                 
require ""active_record""                                                          
require ""minitest/autorun""                                                       
require ""logger""                                                                 
                                                                                 
# This connection will do for database-independent bug reports.                  
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)                                   
                                                                                 
ActiveRecord::Schema.define do                                                   
  create_table :posts, force: true do |t|                                        
  end                                                                            
                                                                                 
  create_table :comments, force: true do |t|                                     
    t.integer :post_id                                                           
  end                                                                            
end                                                                              
                                                                                 
class Post < ActiveRecord::Base                                                  
  has_many :comments                                                             
end                                                                              
                                                                                 
class Comment < ActiveRecord::Base                                               
  belongs_to :post                                                               
end                                                                              
                                                                                 
class BugTest < Minitest::Test                                                   
  def test_select_order_with_join                                                
    10.times { |i| Post.create! id: i + 1 }                                      
                                                                                 
    Post.first.comments << Comment.create!                                       
                                                                                 
    join_last = Post.left_joins(:comments).select ""posts.*, comments.id""         
    join_first = Post.left_joins(:comments).select ""comments.id, posts.*""        
                                                                                 
    assert_equal (1..10).to_a, join_last.map(&:id)                               
    assert_equal join_last.map(&:id), join_first.map(&:id)                       
  end                                                                            
end                                                                              
```

### Expected behavior
- Post records should have correct `id` and not the ID of the join record(s)
- Order of what is being selected should not matter?

### Actual behavior
The ID if the join record appears to be assigned to the main record

### System configuration
**Rails version**: 7.0.0

**Ruby version**: 3.2.2

Also tested with Rails 6 and Ruby 2.7
",conzett,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/48939,204146,48939,HABTM Silently ignores :dependent option,open,4,2023-08-14 18:35:22+00:00,2023-09-27 01:45:57+00:00,,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end

  create_table :categories, force: true do |t|
  end

  create_join_table :posts, :categories
end

class Post < ActiveRecord::Base
  has_and_belongs_to_many :categories
end

class Category < ActiveRecord::Base
  has_and_belongs_to_many :posts, dependent: :destroy
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!
    category = Category.create!
    post.categories << category
    assert post.persisted?
    assert category.posts.include?(post)

    # Now the bug
    category.destroy!
    refute Post.find_by_id(post.id) # Post should be gone
  end
end

```

### Expected behavior
HABTM should either destroy the associated resource when it is destroyed, or the declaration should error when you try to set the `:dependent` option should trigger an error

### Actual behavior
It silently accepts the `:dependent` option then ignores it

### System configuration
**Rails version**: 7.0.7

**Ruby version**: 3.1.4
",nhorton,User,0,activerecord,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/48932,96156234,48932,This branch allows a user to set self.table_alias in the model,open,1,2023-08-13 02:50:09+00:00,2023-09-01 14:57:18+00:00,,"This branch allows a user to set `self.table_alias` in the model to custom set a table alias.  It then accounts for the SQL needed for this in the AST.  Fixes #48775.

### Motivation / Background

This was motivated by the behavior shown in #[48775](https://github.com/rails/rails/issues/48775) and by a suggestion to implement it by @rafaelfranca.  

### Detail

This Pull Request allows a user to set a SQL `table_alias` in the model by using `self.table_alias = ""alias""`.  Once this is done it gets added to the `Alias` node in the AST.  In order to account for this in the SQL created by the AST I have the `Insert` statement using the original table name instead of the `table_alias` when a `table_alias` is present so that the SQL INSERT will function.  

With the `Update` and `Delete` methods I changed the default behavior of `visit_Arel_Table` to use ` AS ` when a `table_alias` is present, `table AS t` vs `table t`.  One last adjustment was necessary in the `Delete` method.  In order for MySQL to use the alias in the delete method I needed to add the `table_alias` after `DELETE `.  So the code checks for MySQL and if the Node is using a `table_alias` it will then insert the alias  after `DELETE `, `DELETE t FROM table AS t` vs `DELETE FROM table AS t`.  

With these adjustments in place one can now successfully use a `table_alias` set from the model with the Public API.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",paulreece,User,0,actionpack,activemodel,activerecord,activesupport,docs,activestorage,,,
https://api.github.com/repos/rails/rails/issues/48921,142914,48921,feat: Add ActiveModel::Model.filter_attributes,open,3,2023-08-10 14:03:53+00:00,2023-08-13 16:33:55+00:00,,"If this looks good, I'll fill in the gaps in documentation and respond
to feedback in a timely manner.

Is a simpler version of what's in
https://github.com/rails/rails/blob/7-0-stable/activerecord/lib/active_record/core.rb#L373-L396

I'm using this in our application and thought I'd share back.

### Motivation / Background

We using ActiveModel::Model to build plain-old-ruby
objects for things like API clients.  When I use
the Attributes API to define secrets like `attribute :api_key, :string`
I don't want the `api_key` to show up anywhere.

This Pull Request has been created because ActiveModel::Model
is missing the `filter_attributes` behavior present in
ActiveRecord::Core.

### Detail

This Pull Request changes adds `filter_attributes` to ActiveModel::API

I added it to ActiveModel::API so that it does not interfere with
ActiveRecord.


### Additional information

We're using this in our app.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.",bf4,User,0,activemodel,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48915,159,48915,"Not obvious how to customize ActiveStorage routing, and undocumented in API docs and guide",open,2,2023-08-09 16:46:50+00:00,2023-11-25 09:18:49+00:00,,"While setting up ActiveStorage in an existing app, we found ourselves needing to make sure that it's only available on a specific subdomain. We use this snippet in `config/routes.rb` when we are applying this to our application code:

```ruby
defaults(subdomain: app_subdomain) do
  # routes here
end
```

The [ActiveStorage Overview guide](https://guides.rubyonrails.org/active_storage_overview.html) doesn't mention it at all.

I dug around active_storage, and found this:

https://github.com/rails/rails/blob/8ec27a4529e37cff77abe54573bb8923d9fe8e9a/activestorage/config/routes.rb#L4

https://github.com/rails/rails/blob/8ec27a4529e37cff77abe54573bb8923d9fe8e9a/activestorage/lib/active_storage.rb#L359

When I found that it was using `scope`, I realized we could pass in a Hash with options instead of a string to use as a prefix:

```ruby
# config/initializers/active_storage.rb
Rails.application.config.active_storage.routes_prefix = {path: 'rails/active_storage', subdomain: app_subdomain}
```

Seeing it written out this way, `routes_prefix` doesn't seem as an accurate a name for what it allows.

This might be a few tasks actually:

- document `routes_prefix` in rdoc
- document `routes_prefix` on the guide
- maybe rename `routes_prefix` w/ a deprecation?

### Steps to reproduce

n/a
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# Your reproduction script goes here
```

### Expected behavior
<!-- Tell us what should happen -->

Should be able to find out how to customize ActiveStorage routing on either API docs or ActiveStorage guide

### Actual behavior

Had to read the code to find out how to do this

### System configuration
**Rails version**: 7-0-stable (fabd0b5827a3af1f189d726fbc7669f9fbdeef5e)

**Ruby version**: 3.2.2
",technicalpickles,User,1,docs,With reproduction steps,activestorage,,,,,,
https://api.github.com/repos/rails/rails/issues/48908,298704,48908,ActiveRecord::RecordInvalid silently ignored during create! with associations and after_create callbacks,open,8,2023-08-08 13:38:43+00:00,2023-08-10 13:45:13+00:00,,"Hello,

we noticed some inconsistent data in our database and came to the conclusion that data created within an `after_create` hook is not always present.
Our audit tool hooks itself into some of our models by using the `after_*` callbacks.
And on a rare occasion, it produced an invalid record. Causing an `ActiveRecord::RecordInvalid` to be raised within the callback.
If that happens while the audited model is used solely, everything works as intended. A rollback is issued and no incomplete data is persisted. The exception is also re-raised, which is correct in my opinion, but not what the documentation claims: https://guides.rubyonrails.org/active_record_callbacks.html#halting-execution

However, something different happens, if we try this with associated models. Both models are saved, no rollback happens, no exception bubbels up. Incomplete data is persisted because everything but the audit was commited. There is no indication that the callback failed at all. 🤷‍♂️ 

I was unable to find any documentation explaining this behavior.

### Steps to reproduce
```ruby
### Schema

class CreateTestAs < ActiveRecord::Migration[7.0]
  def change
    create_table :test_as do |t|
      t.timestamps
    end
  end
end

class CreateTestBs < ActiveRecord::Migration[7.0]
  def change
    create_table :test_bs do |t|
      t.references :test_a
      t.timestamps
    end
  end
end

### Models

class TestA < ApplicationRecord
  has_one :test_b
end

class TestB < ApplicationRecord
  after_create(-> { raise ActiveRecord::RecordInvalid }) # simulating the broken audit-tool behavior
end
```

### Expected behavior
The expectation is that `TestA.create!(test_b: TestB.new)` issues a rollback and raises the same exception as `TestB.create!` does. No data should be persisted.

### Actual behavior
While `TestB.create!`, as expected, raises an `ActiveRecord::RecordInvalid` exception and issues a rollback. `TestA.create!(test_b: TestB.new)` does not. Instead, both instances of TestA and TestB are persisted. The exception is silently ignored!

```bash
[1] pry(main)> TestB.create!
  TRANSACTION (0.5ms)  BEGIN
  TestB Create (1.8ms)  INSERT INTO ""test_bs"" (""test_a_id"", ""created_at"", ""updated_at"") VALUES ($1, $2, $3) RETURNING ""id""  [[""test_a_id"", nil], [""created_at"", ""2023-08-08 12:29:45.686484""], [""updated_at"", ""2023-08-08 12:29:45.686484""]]
  TRANSACTION (0.6ms)  ROLLBACK
ActiveRecord::RecordInvalid: Record invalid

[2] pry(main)> TestA.create!(test_b: TestB.new)
  TRANSACTION (1.4ms)  BEGIN
  TestA Create (7.6ms)  INSERT INTO ""test_as"" (""created_at"", ""updated_at"") VALUES ($1, $2) RETURNING ""id""  [[""created_at"", ""2023-08-08 12:30:30.200175""], [""updated_at"", ""2023-08-08 12:30:30.200175""]]
  TestB Create (1.3ms)  INSERT INTO ""test_bs"" (""test_a_id"", ""created_at"", ""updated_at"") VALUES ($1, $2, $3) RETURNING ""id""  [[""test_a_id"", 13], [""created_at"", ""2023-08-08 12:30:30.208412""], [""updated_at"", ""2023-08-08 12:30:30.208412""]]
  TRANSACTION (7.7ms)  COMMIT
```

### System configuration
**Rails version**: 7.0.6

**Ruby version**: 3.2.2
",eric-christian,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/48892,54629302,48892,Draft | Investigate implicit recall usage in url helpers,open,0,2023-08-05 10:42:54+00:00,2023-08-16 10:37:00+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created to investigate https://github.com/rails/rails/issues/15097.

### Detail

This Pull Request changes [REPLACE ME]

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

I noticed that options are also extracted from the recall here:
https://github.com/rails/rails/blob/d73daaca479ac50ef2983d3f0af3ae16af738cf0/actionpack/lib/action_dispatch/routing/route_set.rb#L738-L747

But the `id` is never extracted (in the case of my test) since the `controller` doesn't get extracted in the first place as `segment_keys.include?(key)` returns `false` here:
https://github.com/rails/rails/blob/d73daaca479ac50ef2983d3f0af3ae16af738cf0/actionpack/lib/action_dispatch/routing/route_set.rb#L712

I'm unsure of the usecase for using the recall like this, just thought I'd point it out since it's relevant.

**Edit:** I'm guessing this is utilised in mailers going off of the documentation added here: https://github.com/rails/rails/pull/20631?

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",joshuay03,User,0,actionpack,actionview,,,,,,,
https://api.github.com/repos/rails/rails/issues/48885,7958278,48885,I18n record not destroyed,open,2,2023-08-04 10:39:19+00:00,2023-08-10 20:41:06+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created because you couldn't change the `ActiveRecord::Persistence` exception message, meaning the message was `""Failed to destroy #{model} with #{key}""` even if it wasn't an english language app.

### Detail

This Pull Request changes the `ActiveRecord::Persistence` exception message to allow i18n on it.

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [ ] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",enmy,User,7,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48878,4422159,48878,"ActionController::PermissionsPolicy does not define ""Permissions-Policy"" but ""Feature-Policy""",open,1,2023-08-03 21:14:55+00:00,2023-08-03 21:20:00+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# config/initializers/permissions_policy.rb

Rails.application.config.permissions_policy do |f|
  f.camera      :none
  f.gyroscope   :none
  f.microphone  :none
  f.usb         :none
  f.fullscreen  :self
  f.payment     :self
end
```

### Expected behavior
This adds the following to the response headers:

Permissions-Policy: camera=(), gyroscope=(), microphone=(), usb=(), fullscreen=(self), payment=(self)

### Actual behavior
This adds the following to the response headers:

Feature-Policy: camera 'none'; gyroscope 'none'; microphone 'none'; usb 'none'; fullscreen 'self'; payment 'self'

### System configuration
**Rails version**: 7.0.6

**Ruby version**: 3.0.6p216
",mikevoets,User,0,actionpack,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/48849,56448,48849,[Fix #43638] Fix fixtures for namespaced models,open,0,2023-07-29 13:21:06+00:00,2023-07-29 13:26:16+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created to fix https://github.com/rails/rails/issues/43638

### Detail

When a new namespaced model is generated and the namespace is equal to the existing model, the generated tests fail because, in such case, fixtures are generated and loaded incorrectly.

There is a possibility to place model fixtures in subdirectories, so for `Customer` model, we can place fixtures in `test/fixtures/customers.yml` and `test/fixtures/customers/*.yml`. This is a problem when there is a namespaced model, for example `Customers::Categories` because the default fixture is placed in `test/fixtures/customers/categories.yml` and is loaded incorrectly.

This change adds `model_class` to fixtures generated for namespaced models and skips loading namespaced fixtures while a model class mismatch is detected.

<!-- ### Additional information -->

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",macuk,User,1,activerecord,railties,,,,,,,
https://api.github.com/repos/rails/rails/issues/48874,6014046,48874,Rack::Lint on Rails,open,8,2023-07-26 12:30:45+00:00,2023-09-18 23:15:02+00:00,,"Meta issue for adding `Rack::Lint` to Rails middleware tests.

As Rack 3 can now be used with Rails main, it is necessary to ensure that all of the middleware defined in Rails adhere to the Rack SPEC. While existing test coverage was able to find many of the incompatibilities, I've seen multiple examples of mixed case header usage left that need to be fixed. Instead of trying to `grep` or otherwise manually find these middleware that aren't adhering to the SPEC, I'd like to add Rack::Lint to (every?) middleware's unit test in Rails so that we can be sure they follow the Rack 3 SPEC programmatically.",skipkayhil,User,4,actionpack,pinned,,,,,,,
https://api.github.com/repos/rails/rails/issues/48804,277819,48804,Change lanes to update callbacks when an autosaved record already exists,open,0,2023-07-26 04:05:40+00:00,2023-07-26 04:24:53+00:00,,"### Motivation / Background

This address the bug identified in #47171, which is occurs when an autosave is triggered in a before_create, resulting in a the create callbacks occurring twice. The second time on a record that was already persisted, but since there are no attributes changed (it's a clean record), the new record receives the default values.

Now when an autosave occurs in a before_create, we run the update callbacks as well as any create callbacks to avoid confusing situation.

### Alternatives Considered

#### 1) Call an aliased method `_update_record_without_callbacks` and return

This would avoid creating the duplicate record, but may surprise the developer if any `after_*` callbacks they were expecting didn't occur.

We wanted to retain that same guarantee.

#### 2) Raise if the record is already persisted

The previous behavior of creating multiple records may have simply gone unnoticed to users, and raising would be a breaking change.

We could roll out that behavior behind a flag and deprecation warning, but we wanted to try and solve for this edge-case.

#### 3) Return if record is already persisted and no dirty changes

Similar to the second option, silently allowing this behavior to change could have unexpected consequences.

The interesting thing was also non of the Active Record tests failed if we just stopped the callback chain there.

### Additional information

Fixes #47171",zzak,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48799,2661,48799,Clarify on how to return records in order of ids in ActiveRecord,open,0,2023-07-25 07:01:29+00:00,2023-12-19 19:15:59+00:00,,"#### Motivation

I was bitten by a subtle bug where code was depending on the order of records being returned by `.find`, however turns out `reorder("""")` does not actually clear the order scope, which meant that the order of results was not the order of the ids being passed in.

This change makes it clearer what is required to have records be returned in order.",chendo,User,0,activerecord,docs,needs work,,,,,,
https://api.github.com/repos/rails/rails/issues/48787,4841877,48787,Combing tagged logger without block and with block leaks tags across threads,open,1,2023-07-22 13:24:34+00:00,2023-09-07 16:15:43+00:00,,"Using the tagged logger without a block does not appear to have the same threaded isolation that tagging with a block has. The documentation doesn't make it clear if its intended or not, but from a user's perspective, it is unexpected. From the existing tests, it looks like some of this is expected, but the inconsistency is confusing. I left a comment on the original PR to try and get some insight.

This could be in some ways related to https://github.com/rails/rails/issues/46084 - however the focus of that is broadcast logging and not threading, however the issues seem similar - tag leak.

### Steps to reproduce
This example currently relies on identical setup to what is in `activesupport/test/tagged_logging_test.rb` which should make it easy to add these tests or some modified versions if its agreed this is a bug.
```
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""active_support""
require ""active_support/core_ext/object/blank""
require ""minitest/autorun""

class BugTest < Minitest::Test
  # Copied from activesupport/test/tagged_logging_test.rb
  class MyLogger < ::ActiveSupport::Logger
    def flush(*)
      info ""[FLUSHED]""
    end
  end

  # Copied from activesupport/test/tagged_logging_test.rb
  def setup
    @output = StringIO.new
    @logger = ActiveSupport::TaggedLogging.new(MyLogger.new(@output))
  end

  # Copied from activesupport/test/tagged_logging_test.rb:80
  def test_keeps_each_tag_in_their_own_thread
    @logger.tagged(""BCX"") do
      Thread.new do
        @logger.info ""Dull story""
        @logger.tagged(""OMG"") { @logger.info ""Cool story"" }
      end.join
      @logger.info ""Funky time""
    end
    assert_equal ""Dull story\n[OMG] Cool story\n[BCX] Funky time\n"", @output.string
  end
  # PASS output:
  # Dull story
  # [OMG] Cool story
  # [BCX] Funky time

  def test_keeps_each_tag_in_their_own_thread_using_tagged_without_block
    logger1 = @logger.tagged(""BCX"")
    Thread.new do
      logger1.info ""Dull story""
      logger2 = logger1.tagged(""OMG"")
      logger2.info ""Cool story""
    end.join
    logger1.info ""Funky time""

    assert_equal ""Dull story\n[OMG] Cool story\n[BCX] Funky time\n"", @output.string
  end
  # FAIL output:
  # [BCX] Dull story
  # [BCX] [OMG] Cool story
  # [BCX] Funky time

  def test_keeps_each_tag_in_their_own_thread_using_tagged_without_block_combined_with_tagged_block
    logger1 = @logger.tagged(""BCX"")
    Thread.new do
      logger1.info ""Dull story""
      logger1.tagged(""OMG"") { logger1.info ""Cool story"" }
    end.join
    logger1.info ""Funky time""

    assert_equal ""Dull story\n[OMG] Cool story\n[BCX] Funky time\n"", @output.string
  end
  # FAIL output:
  # [BCX] Dull story
  # [BCX] [OMG] Cool story
  # [BCX] Funky time

  def test_keeps_each_tag_in_their_own_thread_using_tagged_without_block_combined_with_tagged_block_nested
    logger = @logger.tagged(""BASE_TAG"")
    logger.tagged(""BCX"") do
      Thread.new do
        logger.info ""Dull story""
        logger.tagged(""OMG"") { logger.info ""Cool story"" }
      end.join
      logger.info ""Funky time""
    end
    assert_equal ""[BASE_TAG] Dull story\n[BASE_TAG] [OMG] Cool story\n[BASE_TAG] [BCX] Funky time\n"", @output.string
  end
  # FAIL output:
  # [BASE_TAG] [BCX] Dull story
  # [BASE_TAG] [BCX] [OMG] Cool story
  # [BASE_TAG] [BCX] Funky time
end
```

### Expected behavior
I would expect that if `#tagged` has a certain level of thread isolation, it should always have that isolation and behave consistently. At a minimum `test_keeps_each_tag_in_their_own_thread_using_tagged_without_block_combined_with_tagged_block_nested` should pass. It seems awkward that depending on how your current logger instance was created, the behavior of tagging with a block could change. I think it is worth a conversation on the correct behavior here, as maybe my first two failures should remain failures due to some context or intent I am unaware of.

### Actual behavior
1. When using a new logger created from `#tagged`, tags are shared across threads
2. When tagging with a block from a logger instance created from `#tagged`, all tags are shared

### System configuration
**Rails version**: main

**Ruby version**: 3.0.0
",erikbelusic,User,0,activesupport,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/48785,2439912,48785,Fix child association loading in `:n_plus_one_only` mode,open,3,2023-07-21 21:44:39+00:00,2023-12-17 16:43:38+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

Fixes #49473

Strict loading in `:n_plus_one_only` mode is designed to prevent performance issues when deeply traversing associations. It allows `Person.find(1).posts`, but _not_ `Person.find(1).posts.map(&:category)`. This fix avoids the surprise that occurs when `person.posts.first` eagerly loads the whole association rather than allowing the user to manage the child association.

This fixes a serious ordering issue. Without strict loading, `person.posts.first` is guaranteed to return the first post in primary key order. On the other hand, `person.posts.load.first` is nondeterministic. The database is not guaranteed to return in a consistent order, in particular under load with other operations occurring. This is a rude surprise when trying to use `:n_plus_one_only` mode.

### Detail

Before:

```ruby
person = Person.find(1)
person.strict_loading!(mode: :n_plus_one_only)
person.posts.first
# SELECT * FROM posts WHERE person_id = 1; -- non-deterministic order
```

After:

```ruby
person = Person.find(1)
person.strict_loading!(mode: :n_plus_one_only)
person.posts.first # this is 1+1, not N+1
# SELECT * FROM posts WHERE person_id = 1 ORDER BY id LIMIT 1;
```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",reid-rigo,User,0,activerecord,ready,,,,,,,
https://api.github.com/repos/rails/rails/issues/48781,282447,48781,Detect if the editor is missing a wait flag and print a warning,open,1,2023-07-21 16:37:31+00:00,2024-01-09 13:23:27+00:00,,"### Motivation / Background

The current code for commands such as `credentials:edit` detects whether $EDITOR or $VISUAL are set, and tells the developer to set them to something like `EDITOR=mate --wait` if they are not. On systems where $EDITOR is set, but it launches a forking process, the message is not displayed and may never be seen by the developer.

### Description

This change detects whether the editor for commands like `credentials:edit` exits in less than one second, such as when `EDITOR` is set to `mate` without the wait flag. This is a sign that the editor process is forking and exited immediately, and that the developer didn't have a chance to edit the file.

If an immediate exit is detected, a message is printed that the editor command should be changed to wait instead of exiting.",LukasSkywalker,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48775,1216046,48775,"Arel table alias breaks insert, update, and delete statements",open,3,2023-07-20 21:10:55+00:00,2023-10-18 07:41:52+00:00,,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.0.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string ""name""
  end
end

class Post < ActiveRecord::Base
end


class BugTest < Minitest::Test
  def setup
    Post.arel_table.table_alias = nil
  end

  def test_select
    assert_equal('SELECT ""posts"".* FROM ""posts""', Post.all.to_sql)
  end

  def test_select_alias
    Post.arel_table.table_alias = ""p""
    assert_equal('SELECT ""p"".* FROM ""posts"" ""p""', Post.all.to_sql)
  end

  def test_insert
    post = Post.create!
    refute_nil(post)
  end

  def test_insert_alias
    Post.arel_table.table_alias = ""p""
    e = assert_raises(ActiveRecord::StatementInvalid) do
      Post.create!
    end
    assert_equal('INSERT INTO ""posts"" ""p"" DEFAULT VALUES', e.sql)
    assert_equal('SQLite3::SQLException: near """"p"""": syntax error', e.message)
  end

  def test_update
    post = Post.create!
    refute_nil(post)
    post.name = ""foo""
    post.save!
  end

  def test_update_alias
    post = Post.create!
    refute_nil(post)

    Post.arel_table.table_alias = ""p""
    e = assert_raises(ActiveRecord::StatementInvalid) do
      post.name = ""foo""
      post.save!
    end
    assert_equal('UPDATE ""posts"" ""p"" SET ""name"" = ? WHERE ""p"".""id"" = ?', e.sql)
    assert_equal('SQLite3::SQLException: near """"p"""": syntax error', e.message)
  end

  def test_delete
    post = Post.create!
    refute_nil(post)
    post.delete
  end

  def test_delete_alias
    post = Post.create!
    refute_nil(post)

    Post.arel_table.table_alias = ""p""
    e = assert_raises(ActiveRecord::StatementInvalid) do
      post.delete
    end
    assert_equal('DELETE FROM ""posts"" ""p"" WHERE ""p"".""id"" = ?', e.sql)
    assert_equal('SQLite3::SQLException: near """"p"""": syntax error', e.message)
  end
end
```

### Expected behavior
The table alias is valid on SELECTs, but not on INSERT, UPDATE, or DELETE statements.
The example is with sqlite, but [MySQL has similar rules where it specifically asks for a table _name_](https://dev.mysql.com/doc/refman/8.0/en/insert.html).

I would expect Arel to _NOT_ use the alias on insert, update, and delete statements

### System configuration
**Rails version**:
6.1.7.4

**Ruby version**:
3.2.2

**MySQL**:
MySQL 5.7, using the mysql2 0.5.5 gem",lavoiesl,User,0,activerecord,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/48757,54629302,48757,Draft | Investigate `has_many` `through` polymorphic with `where`,open,0,2023-07-18 12:12:34+00:00,2023-07-18 12:25:46+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created to investigate https://github.com/rails/rails/issues/40109 and https://github.com/rails/rails/issues/34613.

### Detail

This Pull Request changes [REPLACE ME]

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [ ] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",joshuay03,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48745,214488,48745,Implemented ActiveRecord::Base.pretty_print to work with PP.,open,1,2023-07-17 15:13:20+00:00,2023-07-19 18:35:21+00:00,,"### Motivation / Background

When checking what columns are defined in an arbitrary model, you may use `console` or other tools to output the model class.
However, when a model has many columns, it can be difficult to read when displayed on a single line.

```ruby
p User
# => User(id: integer, first_name: string, last_name: string, birth_at: datetime, email: string, address: string, active: boolean, parent_id: integer, type: string, created_at: datetime, updated_at: datetime)
```

NOTE: [implement ActiveRecord::Base#pretty_print by notEthan · Pull Request #15172 · rails/rails](https://github.com/rails/rails/pull/15172)

### Detail

Define `ActiveRecord::Base.pretty_print` to support `pp` output.

```ruby
pp User
# => User(
#     id: integer,
#     first_name: string,
#     last_name: string,
#     birth_at: datetime,
#     email: string,
#     address: string,
#     active: boolean,
#     parent_id: integer,
#     type: string,
#     created_at: datetime,
#     updated_at: datetime)
```

The format and implementation are based on [`ActiveRecord::Base#pretty_print`](https://github.com/rails/rails/blob/e18791c0bf2e03d3e6380f69b44e946564c6f873/activerecord/lib/active_record/core.rb#L682-L705) and [`ActiveRecord::Base.inspect`](https://github.com/rails/rails/blob/e18791c0bf2e03d3e6380f69b44e946564c6f873/activerecord/lib/active_record/core.rb#L332-L346).

Note: Output of `ActiveRecord::Base#pretty_print` is as follows.

```ruby
pp User.new
# => #<User:0x00007f0431d6dc88
#     id: nil,
#     first_name: nil,
#     last_name: nil,
#     birth_at: nil,
#     email: nil,
#     address: nil,
#     active: nil,
#     parent_id: nil,
#     type: nil,
#     created_at: nil,
#     updated_at: nil>
```


### Additional information

I also found the following problem when implementing `ActiveRecord::Base#pretty_print` and have addressed it.
* [pretty_print will use #inspect if a subclass redefines it by notEthan · Pull Request #18474 · rails/rails](https://github.com/rails/rails/pull/18474)


### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",osyo-manga,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48741,514063,48741,Adjust link text and add info to AV Helpers API docs,open,2,2023-07-15 15:21:20+00:00,2023-07-17 19:14:17+00:00,,"### Motivation / Background

This Pull Request is a follow up to #48273 
Feedback in that PR requested an adjustment to the link text in the Guide and to add some information to Action View Helpers API docs. 

### Detail

This Pull Request changes link text in a guide file and adds info to Action View Helpers API docs landing page. 

### Additional information

/cc @zzak since this PR started with me, bounced off him after a tweak, and continues with me for some extra based on feedback. 

### Checklist

Before submitting the PR make sure the following are checked:

* [X] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [X] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [X] Tests are added or updated if you fix a bug or add a feature.
* [X] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",mikepmunroe,User,0,docs,actionview,,,,,,,
https://api.github.com/repos/rails/rails/issues/48733,5657035,48733,Allow `accepts_nested_attributes_for` to accept associated record attributes with custom primary keys,open,2,2023-07-13 14:38:31+00:00,2023-12-06 02:11:53+00:00,,"Fixes #48714.

Currently, when we have an `accepts_nested_attributes_for` for a child relation with a custom primary key, when assigning child attributes we must use `""id""` key with a value to provide a primary key, which can be confusing (as in the linked issue).

Example:
```ruby
class Owner < ApplicationRecord
  has_many :pets
  accepts_nested_attributes_for :pets
end

class Pet < ApplicationRecord
  self.primary_key = :pet_id # custom primary key name
  belongs_to :owner
end
```

Before:

```ruby
owner.update(pets_attributes: { id: 2, name: ""parrot"" }) # works, because we used ""id"" as a key
owner.update(pets_attributes: { pet_id: 2, name: ""parrot"" }) # does not work
```

After - both variants are working",fatkodima,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48731,4473199,48731,Prevent extra newlines after table generation block in shema.rb,open,0,2023-07-13 10:26:54+00:00,2023-07-13 15:56:45+00:00,,"…when there are no foreign keys or indexes.  This will produce valid code without linting issues (issue: Trailing whitespace detected)


### Motivation / Background

Schema generator was generating files with linting issues (Trailing whitespace detected) **when there is no foreign_keys in the database**. Developer who care about linting has to manually fix those issues after every schema dump operation (e.g. `rails db:migrate`). 

Example of schema file **with linting issue** (extra newline on L6): 
```
ActiveRecord::Schema[7.0].define(version: 2023_03_14_145511) do
  create_table ""action_logs"", force: :cascade do |t|
    t.string ""action"", null: false
    t.index [""deleted_at""], name: ""index_action_logs_on_deleted_at""
  end

end
```

Example of schema file **without** linting issues: 

```
ActiveRecord::Schema[7.0].define(version: 2023_03_14_145511) do
  create_table ""action_logs"", force: :cascade do |t|
    t.string ""action"", null: false
    t.index [""deleted_at""], name: ""index_action_logs_on_deleted_at""
  end
end
```

### Details
We should NOT attach a newline after last table definition. Extra newline is needed only if foreign keys definitions exists in the database. 

### Checklist
 Before submitting the PR make sure the following are checked:
 
 * [x]  This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
 * [x]  Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
 * [ ]  Tests are added or updated if you fix a bug or add a feature.
 * [ ]  CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",knagode,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48727,366910,48727,Fix index_errors and provide :nested_attributes_order mode,open,5,2023-07-13 03:13:17+00:00,2024-01-26 20:29:08+00:00,,"1. Fix #24390, a bug on indexing association validation errors.
1. Add`index_errors: :nested_attributes_order` mode for an alternative ordering of errors.

### Motivation / Background

GitLab is using `index_errors` but has to [workaround its bug](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/51623#note_490919557), which is #24390. That bug is about association validation error having the incorrect index because the indexing can be computed from an incomplete collection of association records. The fix would be to index from the full association collection.

@tijwelch first created https://github.com/rails/rails/pull/24728, however @markedmondson  pointed out that [`reject_if` would not work properly](https://github.com/rails/rails/pull/24728#issuecomment-321361869). Also, from the discussions I found that people have two different interpretations of what ""indexing"" means: 

1. to index by association order (based on database order), which is the current behavior
2. to index by nested attributes order (and `reject_if` is only applicable here)

Those two are conflicting goals. To cater to both of them, this PR also adds a new ordering mode called `nested_attributes_order`. This mode is more applicable to GitLab's use case, where the frontend could pass nested attributes in arbitrary order, and still want the error index to match such order.

### Detail

This Pull Request adds a new class called `ActiveRecord::Associations::NestedError`, which handles the calculation of index. The original index logic exists in `AutosaveAssociation` and is moved into this class. Base on `index_errors` setting, it would choose whether to index based on `association.target` order or nested attributes order.

For nested attributes order, when nested_attributes are assigned (via a setter like `roles_attributes=`), the array of the corresponding records will be stored in the association object as `nested_attributes_target`. The `NestedError` can then access this array to compute the index. The `reject_if` would also work since if something is rejected, the `nested_attributes_target` would have `nil` in its place as a placeholder, therefore maintaining the overall index.

### Additional information

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",lulalala,User,8,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48714,7717033,48714,accepts_nested_attributes_for does not work with non `id` primary_key,open,9,2023-07-11 15:18:06+00:00,2023-11-30 13:26:53+00:00,,"### Steps to reproduce
Currently `accepts_nested_attributes_for` when it's trying to find existing records in relation it's hardcoded to take a look on `id` column. 
Problem is that `id` is not alway a primary key. In our case we have one of tables does not have `id` column at all but uses `uuid` is primary key. 
We've set `self.primary_key = 'uuid'` but `accepts_nested_attributes_for` does not uses this value to use in matching existing records.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end

  create_table :comments, force: true, id: false do |t|
    t.integer :uuid, primary_key: true
    t.integer :post_id
    t.string :name
  end
end

class Post < ActiveRecord::Base
  has_many :comments

  accepts_nested_attributes_for :comments, allow_destroy: true
end

class Comment < ActiveRecord::Base
  self.primary_key = 'uuid'

  belongs_to :post
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!
    post.comments << Comment.create!(name: 'wonderfull')

    post.reload

    assert_equal 1, post.comments.count
    assert_equal 1, Comment.count
    assert_equal post.id, Comment.first.post.id

    update_posts_data = {
      'id' => post.id,
      'comments_attributes' => [
        {
          'uuid' => Comment.first.uuid,
          'name' => 'Even Better'
        },
        {
          'name' => 'Another comment'
        }
      ]
    }

    post.assign_attributes(update_posts_data)

    post.save

    post.reload
    assert_equal 2, post.comments.count
    assert_equal 2, Comment.count

    assert_equal post.id, Comment.first.post.id
    assert_equal post.id, Comment.last.post.id

    assert_equal 'Even Better', Comment.first.name
    assert_equal 'Another comment', Comment.last.name
  end
end

```

### Expected behavior
Existing records are updated and new created.

### Actual behavior
It always trying to create new records and hit violation on primary key:
```
ActiveRecord::RecordNotUnique: SQLite3::ConstraintException: UNIQUE constraint failed: comments.uuid
```

### System configuration
**Rails version**: 7.1.0.alpha 
But present in any Rails version

**Ruby version**: 3.1.2 
But present in any Ruby version
",fanantoxa,User,3,activerecord,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/48711,99586,48711,Change form template to use button tag,open,0,2023-07-11 10:32:27+00:00,2023-07-11 10:32:31+00:00,,"Rails 7 uses Turbo/Stimulus by default. Turbo adds disabled attributes when submitting form (see https://github.com/hotwired/turbo/pull/386). As the PR describes, we can change submission text when form is submitted.

```
button                  .show-when-disabled { display: none; }
button[disabled]        .show-when-disabled { display: initial; }

button                  .show-when-enabled { display: initial; }
button[disabled]        .show-when-enabled { display: none; }
```

```
<button>
  <span class=""show-when-enabled"">Submit</span>
  <span class=""show-when-disabled"">Submitting...</span>
</button>
```

This is only possible with the button tag. Because input tag does not allow child elements.

It also seems like that button tags are preferred way nowadays.

> https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/button
> Note: While <input> elements of type button are still perfectly valid
> HTML, the newer <button> element is now the favored way to create
> buttons. Given that a <button>'s label text is inserted between the
> opening and closing tags, you can include HTML in the label, even
> images.",shouichi,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48700,54629302,48700,"Update inconsistent documentation for `#structurally_compatible?`, `#and` and `#or`",open,3,2023-07-09 21:24:03+00:00,2023-10-11 13:30:11+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created to update some inconsistent documentation for the public methods  `ActiveRecord::QueryMethods#structurally_compatible?`, `ActiveRecord::QueryMethods#and?` and `ActiveRecord::QueryMethods#or?`.

### Detail

In https://github.com/rails/rails/pull/39634, `#structurally_incompatible_values_for` was updated so that a given relation is only considered structurally incompatible to the current relation if it explicitly uses multi value relation value methods that either vary from (eg. joining on a different table) or are not included in the current relation.

The public method `#structurally_compatible?` was affected by this change but currently has an example in its documentation that is inconsistent with the current functionality:

**Expected:**
https://github.com/rails/rails/blob/a5fc471b3f4bbd02e6be38dae023526a49e7d049/activerecord/lib/active_record/relation/query_methods.rb#L1011-L1012

**Actual**
```ruby
Post.joins(:comments).structurally_compatible?(Post.where(""id = 1""))
# => true
```

The descriptions for `#structurally_compatible?`, `#and` and `#or` also imply that the two relations need to include the exact same relation value methods, which is no longer true.

This PR simply updates the documentation for these methods so that:
1. The 'new' functionality is reflected in the descriptions.
2. The incorrect result for the example in `#structurally_compatible?` is fixed.

I've also added 2 more examples to `#structurally_compatible?` to make the expected output clearer.

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

Originally, I opened this issue https://github.com/rails/rails/issues/48694 and a PR https://github.com/rails/rails/pull/48695 to address it by reverting the changes in https://github.com/rails/rails/pull/39634. However, I concluded that:
- The changes and reasoning in https://github.com/rails/rails/pull/39634 make sense in that a majority of the time the given relation will probably just vary by `#where`. I was a bit on the fence at first cause I felt like consistently raising an error here might prevent unexpected query results and provide a more meaningful error than the ones you might get due to a malformed query (like referencing a table in the given relation that's only been joined to in the current relation), but at the same time I can see how that approach can be considered to be a bit too heavy handed.
- https://github.com/rails/rails/pull/39634 was merged 3 years ago and I don't see any other open issues relating to it, so I think it's more reasonable to just update the documentation at this point than to revert the changes in that PR which might result in breaking changes on apps running on edge or when upgrading to the version this commit ends up in.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",joshuay03,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48691,47554,48691,Create an `ActiveSupport::Callable` object to do case-equality with objects that implement `#call`,open,2,2023-07-07 23:12:18+00:00,2023-10-19 14:54:01+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

Rails has some configuration options that explicitly type-check on `Proc` instead of allowing duck-typing. This PR introduces `ActiveSupport::Callable` which case-equals any object that responds to `call`. 

```ruby
class CustomQueryWarningsAction
  def self.call
    new.very_complex_method
  end
  # ....
end

# This PR allows this:
config.active_record.db_warnings_action = CustomQueryWarningsAction

# ...instead of previously requiring this:
config.active_record.db_warnings_action = CustomQueryWarningsAction.method(:call).to_proc
```

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",bensheldon,User,0,actionpack,activemodel,activerecord,activesupport,railties,actionview,activejob,actioncable,actionmailbox
https://api.github.com/repos/rails/rails/issues/48688,34395972,48688,Callbacks called twice when child accepts_nested_attributes_for parent,open,8,2023-07-07 16:25:45+00:00,2023-10-30 14:23:22+00:00,,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string :name
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
    t.string :name
  end
end

class Post < ActiveRecord::Base
  has_one :comment

  before_validation :before_validation_callback_post
  after_validation :after_validation_callback_post

  before_save :before_save_callback_post
  after_save :after_save_callback_post

  before_create :before_create_callback_post
  after_create :after_create_callback_post

  def before_validation_callback_post
    puts 'Post: before_validation_callback'
  end

  def after_validation_callback_post
    puts 'Post: after_validation_callback'
  end

  def before_save_callback_post
    puts 'Post: before_save_callback'
  end

  def after_save_callback_post
    puts 'Post: after_save_callback'
  end

  def before_create_callback_post
    puts 'Post: before_create_callback'
  end

  def after_create_callback_post
    puts 'Post: after_create_callback'
  end
end

class Comment < ActiveRecord::Base
  belongs_to :post

  accepts_nested_attributes_for :post

  before_validation :before_validation_callback_comment
  after_validation :after_validation_callback_comment

  before_save :before_save_callback_comment
  after_save :after_save_callback_comment

  before_create :before_create_callback_comment
  after_create :after_create_callback_comment

  def before_validation_callback_comment
    puts 'Comment: before_validation_callback'
  end

  def after_validation_callback_comment
    puts 'Comment: after_validation_callback'
  end

  def before_save_callback_comment
    puts 'Comment: before_save_callback'
  end

  def after_save_callback_comment
    puts 'Comment: after_save_callback'
  end

  def before_create_callback_comment
    puts 'Comment: before_create_callback'
  end

  def after_create_callback_comment
    puts 'Comment: after_create_callback'
  end
end

class BugTest < Minitest::Test
  def test_association_stuff
    Comment.create!(name: 'foo', post_attributes: {name: 'bar'})
  end
end

```

### Expected behavior
`before_validation`, `after_validation`, `before_save`, `after_save` callbacks should only be called once when saving a parent record that accepts nested attributes for a child record. Note that `before_create`, `after_create` callbacks **are** only called once, so this inconsistency is especially confusing.

### Actual behavior
`before_validation`, `after_validation`, `before_save`, `after_save` are all called twice on parent record.

```
(base) m-apd-jmiller:models jmiller$ ruby active_record_main.rb 
Fetching https://github.com/rails/rails.git
Fetching gem metadata from https://rubygems.org/......
Resolving dependencies...
Using rake 13.0.6
Using connection_pool 2.4.1
Using minitest 5.18.1
Using webrick 1.8.1
Using erubi 1.12.0
Using rack 3.0.8
Using websocket-extensions 0.1.5
Using marcel 1.0.2
Using rack-test 2.1.0
Using bundler 2.4.7
Using websocket-driver 0.7.5
Using nio4r 2.5.9
Using zeitwerk 2.6.8
Using date 3.3.3
Using timeout 0.4.0
Using builder 3.2.4
Using io-console 0.6.0
Using racc 1.7.1
Using crass 1.0.6
Using thor 1.2.2
Using sqlite3 1.6.3 (x86_64-darwin)
Using rack-session 2.0.0
Using mini_mime 1.1.2
Using rackup 2.1.0
Using concurrent-ruby 1.2.2
Using net-protocol 0.2.1
Using reline 0.3.5
Using i18n 1.14.1
Using net-imap 0.3.6
Using nokogiri 1.15.3 (x86_64-darwin)
Using net-pop 0.1.2
Using net-smtp 0.3.3
Using loofah 2.21.3
Using irb 1.7.1
Using rails-html-sanitizer 1.6.0
Using tzinfo 2.0.6
Using mail 2.8.1
Using activesupport 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using activemodel 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using rails-dom-testing 2.1.1
Using activerecord 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using actionview 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using globalid 1.1.0
Using actionpack 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using activejob 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using actioncable 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using activestorage 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using actionmailer 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using actionmailbox 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using actiontext 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using railties 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using rails 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
-- create_table(:posts, {:force=>true})
D, [2023-07-07T12:17:20.483607 #2897] DEBUG -- :    (0.1ms)  DROP TABLE IF EXISTS ""posts""
D, [2023-07-07T12:17:20.485077 #2897] DEBUG -- :    (1.1ms)  CREATE TABLE ""posts"" (""id"" integer PRIMARY KEY AUTOINCREMENT NOT NULL, ""name"" varchar)
   -> 0.0286s
-- create_table(:comments, {:force=>true})
D, [2023-07-07T12:17:20.485698 #2897] DEBUG -- :    (0.0ms)  DROP TABLE IF EXISTS ""comments""
D, [2023-07-07T12:17:20.486042 #2897] DEBUG -- :    (0.1ms)  CREATE TABLE ""comments"" (""id"" integer PRIMARY KEY AUTOINCREMENT NOT NULL, ""post_id"" integer, ""name"" varchar)
   -> 0.0009s
D, [2023-07-07T12:17:20.488263 #2897] DEBUG -- :    (0.1ms)  CREATE TABLE ""schema_migrations"" (""version"" varchar NOT NULL PRIMARY KEY)
D, [2023-07-07T12:17:20.490839 #2897] DEBUG -- :    (0.1ms)  CREATE TABLE ""ar_internal_metadata"" (""key"" varchar NOT NULL PRIMARY KEY, ""value"" varchar, ""created_at"" datetime(6) NOT NULL, ""updated_at"" datetime(6) NOT NULL)
D, [2023-07-07T12:17:20.532633 #2897] DEBUG -- :   ActiveRecord::InternalMetadata Load (2.7ms)  SELECT * FROM ""ar_internal_metadata"" WHERE ""ar_internal_metadata"".""key"" = ? ORDER BY ""ar_internal_metadata"".""key"" ASC LIMIT 1  [[nil, ""environment""]]
D, [2023-07-07T12:17:20.533215 #2897] DEBUG -- :   ActiveRecord::InternalMetadata Create (0.1ms)  INSERT INTO ""ar_internal_metadata"" (""key"", ""value"", ""created_at"", ""updated_at"") VALUES ('environment', 'development', '2023-07-07 16:17:20.532735', '2023-07-07 16:17:20.532743')
Run options: --seed 61519

# Running:

Comment: before_validation_callback
Post: before_validation_callback
Post: after_validation_callback
Comment: after_validation_callback
Post: before_save_callback
Post: before_create_callback
D, [2023-07-07T12:17:20.661392 #2897] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2023-07-07T12:17:20.661656 #2897] DEBUG -- :   Post Create (0.4ms)  INSERT INTO ""posts"" (""name"") VALUES (?)  [[""name"", ""bar""]]
Comment: before_validation_callback
Comment: after_validation_callback
Comment: before_save_callback
Comment: before_create_callback
D, [2023-07-07T12:17:20.662908 #2897] DEBUG -- :   Comment Create (0.1ms)  INSERT INTO ""comments"" (""post_id"", ""name"") VALUES (?, ?)  [[""post_id"", 1], [""name"", ""foo""]]
Comment: after_create_callback
Comment: after_save_callback
Post: after_create_callback
Post: after_save_callback
Comment: before_save_callback
Comment: after_save_callback
D, [2023-07-07T12:17:20.663528 #2897] DEBUG -- :   TRANSACTION (0.1ms)  commit transaction
```

### System configuration
**Rails version**: 5.2.8.1, 7.0.6 (tested both)

**Ruby version**: 2.7.6, 3.2.1 (tested both)
",jakemiller13,User,1,activerecord,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/48683,277819,48683,HasOne `create_association` should raise if association already exists,open,8,2023-07-07 06:13:00+00:00,2023-07-12 01:07:02+00:00,,"The goal is to raise an exception when calling `create_association` which would replace an already persisted association.

Here is a failing test report as well:

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""active_support/testing/assertions""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :authors, force: true

  create_table :books, force: true do |t|
    t.integer :author_id
  end
end

class Author < ActiveRecord::Base
  has_one :book
end

class Book < ActiveRecord::Base
  belongs_to :author
  validates :author_id, uniqueness: true
end

class BugTest < Minitest::Test
  include ActiveSupport::Testing::Assertions

  def test_association_stuff
    author = Author.create!
    author.create_book!

    assert_no_difference -> { Book.count } do
      assert_raises ActiveRecord::RecordNotSaved do
        author.create_book!
      end
    end
  end
end
```",zzak,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48672,347652,48672,Refactor CollectionAssociation to improve thread-safety; Fixes #48671,open,2,2023-07-05 21:22:38+00:00,2023-12-20 17:27:59+00:00,,"### Motivation / Background

This Pull Request has been created to resolve race conditions in threaded code when loading instances of `CollectionAssociation` on an object which is shared across threads, as described in issue #48671

### Detail

This Pull Request changes the implementation of two methods to prevent them from mutating an instance variable in ways that would violate the expectations of other methods which rely on the state of that variable. 

Specifically, in the current state, the instance variable `@target` is:

1. Initialized as `nil`, then subsequently reinitialized to an empty array (many methods depend on it being enumerable and will raise errors if called during the window of time in which it is `nil`)
2. Mutated by calling `delete` on each of its elements prior to overwriting it with a new value (creating a window of time where it contains partial data or no data)

Both of these situations present a race condition when the object is shared by multiple threads.

The changes in this pull request:
1. Resolve the first issue by replacing a call to `super` with explicit initializations appropriate to the subclass
2. Resolve the second issue by replacing the call to `delete` with an index lookup, which makes the reassignment behavior atomic.

### Additional information

**Performance**: the array lookup in `merge_target_lists` could be done in other ways; the `index` lookup measures at least as fast as `delete` on my hardware; other approaches using enumerable methods like `detect` would be slower.

**Testing:** although the linked issue includes a test script that can demonstrate the problem, the nature of it is timing-dependent in a way that makes it difficult to write explicit tests to reproduce, and the changes are straightforward. I think that a lack of regression in existing tests should be sufficient verification.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] ~Tests are added or updated if you fix a bug or add a feature.~
* [x] ~CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.~
",mullican,User,2,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48671,347652,48671,Loading a CollectionAssociation is not threadsafe in all contexts,open,0,2023-07-05 21:13:21+00:00,2023-07-24 17:33:57+00:00,,"### Steps to reproduce
The superclass `CollectionAssociation` applies to `has_many` and HABTM relations. Its implementation of the `load_target` method relies on the value of an instance variable `@target` which is initialized in `reset` to an empty array. When a given association has not been loaded, this variable is passed as an argument to the method `merge_target_lists`, where database results are compared to the current copy of the records held in memory.

This presents two potential race conditions in threaded code:
1. The `reset` method calls `super` before assigning the empty array to `@target`. On the `Association` superclass, `@target` is assigned as `nil`, so there is a brief moment between the two assignments where it may evaluate as `nil`. Many methods on `CollectionAssociation` assume that its value is always an array and will throw a `NoMethodError` exception if called in this state.
2. The implementation of `merge_target_lists` mutates the value of the passed argument by calling `delete` on its elements before subsequently returning a final result back to the caller, where it is reassigned to the `@target` variable. Thus, there is also a brief moment, while this method is iterating over a result set, where `@target` may contain either partial data or no data. If another thread relies on the value of `@target` at this point in time, it will see inconsistent results.

Consider the following scenario:
```ruby
class Post < ApplicationRecord
  has_many :comments
end

@post = Post.find(1)
Thread.new { @post.comments.do_some_work }
Thread.new { @post.comments.do_other_work }
```

### Expected behavior
Because the call to `comments` will lazily load the association, and there is no guaranteed order of execution, either thread, or both, may load records from the database, depending on when the value of `@loaded` is read and written. However, the load should occur atomically, so that if both threads evaluate `@loaded` as false, they both fetch and return the correct records consistently. In the current implementation, a thread in this scenario may see no data, partial data, or throw an exception.

### Actual behavior
For example:
```ruby
@post = Post.first
expected_result_count = @post.comments.count
thread_count = @post.class.connection_pool.size-1

1_000.times { |i|
  @post.association(:comments).reset
  thread_count.times.map { |j|
    Thread.new {
      begin
        actual_count = @post.comments.load.size
        if actual_count != expected_result_count
          STDOUT.puts ""Thread ##{j}[#{i}]: Expected #{expected_result_count}, found #{actual_count}""
        end
      rescue => e
        STDOUT.puts ""Thread ##{j}[#{i}]: Caught exception #{e}""
      end
    }
  }.each(&:join)
}
```

Output of an example run on my hardware, using 50 threads with 1K iterations — 14 of the 50K loads returned inconsistent data or errors:
```
Thread #5[246]: Caught exception undefined method `persisted?' for nil:NilClass
Thread #20[246]: Caught exception undefined method `persisted?' for nil:NilClass
Thread #29[246]: Caught exception undefined method `persisted?' for nil:NilClass
Thread #40[246]: Caught exception undefined method `persisted?' for nil:NilClass
Thread #41[246]: Caught exception undefined method `persisted?' for nil:NilClass
Thread #36[246]: Caught exception undefined method `persisted?' for nil:NilClass
Thread #49[246]: Caught exception undefined method `persisted?' for nil:NilClass
Thread #45[268]: Expected 500, found 468
Thread #42[268]: Expected 500, found 468
Thread #39[268]: Expected 500, found 468
Thread #49[268]: Expected 500, found 468
Thread #46[495]: Expected 500, found 469
Thread #46[533]: Expected 500, found 454
Thread #47[810]: Caught exception undefined method `persisted?' for nil:NilClass
```

### System configuration
**Rails version**: 6.1, 7.0
**Ruby version**: 3.0, 3.2
",mullican,User,2,activerecord,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/48647,15172605,48647,Fix has_many_inversing records with same references,open,1,2023-07-04 14:08:03+00:00,2023-07-31 14:10:06+00:00,,"### Motivation / Background

Resolves #47559

Properly handle an intermediate model with has_many_inversing when creating two records with the same references.

- Prevents database error when references have a NOT NULL constraint
- When NULLS are permitted avoid an extra UPDATE statement by inserting the correct values from the outset

### Detail

```rb
ActiveRecord::Base.has_many_inversing = true

class Comment < ActiveRecord::Base
  belongs_to :post, inverse_of: :comments
  belongs_to :author, inverse_of: :comments
end

class Post < ActiveRecord::Base
  has_many :comments
end

class Author < ActiveRecord::Base
  has_many :comments
end

post = Post.new
author = Author.new
post.comments.build(author: author)
post.comments.build(author: author)
post.save!
```

Before:
```sql
BEGIN
  INSERT INTO ""posts"" DEFAULT VALUES RETURNING ""id""
  INSERT INTO ""authors"" DEFAULT VALUES RETURNING ""id""
  INSERT INTO ""comments"" (""post_id"", ""author_id"") VALUES ($1, $2) RETURNING ""id""  [[""post_id"", 1], [""author_id"", 1]]
  -- Error if NOT NULL constraint on post_id
  INSERT INTO ""comments"" (""author_id"") VALUES ($1) RETURNING ""id""  [[""author_id"", 1]]
  UPDATE ""comments"" SET ""post_id"" = $1 WHERE ""comments"".""id"" = $2  [[""post_id"", 1], [""id"", 2]]
COMMIT
```

After:
```sql
BEGIN
  INSERT INTO ""posts"" DEFAULT VALUES RETURNING ""id""
  INSERT INTO ""authors"" DEFAULT VALUES RETURNING ""id""
  INSERT INTO ""comments"" (""post_id"", ""author_id"") VALUES ($1, $2) RETURNING ""id""  [[""post_id"", 1], [""author_id"", 1]]
  INSERT INTO ""comments"" (""post_id"", ""author_id"") VALUES ($1, $2) RETURNING ""id""  [[""post_id"", 1], [""author_id"", 1]]
COMMIT
```

`insert_record` within `save_collection_association` will trigger a recursive call. By fully processing `set_inverse_instance` for each layer we ensure associations are up to date before `INSERT INTO comments` statements are sent to the database.


### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",abaldwin88,User,1,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48640,9624059,48640,fix: Raise an exception on `has_one` failed to autosave,open,6,2023-07-03 17:12:25+00:00,2023-08-08 13:41:27+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

Fixes https://github.com/rails/rails/issues/36833
Fixes https://github.com/rails/rails/issues/48633

Previously, failure to autosave a `has_one` association returned `nil` instead of raising an exception.

```ruby
class Supplier < ActiveRecord::Base
  has_one :account, autosave: true
end

class Account < ActiveRecord::Base
  before_save { throw(:abort) }
end

supplier = Supplier.new
supplier.build_account
supplier.save! # => nil
```

But it's counter-intuitive for `save!` to fail without raising an exception.

### Detail

This pull request changes the `save_has_one_association` to raise `ActiveRecord::RecordInvalid` instead of `ActiveRecord::Rollback`. This allows it to raise an exception if it fails to autosave the `has_one` association with `save!`.

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

This pull request is very similar to [the pull request for `has_many` association](https://github.com/rails/rails/pull/36210).

Also, it seems that the reason why `ActiveRecord::Rollback` was raised was to return `false` while rolling back with `save`, but there is also no problem with `ActiveRecord::RecordInvalid`.
https://github.com/rails/rails/commit/f2aacd51405724cdf7cfd36a439c9dbfce16973a

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",wata727,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48633,9624059,48633,Throwing abort on an autosaved `has_one` association does not raise an exception,open,1,2023-07-03 10:16:56+00:00,2023-07-05 04:06:07+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""7.0.6""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :suppliers, force: true do |t|
  end
  create_table :accounts, force: true do |t|
    t.integer :supplier_id
  end
end

class Supplier < ActiveRecord::Base
  has_one :account, autosave: true
end

class Account < ActiveRecord::Base
  before_save { throw(:abort) }
end

class BugTest < Minitest::Test
  def test_has_one
    supplier = Supplier.new
    supplier.build_account
    assert_raises(ActiveRecord::RecordNotSaved) { supplier.save! }

    assert_equal 0, Supplier.count
    assert_equal 0, Account.count
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->

The tests should pass without errors.

### Actual behavior
<!-- Tell us what happens instead -->

`ActiveRecord::RecordNotSaved` is not raised.

```
# Running:

Finished in 0.004507s, 221.8771 runs/s, 221.8771 assertions/s.

  1) Failure:
BugTest#test_has_one [has_one_abort_autosave.rb:43]:
ActiveRecord::RecordNotSaved expected but nothing was raised.

1 runs, 1 assertions, 1 failures, 0 errors, 0 skips
```

### Detailed description

When I first encountered this issue, I wasn't sure if this was a bug or intended behavior. So, I investigated the behavior of `has_many`, `has_one`, `belongs_to`. Below is the test:

<details>

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""7.0.6""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end
  create_table :comments, force: true do |t|
    t.integer :post_id
    t.text :content
  end

  create_table :suppliers, force: true do |t|
  end
  create_table :accounts, force: true do |t|
    t.integer :supplier_id
    t.string :name
  end

  create_table :books, force: true do |t|
    t.integer :author_id
  end
  create_table :authors, force: true do |t|
    t.string :name
  end
end

class Post < ActiveRecord::Base
  has_many :comments
  has_many :autosave_comments, class_name: 'Comment', autosave: true
  has_many :abort_comments
  has_many :abort_autosave_comments, class_name: 'AbortComment', autosave: true
  has_many :invalid_comments
  has_many :invalid_autosave_comments, class_name: 'InvalidComment', autosave: true
end

class Comment < ActiveRecord::Base; end
class AbortComment < Comment
  before_save { throw(:abort) }
end
class InvalidComment < Comment
  validates :content, presence: true
end

class Supplier < ActiveRecord::Base
  has_one :account
  has_one :autosave_account, class_name: 'Account', autosave: true
  has_one :abort_account
  has_one :abort_autosave_account, class_name: 'AbortAccount', autosave: true
  has_one :invalid_account
  has_one :invalid_autosave_account, class_name: 'InvalidAccount', autosave: true
end

class Account < ActiveRecord::Base; end
class AbortAccount < Account
  before_save { throw(:abort) }
end
class InvalidAccount < Account
  validates :name, presence: true
end

class Book < ActiveRecord::Base
  belongs_to :author
  belongs_to :autosave_author, class_name: 'Author', foreign_key: 'author_id', autosave: true
  belongs_to :abort_author, foreign_key: 'author_id'
  belongs_to :abort_autosave_author, class_name: 'AbortAuthor', foreign_key: 'author_id', autosave: true
  belongs_to :invalid_author, foreign_key: 'author_id'
  belongs_to :invalid_autosave_author, class_name: 'InvalidAuthor', foreign_key: 'author_id', autosave: true
end

class Author < ActiveRecord::Base; end
class AbortAuthor < Author
  before_save { throw(:abort) }
end
class InvalidAuthor < Author
  validates :name, presence: true
end

class BugTest < Minitest::Test
  def teardown
    Post.delete_all
    Comment.delete_all
    Supplier.delete_all
    Account.delete_all
    Book.delete_all
    Author.delete_all
  end

  def test_has_many
    post = Post.new
    post.comments.build
    assert post.save!

    assert_equal 1, Post.count
    assert_equal 1, Comment.count
  end

  def test_has_many_autosave
    post = Post.new
    post.autosave_comments.build
    assert post.save!

    assert_equal 1, Post.count
    assert_equal 1, Comment.count
  end

  def test_has_many_abort
    post = Post.new
    post.abort_comments.build
    assert_raises(ActiveRecord::RecordInvalid) { post.save!}

    assert_equal 0, Post.count
    assert_equal 0, Comment.count
  end

  def test_has_many_abort_autosave
    post = Post.new
    post.abort_autosave_comments.build
    assert_raises(ActiveRecord::RecordInvalid) { post.save!}

    assert_equal 0, Post.count
    assert_equal 0, Comment.count
  end

  def test_has_many_invalid
    post = Post.new
    post.invalid_comments.build
    assert_raises(ActiveRecord::RecordInvalid) { post.save!}

    assert_equal 0, Post.count
    assert_equal 0, Comment.count
  end

  def test_has_many_invalid_autosave
    post = Post.new
    post.invalid_autosave_comments.build
    assert_raises(ActiveRecord::RecordInvalid) { post.save!}

    assert_equal 0, Post.count
    assert_equal 0, Comment.count
  end

  def test_has_one
    supplier = Supplier.new
    supplier.build_account
    assert supplier.save!

    assert_equal 1, Supplier.count
    assert_equal 1, Account.count
  end

  def test_has_one_autosave
    supplier = Supplier.new
    supplier.build_autosave_account
    assert supplier.save!

    assert_equal 1, Supplier.count
    assert_equal 1, Account.count
  end

  def test_has_one_abort
    supplier = Supplier.new
    supplier.build_abort_account
    assert supplier.save!

    assert_equal 1, Supplier.count
    assert_equal 0, Account.count
  end

  def test_has_one_abort_autosave
    supplier = Supplier.new
    supplier.build_abort_autosave_account
    assert_raises(ActiveRecord::RecordNotSaved) { supplier.save! }

    assert_equal 0, Supplier.count
    assert_equal 0, Account.count
  end

  def test_has_one_invalid
    supplier = Supplier.new
    supplier.build_invalid_account
    assert supplier.save!

    assert_equal 1, Supplier.count
    assert_equal 0, Account.count
  end

  def test_has_one_invalid_autosave
    supplier = Supplier.new
    supplier.build_invalid_autosave_account
    assert_raises(ActiveRecord::RecordInvalid) { supplier.save! }

    assert_equal 0, Supplier.count
    assert_equal 0, Account.count
  end

  def test_belongs_to
    book = Book.new
    book.build_author
    assert book.save!

    assert_equal 1, Book.count
    assert_equal 1, Author.count
  end

  def test_belongs_to_autosave
    book = Book.new
    book.build_autosave_author
    assert book.save!

    assert_equal 1, Book.count
    assert_equal 1, Author.count
  end

  def test_belongs_to_abort
    book = Book.new
    book.build_abort_author
    assert book.save!

    assert_equal 1, Book.count
    assert_equal 0, Author.count
  end

  def test_belongs_to_abort_autosave
    book = Book.new
    book.build_abort_autosave_author
    assert_raises(ActiveRecord::RecordNotSaved) { book.save! }

    assert_equal 0, Book.count
    assert_equal 0, Author.count
  end

  def test_belongs_to_invalid
    book = Book.new
    book.build_invalid_author
    assert book.save!

    assert_equal 1, Book.count
    assert_equal 0, Author.count
  end

  def test_belongs_to_invalid_autosave
    book = Book.new
    book.build_invalid_autosave_author
    assert_raises(ActiveRecord::RecordInvalid) { book.save! }

    assert_equal 0, Book.count
    assert_equal 0, Author.count
  end
end
```

</details>

This test describes the consistent behavior of each association, but when I run it the test fails only in the case of `has_one` + abort + autosave:

```
Finished in 0.073115s, 246.1875 runs/s, 711.2084 assertions/s.

  1) Failure:
BugTest#test_has_one_abort_autosave [test.rb:191]:
ActiveRecord::RecordNotSaved expected but nothing was raised.

18 runs, 52 assertions, 1 failures, 0 errors, 0 skips
```

Also, in Active Record's documentation on callbacks, you'll find something like this:

> If a before_* callback cancels the action a ROLLBACK is issued. You can also trigger a ROLLBACK raising an exception in any of the callbacks, including after_* hooks. Note, however, that in that case the client needs to be aware of it because an ordinary [#save](https://api.rubyonrails.org/classes/ActiveRecord/Persistence.html#method-i-save) will raise such exception instead of quietly returning false.

https://github.com/rails/rails/blob/v7.0.6/activerecord/lib/active_record/callbacks.rb#L268-L272

The current behavior of `has_one` seems to contradict this explanation.

Note that this behavior has been around for a long time and is not a regression. As far as I can see, https://github.com/rails/rails/issues/22184 mentions the same issue.

A possible fix would be to `throw(:abort)` if `save_has_one_association` returns `false`, as with `belongs_to`, but we need to investigate whether it works correctly under multiple conditions.
https://github.com/rails/rails/blob/v7.0.6/activerecord/lib/active_record/autosave_association.rb#L198
https://github.com/rails/rails/blob/v7.0.6/activerecord/lib/active_record/autosave_association.rb#L210

### System configuration
**Rails version**:
```
7.0.6
```

**Ruby version**:
```
ruby 3.0.6p216 (2023-03-30 revision 23a532679b) [arm64-darwin22]
```",wata727,User,0,activerecord,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/48628,15172605,48628,PostgreSQL reload virtual columns on update via RETURNING clause,open,4,2023-07-02 11:30:36+00:00,2023-09-19 18:18:05+00:00,,"Extends Active Record to automatically reload virtual columns on update when using PostgreSQL. This is done by issuing a single UPDATE query that includes a RETURNING clause.

### Motivation

Saves an extra round trip to the database for reload and removes a developer pitfall around stale values.

### Detail

Given a `Post` model represented by the following schema:
```ruby
create_table :posts do |t|
  t.integer :upvotes_count
  t.integer :downvotes_count
  t.virtual :total_votes_count, type: :integer, as: ""upvotes_count + downvotes_count"", stored: true
end
```
`total_votes_count` will reflect the sum of upvotes and downvotes after `update` is successfully called. Prior to this change calling `reload` would have been necessary to obtain the value calculated by the database.
```ruby
post = Post.find(1)
post.update(upvotes_count: 2, downvotes_count: 2)
# Calling `post.reload` no longer necessary
post.total_votes => 4
```

* At this moment MySQL and SQLite adapters do not support this behavior

### Additional information

* Follow-up from PR #48241
* Related to PR #48434
* Closes #48423 when using Postgresql

CC: @nvasilevski

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.

",abaldwin88,User,9,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48619,18253416,48619,Add attributes_with_aliases and attribute_names_with_aliases,open,0,2023-06-30 21:34:32+00:00,2023-07-01 03:21:54+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created because get attributes with aliases.

For more information, please check here.
https://discuss.rubyonrails.org/t/i-would-like-an-idea-to-create-an-issue-about-add-alias-attribute-to-method-attributes/82793

### Detail

This Pull Request changes ActiveModel and ActiveRecord

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

```
% cd activemodel
% bin/test test/cases/attributes_test.rb 
Run options: --seed 887

# Running:

................

Finished in 0.009967s, 1605.2975 runs/s, 3411.2571 assertions/s.
16 runs, 34 assertions, 0 failures, 0 errors, 0 skips
```

```
% cd activerecord
% bin/test test/cases/attribute_methods_test.rb
Using sqlite3
Run options: --seed 19232

# Running:

................................................................................................................

Finished in 0.629886s, 177.8100 runs/s, 779.5061 assertions/s.
112 runs, 491 assertions, 0 failures, 0 errors, 0 skips
```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",kawamotosatoshi,User,0,activemodel,activerecord,,,,,,,
https://api.github.com/repos/rails/rails/issues/48601,91827,48601,Test Fixture Not Decrypting Properly with store_accessor,open,3,2023-06-28 16:07:31+00:00,2023-09-29 20:29:14+00:00,,"### Steps to reproduce
1. Create new rails app with postgresql as db
2. Add jsonb field to model via migration with name `settings`
3. Add store_accessor to model
4. encrypt store_accessor field with `encrypts` 
5. Add encryption keys to envs as per [docs](https://guides.rubyonrails.org/active_record_encryption.html#setup)
6. Add `config.active_record.encryption.encrypt_fixtures = true` to `test.rb`
7. Add data to test fixture (posts.yml) with the field that needs to be encrypted
8. Write test to obtain test fixture and ensure it is being encrypted/decrypted properly
9. Test fails with `Minitest::UnexpectedError: ActiveRecord::Encryption::Errors::Decryption: ActiveRecord::Encryption::Errors::Decryption`

### Executable Test Case
You will also need a value in the `posts.yml` file as such: 
```yml
one:
  name: Hello World
  settings:
    public_key: ""some-fake-public-key""
```

Test Case
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.0.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""postgresql"", database: ""jsonb-test"")
ActiveRecord::Base.logger = Logger.new(STDOUT)
ActiveRecord::Encryption.configure \
      primary_key: ""nYlllafgBdhQ7Vn37dlWAoqfDbTPl4Fl"",
      deterministic_key: ""CK7x2oUEeu06bKehhKGiKYAHoytPaOPg"",
      key_derivation_salt: ""Fol1dR03ZXnL8k4hEUYj7IMr0UlgOMHC""

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.jsonb :settings
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
  end
end

class Post < ActiveRecord::Base
  has_many :comments

  store_accessor :settings, [:public_key], suffix: :setting
  encrypts :settings
end

class Comment < ActiveRecord::Base
  belongs_to :post
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = posts(:one)
    assert_equal ""some-fake-public-key"", post.public_key_setting
  end
end

```

### Expected behavior
The test should be able to store the value for the fixture, encrypted and then it should be able to retrieve it and decrypt it.

### Actual behavior
Test fails with error: `Minitest::UnexpectedError: ActiveRecord::Encryption::Errors::Decryption: ActiveRecord::Encryption::Errors::Decryption`

### System configuration
**Rails version**: 7.0.5.1

**Ruby version**: 3.2.2
",donnfelker,User,4,activerecord,With reproduction steps,encryption,,,,,,
https://api.github.com/repos/rails/rails/issues/48591,259568,48591,Add support for :prefix option in relations.,open,6,2023-06-27 12:00:28+00:00,2024-01-30 12:17:33+00:00,,"### Motivation / Background

Our application is multi-tenant and storing files in S3 was an organizational issue due to ActiveStorage storing the files at the root level in a flat structure. Instead we would like some semantic structure, for example we would like to have all files related  to active storage to be in the active_storage top folder, and then for each tenant our of application we will further namespace. Example of the intended structure:

S3/active_storage/tenant_id/some_file_uid
S3/active_storage/tenant_id/some_file_uid

This Pull Request has been created in order to support this kind of structure.

Allows for configuring a custom prefix for Blob keys.

```
    Rails.application.configure do
      config.active_storage.blob_prefix = 'active_storage'
    end
```

This will store Blobs in a path like active_storage/<random_key>. You may also configure an additional level of prefix on each relation.

```
    class User < ActiveRecord::Base
      has_one_attached :avatar, prefix: 'avatars'
    end
```

This will store Blobs in a path like active_storage/avatars/<random_key>. Or even generate it using information on the record:

```
    class User < ActiveRecord::Base
      belongs_to :tenant
      has_one_attached :avatar, prefix: -> (record, attachment) { record.tenant.name }
    end
```

This will store Blobs in a path like active_storage/account_1/<random_key>

### Detail

This Pull Request changes to Active Storage. Particularly it makes the association macros determine the blob id, if given the option `:prefix`.

### Additional information

We are using this in production right now. Working fine so far. We do not use direct upload. Unsure if this may affect it.

Other people interested in this sort of functionality:
* https://github.com/rails/rails/issues/38161
* https://github.com/rails/rails/issues/32790

### Checklist

Before submitting the PR make sure the following are checked:

* [X] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [X] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [X] Tests are added or updated if you fix a bug or add a feature.
* [X] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",Nerian,User,17,activestorage,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48585,509837,48585,Active Job: Correctly use the desired test adapter in tests,open,2,2023-06-27 01:01:04+00:00,2024-01-14 01:49:31+00:00,,"### Motivation / Background

Currently if you set `config.active_job.queue_adapter = (anything)` in `config/application.rb` or `config/environments/test.rb`, this config will be respected by some test cases but not others.

Specifically, in `ActionDispatch::IntegrationTest`, `ActionMailer::TestCase`, and `ActiveJob::TestCase`, the test adapter will still be `TestAdapter`, while in other test cases it will be `InlineAdapter`.

I think you'd expect that if you set the test adapter for an environment, that test adapter would be available everywhere in that environment. For example, you might want to use the Delayed Job test adapter in your test environment so that you can have your test code more closely match production. The feedback on https://github.com/rails/rails/issues/37270 echoes this, but the workaround suggested there of disabling the test adapter on specific klasses is not reliable.

### Detail

The logic to determine which queue adapter a job uses is quite confusing.

Here is how it works on `main` currently:

1. If running in a test, and the test class includes `ActiveJob::TestHelper` and overrides `queue_adapter_for_test`, then the `queue_adapter_for_test` adapter is used.
2. Otherwise, if running in a test, and the test class includes `ActiveJob::TestHelper`, then the `:test` adapter is used.
3. Otherwise, if `self.queue_adapter` is set on the job class, that adapter is used.
4. Otherwise, if `self.queue_adapter` is set on the job's superclass (eg. `ApplicationJob`), that adapter is used. 
5. Fall back to `Rails.application.config.active_job.queue_adapter` as configured by the user.
6. If not configured by the user, `Rails.application.config.active_job.queue_adapter` defaults to `:async`.
7. Fall back to `:async` if no Rails config set (eg. using Active Job as a standalone).

As noted above, only some of the built in test classes include `ActiveJob::TestHelper`. Also, setting a queue adapter on a specific job class is rare (typically you would not want different jobs to be performed by different backends). So in practice, in development/production, option 5 is used. And in test, options 2 and 5 are used, depending on the type of test.

This PR changes the logic to work as follows:

1. If `self.queue_adapter` is set on the job class, that adapter is used.
2. Otherwise, if `self.queue_adapter` is set on the job's superclass (eg. `ApplicationJob`), that adapter is used. 
3. If running in a test, and the test class includes `ActiveJob::TestHelper` and overrides `queue_adapter_for_test`, then the `queue_adapter_for_test` adapter is used.
4. Fall back to `Rails.application.config.active_job.queue_adapter` as configured by the user.
5. If not configured by the user, `Rails.application.config.active_job.queue_adapter` defaults to `:test` if `Rails.env.test?`, otherwise it defaults to `:async`.
6. If running in a test, and the test class includes `ActiveJob::TestHelper`, and no other adapter has been set (eg. using Active Job as a standalone), then use `:test`.
7. Otherwise, fall back to `:async`.

The key changes are:

- Now, if you set a `queue_adapter` on a job class, that will always be respected.
- The `queue_adapter_for_test` override still works, but it no longer takes priority over a queue adapter set on a specific job class. Since I think both of these techniques are rare, and the impact of this change only exists in a test environment, I think it is a relatively safe change.
- The default queue adapter in Rails config is now env-dependent. (It's `:test` in the `test` environment, and `:async` in all others.)

The default rails environment templates suggest [setting a specific queue adapter only in production](https://github.com/rails/rails/blob/f46d3452ae30c46d3e213c687decbbca0cee9119/railties/lib/rails/generators/rails/app/templates/config/environments/production.rb.tt#L79C12-L79C12). For users who do that, there will be no changes to behaviour with this PR.

For users who are more granular, by setting per-job queue adapters, things should continue to work as expected with this PR.

**The real change is for users who set a default queue adapter across all environments (as in this issue: https://github.com/rails/rails/issues/37270). For them, this PR solves the issue where some tests use the desired queue adapter, and other tests don't.**

### Additional information

Fixes: https://github.com/rails/rails/issues/37270

ref: https://github.com/bensheldon/good_job/issues/846
ref: https://github.com/rails/rails/issues/26360 - this PR changes the behavior here, which I think was overzealous.

I extracted out some other PRs to fix internal issues while working on this: https://github.com/rails/rails/pull/48623, https://github.com/rails/rails/pull/48626. I also extracted https://github.com/rails/rails/pull/48599 out as a non-controversial fix prior to this PR.



### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",ghiculescu,User,13,railties,docs,activejob,,,,,,
https://api.github.com/repos/rails/rails/issues/48583,3124,48583,Add a rake task for checking various release related utilities,open,0,2023-06-26 22:26:30+00:00,2023-06-27 19:00:05+00:00,,"This commit adds a rake task that checks various utilities are working before releasing Rails.  The problem we're trying to avoid is commands failing halfway through the release (for example maybe you're not logged in to npmjs). The check task is fairly opinionated, it requires that:

* Use a YubiKey for storing OTPs
  * The `ykman` utility is installed
  * The OTP name for RubyGems has `rubygems.org` in the name
  * The OTP name for NPM has `npmjs.com` in the name
* You are logged in to RubyGems
* You are logged in to npmjs
* You are logged in to the `gh` utility

If the task fails, then no gems will be pushed and it gives you an opportunity to fix your environment.  Basically I want to automate [this section](https://github.com/rails/rails/blob/main/RELEASING_RAILS.md#check-credentials-for-rubygems-npm-and-github) in our release documentation.

See [this blog post](https://tenderlovemaking.com/2021/10/26/publishing-gems-with-your-yubikey.html) for configuring your YubiKey.",tenderlove,User,0,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48582,522155,48582,Introduce ActiveRecord::Base#preload on a record,open,5,2023-06-26 21:32:12+00:00,2023-06-27 22:32:32+00:00,,"Sometimes you might want to `preload` relations for a record that has already been loaded.
If you were to do it today, you'd either have to use private API (`ActiveRecord::Associations::Preloader`) or do something like

```
def method_that_wants_to_preload_and_receives_record(user)
  user = User.preload(:address, friends: [:address, :followers]).find(user.id)
end
```

However, that seems ugly and may result to unnecessary (but probably cached) query on `users` to find a record by a primary key.

It seems like an simple addition to introduce `preload` on a record that has already been loaded. That's what this PR does.",kirs,User,5,activerecord,needs work,,,,,,,
https://api.github.com/repos/rails/rails/issues/48569,287640,48569,Update datetime_local_field.rb,open,2,2023-06-24 12:56:20+00:00,2023-07-06 03:03:24+00:00,,"Defaulted datetime-local to not use seconds


### Motivation / Background

Input of `datetime-local` specifies that the [value must be excluding seconds](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/datetime-local#value).  Although Chrome supports seconds, safari will validate client-side that the value is `not valid` and the form will not be submittable.



This Pull Request has been created because the default for rails should not error out in a popular browser.

### Detail

This Pull Request changes the default for `datetime-local` value conversion

### Additional information

<img width=""770"" alt=""Screenshot 2023-06-24 at 6 54 09 AM"" src=""https://github.com/rails/rails/assets/287640/917cf010-82fb-4f95-a2fc-54b85f6ab193"">

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",chaffeqa,User,0,actionview,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48568,1097697,48568,Use `~=` instead of `IS NOT DISTINCT FROM` for the PostgreSQL geometric data types,open,0,2023-06-24 04:24:06+00:00,2023-09-17 14:36:37+00:00,,"### Motivation / Background

The `~=` operator is available for 4 types point, box, polygon, circle, which represents the usual notion of equality. (other geometric data types, which are line, lseg, path, still work with `IS NOT DISTINCT FROM` / = operator)

A typical example of how `~=` works is: box '((3,4),(5,5))' ~=  box '((3,4),(5,5))' -> t; box '((3,4),(5,5))' ~=  box '((5,5),(3,4))' -> t 
Ref https://www.postgresql.org/docs/15/functions-geometry.html

<img width=""1292"" alt=""Screenshot 2023-06-24 at 16 09 58"" src=""https://github.com/rails/rails/assets/1097697/0dd4b8c9-5096-4b5b-bcf8-8d726f09cafb"">


Fixes #48497

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",thukim,User,1,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48562,15172605,48562,[Fix #46653] `becomes` losing target class default value,open,0,2023-06-22 21:07:04+00:00,2023-06-22 21:38:22+00:00,,"### Motivation / Background

Fixes #46653

### Detail

`becomes` is coping the `@attributes` from the original instance but the defaults are not being applied from the target class during initialization. Following the comments from the linked issue this PR will apply the default value if an attribute is nil and hasn't been changed.

",abaldwin88,User,0,activemodel,activerecord,,,,,,,
https://api.github.com/repos/rails/rails/issues/48549,76848245,48549,Qualify association unscope values with table names,open,0,2023-06-21 16:24:58+00:00,2023-08-13 22:48:38+00:00,,"### Motivation

Fixes #48548 

### Checklist
Before submitting the PR make sure the following are checked:

- [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
- [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: [Fix #issue-number]
- [x] Tests are added or updated if you fix a bug or add a feature.
- [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",philip-maina,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48548,76848245,48548,`unscope` on `through` associations fails to respect default scope of join models,open,0,2023-06-21 16:24:31+00:00,2023-06-30 07:56:23+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
Reproduction script:
<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :users, force: true do |t|
  end

  create_table :posts, force: true do |t|
    t.integer :user_id
    t.datetime :deleted_at
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
    t.datetime :deleted_at
  end
end

class User < ActiveRecord::Base
  has_many :posts
  has_many :comments, through: :posts
end

class Post < ActiveRecord::Base
  default_scope -> { where deleted_at: nil }

  belongs_to :user
  has_many :comments, -> { with_deleted }
end

class Comment < ActiveRecord::Base
  default_scope -> { where deleted_at: nil }
  scope :with_deleted, -> { unscope where: :deleted_at }

  belongs_to :post
end

class BugTest < Minitest::Test
  def test_unscope_applied_on_correct_association
    user = User.create!

    active_post  = Post.create!(user: user)
    deleted_post = Post.create!(user: user, deleted_at: Time.now)


    active_post_active_comment   = Comment.create!(post: active_post)
    active_post_deleted_comment  = Comment.create!(post: active_post, deleted_at: Time.now)
    deleted_post_deleted_comment = Comment.create!(post: deleted_post, deleted_at: Time.now)

    # Should find only 2 comments (active_post_active_comment & active_post_deleted_comment) but finds all three
    assert_equal 2, user.comments.count
  end
end

```

### Expected behavior
The test should pass and return a count of 2

### Actual behavior
The test fails with a count of 3

### System configuration
**Rails version**: 7.0.4.3 / main

**Ruby version**: 3.1.3 / 3.2.2
",philip-maina,User,0,attached PR,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48541,28561,48541,Add GlobalID to the API docs,open,0,2023-06-21 06:29:25+00:00,2023-10-14 02:17:33+00:00,,"### Motivation / Background

GlobalID is a dependency of Active Job and Action Text. It adds `to_gid` and `to_sgid` methods to Active Model and Active Record classes.

Trying to find the documentation of these methods can be confusing as they are not present in the API docs.

### Detail

By symlinking the globalid gem from the Gemfile we can include it in the API documentation. After the `rdoc` task has run we can remove the symlink. I'd prefer to remove to symlink in an `ensure` block but that doesn't seem to be supported by Rake.

### Additional information

This could also be used to add all the `turbo-rails` methods to the API docs, like ` broadcast_append_to`  and `turbo_stream_from` (that is used in video demo on https://rubyonrails.org/.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",p8,User,1,railties,docs,,,,,,,
https://api.github.com/repos/rails/rails/issues/48540,100725,48540,Added Dockerfile instructions to remove artifacts and node_modules,open,8,2023-06-21 06:16:44+00:00,2023-10-09 10:38:41+00:00,,"### Motivation / Background

I've tested Rails 7.1 Dockerfile template in Rails 7.0 app with MRSK on GitHub Actions and found that a bit more optimization can be applied.

### Detail

This Pull Request adds minor optimization to dockerignore template.

During the build process, the setup-ruby@v1 GitHub Action leaves artifacts in the ~/vendor/bundle folder, resulting in two full bundles in the final build: one in the default /usr/local/bundle directory specified in the Dockerfile template, and another in the /rails/vendor/bundle directory. By ignoring the /rails/vendor/bundle directory, we can significantly reduce the size of the final image. 

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",igor-alexandrov,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48538,2651240,48538,Support queries with regular expressions,open,0,2023-06-21 03:57:38+00:00,2023-06-22 06:37:41+00:00,,"### Motivation / Background

Support queries with regular expressions on supported databases. (PostgreSQL/MySQL/SQLite)

```ruby
Post.where(title: /ThInKiNg/)
#=> SELECT * FROM posts WHERE title REGEXP 'ThInKiNg'; --MySQL/SQLite
#=> SELECT * FROM posts WHERE title ~* 'ThInKiNg'; --PostgreSQL

Post.where.not(title: /ThInKiNg/)
#=> SELECT * FROM posts WHERE title NOT REGEXP 'ThInKiNg'; --MySQL/SQLite
#=> SELECT * FROM posts WHERE title !~* 'ThInKiNg'; --PostgreSQL    
```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",lazaronixon,User,3,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48531,2651240,48531,Fix unscope with multiple not conditions,open,0,2023-06-20 15:29:58+00:00,2023-06-21 14:59:52+00:00,,"### Motivation / Background

Fix unscope with multiple not conditions

Before:
```ruby
Post.where.not(body: ""hello"", title: ""sti me"").unscope(where: :title)
#=> SELECT * FROM posts WHERE NOT (body = 'hello' AND title = 'sti me')
```

Later:
```ruby
Post.where.not(body: ""hello"", title: ""sti me"").unscope(where: :title)
#=> SELECT * FROM posts WHERE NOT (body = 'hello')
```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",lazaronixon,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48513,75765648,48513,Allow insert_all/upsert_all to use an array of models,open,2,2023-06-18 13:30:51+00:00,2023-06-22 11:23:06+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background
Currently, insert_all/upsert_all only accept array of hashes, so I want to make it accept array of models as well.
Example:
```
Book.insert_all([
  Book.new(title: ""Rework"", author: ""David""),
  Book.new(title: ""Eloquent Ruby"", author: ""Russ"")
])
```


<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

### Detail

### Additional information

If you do not want timestamp values to be updated automatically, you must set record_timestamps to false.
Example:
```
Book.insert_all([Book.new(title: ""Rework"", author: ""David"")])
Book.last.updated_at = '2023-05-23 20:37:10.97 UTC'

Book.insert_all([Book.new(title: ""Rework"", author: ""David"")], record_timestamps: false)
Book.last.updated_at = nil
```
### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",TakuyaKurimoto,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48510,509837,48510,Allow default CSP setup to work with empty sessions,open,11,2023-06-18 07:50:25+00:00,2024-01-31 16:42:55+00:00,,"### Motivation / Background

Fixes https://github.com/rails/rails/issues/48463

Since https://github.com/rails/rails/pull/43227, the default CSP suggested in the initializer does not work with empty sessions. See [this comment](https://github.com/rails/rails/pull/43227#issuecomment-1191692615) for an example issue and workaround.

### Detail

This PR just adds a fallback in case the session has not been loaded. I also updated the railties test to match the config in the default initializer.
",ghiculescu,User,1,actionpack,railties,,,,,,,
https://api.github.com/repos/rails/rails/issues/48509,54629302,48509,"[Fix #47357] Inconsistent update, delete, reload behaviour with `#scoping` and default scopes",open,1,2023-06-17 14:33:33+00:00,2024-01-12 11:52:04+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created to fix https://github.com/rails/rails/issues/47357.

### Detail

This Pull Request ensures that when using `scoping` on update, delete and reload, scopes are only applied if `all_queries: true` and only default scopes with `all_queries: true` are applied. Because all default scopes are applied initially with the `where` clause when scoping, my approach was to remove the unneeded scopes after the fact in these three scenarios.

Except for the update and delete cases **without** `scoping(all_queries: true)`, all other tests failed initially.

### Additional information

Added @pjambet as a co-author since they thoroughly documented all the expected and actual behaviour and tests.

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",joshuay03,User,1,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48497,10766,48497,Not possible to use upsert_all with point type column,open,2,2023-06-16 09:05:13+00:00,2023-09-14 17:15:49+00:00,,"When using `upsert_all` with a table having column with a type `point` and the `updated_at` timestamp, the error is raised:
```
D, [2023-06-16T10:58:12.115714 #3553784] DEBUG -- :   Location Upsert (0.4ms)  INSERT INTO ""locations"" (""identifier"",""coordinates"",""created_at"",""updated_at"") VALUES ('test', '(1.1,1.2)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP) ON CONFLICT (""identifier"") DO UPDATE SET updated_at=(CASE WHEN (""locations"".""coordinates"" IS NOT DISTINCT FROM excluded.""coordinates"") THEN ""locations"".updated_at ELSE CURRENT_TIMESTAMP END),""coordinates""=excluded.""coordinates"" RETURNING ""id""
E

Error:
BugTest#test_association_stuff:
ActiveRecord::StatementInvalid: PG::UndefinedFunction: ERROR:  operator does not exist: point = point
LINE 1: ... updated_at=(CASE WHEN (""locations"".""coordinates"" IS NOT DIS...
                                                             ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
```

It's possible to workaround the issue by including the ""updated_at"" timestamp manually.

The reproducible script is as follows:
```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""pg""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""postgresql"", database: ""upsert-bug"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :locations, force: true do |t|
    t.string :identifier
    t.point :coordinates
    t.timestamps
    t.index :identifier, unique: true
  end
end

class Location < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_association_stuff
    assert Location.upsert_all([identifier: ""test"", coordinates: [1.1, 1.2], updated_at: Time.current], unique_by: [:identifier]) # Works fine

    assert Location.upsert_all([identifier: ""test"", coordinates: [1.1, 1.2]], unique_by: [:identifier]) # raises
  end
end
```",morgoth,User,1,activerecord,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/48480,2651240,48480,Add unique option to belongs_to association,open,0,2023-06-15 07:00:03+00:00,2023-06-17 19:55:43+00:00,,"Since version 7.0.5 https://github.com/rails/rails/commit/bdbe58b50461dc44c42df4d5427fa78aeb1debcb  we are able to properly keep integrity in `has_one` relationships, so when we create a new record `account.create_client(...)` it will prevent duplication, but we can still bypass it on the other side of the relationship using `Client.create!(..., account: existing_account)`. 

That said I'm proposing to add a new option `unique` to the `belongs_to` method. Here are some advantages of this approach...

- Unique indexes are not required.
- Different from unique indexes we can use it with an optional association.
- Take advantage of the new `belongs_to_required_validates_foreign_key`.
- Validation API, messages, etc...

Before:

```ruby    
class Client
  belongs_to :account; validates_uniqueness_of(:account, allow_nil: true, message: :unique)
end
```

Later:

  ```ruby
class Client
    belongs_to :account, unique: true
end
 ```

### Additional information

https://thoughtbot.com/blog/rails-has-one-limitations

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",lazaronixon,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48468,951433,48468,Test suite hangs after upgrading from 6.1 to 7.0,open,23,2023-06-14 08:26:54+00:00,2024-01-30 02:45:46+00:00,,"### Steps to reproduce

We have a project with a multi-database (2 databases) configuration. 
When executing the test suite like follows the tests hang after some time.

```ruby
PARALLEL_WORKERS=1 bin/rails test
```

As you can see in the sigdump all threads get stuck in `load_interlock_aware_monitor.rb:17:in 'enter' `
I am currently trying to create an example project to reproduce this issue but maybe this info is enough for now to make some conclusions.

```
Sigdump at 2023-06-14 10:11:32 +0200 process 90089 (bin/rails)
  Thread #<Thread:0x00000001023db0f0 run> status=run priority=0
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:52:in `backtrace'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:52:in `dump_backtrace'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:34:in `block in dump_all_thread_backtrace'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:33:in `each'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:33:in `dump_all_thread_backtrace'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:16:in `block in dump'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:136:in `open'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:136:in `_open_dump_path'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:14:in `dump'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:7:in `block in setup'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:17:in `enter'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:17:in `block in mon_enter'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/share_lock.rb:187:in `yield_shares'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/dependencies/interlock.rb:41:in `permit_concurrent_loads'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:17:in `mon_enter'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:22:in `block in synchronize'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `handle_interrupt'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `synchronize'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/query_cache.rb:91:in `clear_query_cache'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_handling.rb:343:in `block in clear_on_handler'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_handling.rb:342:in `each'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_handling.rb:342:in `clear_on_handler'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_handling.rb:272:in `clear_query_caches_for_current_thread'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/query_cache.rb:21:in `insert'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/persistence.rb:496:in `_insert_record'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/persistence.rb:1096:in `_create_record'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/counter_cache.rb:166:in `_create_record'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/locking/optimistic.rb:79:in `_create_record'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/attribute_methods/dirty.rb:222:in `_create_record'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/callbacks.rb:459:in `block in _create_record'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:107:in `run_callbacks'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:929:in `_run_create_callbacks'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/callbacks.rb:459:in `_create_record'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/timestamp.rb:108:in `_create_record'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/bullet-7.0.7/lib/bullet/active_record70.rb:6:in `_create_record'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/persistence.rb:1067:in `create_or_update'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/callbacks.rb:455:in `block in create_or_update'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:118:in `block in run_callbacks'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/autosave_association.rb:370:in `around_save_collection_association'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:127:in `block in run_callbacks'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:138:in `run_callbacks'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:929:in `_run_save_callbacks'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/callbacks.rb:455:in `create_or_update'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/timestamp.rb:126:in `create_or_update'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/persistence.rb:648:in `save!'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/validations.rb:53:in `save!'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/transactions.rb:302:in `block in save!'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/transactions.rb:354:in `block in with_transaction_returning_status'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/transaction.rb:319:in `block in within_new_transaction'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:25:in `handle_interrupt'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:25:in `block in synchronize'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `handle_interrupt'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `synchronize'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/transaction.rb:317:in `within_new_transaction'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:316:in `transaction'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/transactions.rb:350:in `with_transaction_returning_status'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/transactions.rb:302:in `save!'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/suppressor.rb:54:in `save!'
      /Users/krebbl/Projects/ProCarement/care-center/app/models/medical_report.rb:121:in `save_report_as_document'
      /Users/krebbl/Projects/ProCarement/care-center/test/models/medical_report_test.rb:167:in `block (3 levels) in <class:MedicalReportTest>'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/testing/assertions.rb:34:in `assert_nothing_raised'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/testing/assertions.rb:250:in `_assert_nothing_raised_or_warn'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/testing/assertions.rb:102:in `assert_difference'
      /Users/krebbl/Projects/ProCarement/care-center/test/models/medical_report_test.rb:165:in `block (2 levels) in <class:MedicalReportTest>'
      /Users/krebbl/Projects/ProCarement/care-center/test/models/medical_report_test.rb:172:in `instance_exec'
      /Users/krebbl/Projects/ProCarement/care-center/test/models/medical_report_test.rb:172:in `block in create_test_from_should_hash'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/test.rb:102:in `block (3 levels) in run'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/test.rb:199:in `capture_exceptions'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/test.rb:97:in `block (2 levels) in run'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:296:in `time_it'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/test.rb:96:in `block in run'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:391:in `on_signal'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/test.rb:247:in `with_info_handler'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/test.rb:95:in `run'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-reporters-1.4.3/lib/minitest/reporters.rb:48:in `run_with_hooks'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:1051:in `run_one_method'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:365:in `run_one_method'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:352:in `block (2 levels) in run'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:351:in `each'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:351:in `block in run'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:391:in `on_signal'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:378:in `with_info_handler'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:350:in `run'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/railties-7.0.5/lib/rails/test_unit/line_filtering.rb:10:in `run'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:182:in `block in __run'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:182:in `map'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:182:in `__run'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:159:in `run'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:83:in `block in autorun'
  Thread #<Thread:0x0000000109047888 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/connection_pool/reaper.rb:40 sleep> status=sleep priority=0
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/connection_pool/reaper.rb:46:in `sleep'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/connection_pool/reaper.rb:46:in `block in spawn_thread'
  Thread #<Thread:0x0000000109443018@Timeout stdlib thread /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/timeout-0.3.2/lib/timeout.rb:101 sleep> status=sleep priority=0
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/timeout-0.3.2/lib/timeout.rb:113:in `sleep'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/timeout-0.3.2/lib/timeout.rb:113:in `wait'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/timeout-0.3.2/lib/timeout.rb:113:in `block (2 levels) in create_timeout_thread'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/timeout-0.3.2/lib/timeout.rb:111:in `synchronize'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/timeout-0.3.2/lib/timeout.rb:111:in `block in create_timeout_thread'
  Thread #<Thread:0x000000010c94b918 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:28 sleep_forever> status=sleep priority=0
      <internal:thread_sync>:18:in `pop'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:30:in `block (2 levels) in start'
  Thread #<Thread:0x000000010c94b800 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:28 sleep_forever> status=sleep priority=0
      <internal:thread_sync>:18:in `pop'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:30:in `block (2 levels) in start'
  Thread #<Thread:0x000000010c94b710 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:28 sleep_forever> status=sleep priority=0
      <internal:thread_sync>:18:in `pop'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:30:in `block (2 levels) in start'
  Thread #<Thread:0x000000010c94b620 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:28 sleep_forever> status=sleep priority=0
      <internal:thread_sync>:18:in `pop'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:30:in `block (2 levels) in start'
  Thread #<Thread:0x000000010c94b530 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:28 sleep_forever> status=sleep priority=0
      <internal:thread_sync>:18:in `pop'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:30:in `block (2 levels) in start'
  Thread #<Thread:0x000000010c94b440 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:28 sleep_forever> status=sleep priority=0
      <internal:thread_sync>:18:in `pop'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:30:in `block (2 levels) in start'
  Thread #<Thread:0x000000010c94b350 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:28 sleep_forever> status=sleep priority=0
      <internal:thread_sync>:18:in `pop'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:30:in `block (2 levels) in start'
  Thread #<Thread:0x000000010c94b260 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:28 sleep_forever> status=sleep priority=0
      <internal:thread_sync>:18:in `pop'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:30:in `block (2 levels) in start'
  Thread #<Thread:0x000000010ce4f180@worker-1 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:332 sleep_forever> status=sleep priority=0
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:17:in `enter'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:17:in `block in mon_enter'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/share_lock.rb:187:in `yield_shares'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/dependencies/interlock.rb:41:in `permit_concurrent_loads'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:17:in `mon_enter'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:22:in `block in synchronize'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `handle_interrupt'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `synchronize'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/query_cache.rb:128:in `cache_sql'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/query_cache.rb:107:in `select_all'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/querying.rb:54:in `_query_by_sql'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:942:in `block in exec_main_query'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:962:in `skip_query_cache_if_necessary'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:928:in `exec_main_query'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:914:in `block in exec_queries'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:962:in `skip_query_cache_if_necessary'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:908:in `exec_queries'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:695:in `load'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:250:in `records'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/bullet-7.0.7/lib/bullet/active_record70.rb:46:in `records'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:520:in `find_take'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:98:in `take'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:473:in `find_one'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:457:in `find_with_ids'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:69:in `find'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/querying.rb:22:in `find'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/core.rb:271:in `find'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:129:in `locate'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:154:in `block in locate'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:164:in `block in unscoped'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:881:in `_scoping'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:428:in `scoping'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/scoping/default.rb:43:in `unscoped'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:164:in `unscoped'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:154:in `locate'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:16:in `locate'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:148:in `deserialize_global_id'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:132:in `deserialize_argument'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:43:in `block in deserialize'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:43:in `map'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:43:in `deserialize'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/core.rb:190:in `deserialize_arguments'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/core.rb:180:in `deserialize_arguments_if_needed'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/execution.rb:44:in `perform_now'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/instrumentation.rb:14:in `block in perform_now'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/instrumentation.rb:25:in `block in instrument'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/notifications.rb:206:in `block in instrument'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/notifications/instrumenter.rb:24:in `instrument'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/notifications.rb:206:in `instrument'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/instrumentation.rb:35:in `instrument'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/instrumentation.rb:14:in `perform_now'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/logging.rb:18:in `block in perform_now'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/tagged_logging.rb:99:in `block in tagged'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/tagged_logging.rb:37:in `tagged'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/tagged_logging.rb:99:in `tagged'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/logging.rb:25:in `tag_logger'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/logging.rb:18:in `perform_now'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/execution.rb:24:in `block in execute'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:118:in `block in run_callbacks'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/railtie.rb:54:in `block (4 levels) in <class:Railtie>'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/execution_wrapper.rb:92:in `wrap'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/reloader.rb:72:in `block in wrap'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/execution_wrapper.rb:92:in `wrap'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/reloader.rb:71:in `wrap'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/railtie.rb:53:in `block (3 levels) in <class:Railtie>'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:127:in `instance_exec'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:127:in `block in run_callbacks'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:138:in `run_callbacks'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/execution.rb:22:in `execute'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/queue_adapters/async_adapter.rb:70:in `perform'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:352:in `run_task'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:343:in `block (3 levels) in create_worker'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:334:in `loop'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:334:in `block (2 levels) in create_worker'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:333:in `catch'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:333:in `block in create_worker'
  Thread #<Thread:0x000000010d989d20@worker-2 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:332 sleep_forever> status=sleep priority=0
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:17:in `enter'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:17:in `block in mon_enter'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/share_lock.rb:187:in `yield_shares'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/dependencies/interlock.rb:41:in `permit_concurrent_loads'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:17:in `mon_enter'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:22:in `block in synchronize'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `handle_interrupt'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `synchronize'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/query_cache.rb:128:in `cache_sql'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/query_cache.rb:107:in `select_all'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/querying.rb:54:in `_query_by_sql'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:942:in `block in exec_main_query'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:962:in `skip_query_cache_if_necessary'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:928:in `exec_main_query'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:914:in `block in exec_queries'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:962:in `skip_query_cache_if_necessary'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:908:in `exec_queries'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:695:in `load'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:250:in `records'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/bullet-7.0.7/lib/bullet/active_record70.rb:46:in `records'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:520:in `find_take'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:98:in `take'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:473:in `find_one'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:457:in `find_with_ids'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:69:in `find'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/querying.rb:22:in `find'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/core.rb:271:in `find'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:129:in `locate'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:154:in `block in locate'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:164:in `block in unscoped'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:881:in `_scoping'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:428:in `scoping'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/scoping/default.rb:43:in `unscoped'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:164:in `unscoped'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:154:in `locate'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:16:in `locate'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:148:in `deserialize_global_id'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:132:in `deserialize_argument'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:43:in `block in deserialize'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:43:in `map'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:43:in `deserialize'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/core.rb:190:in `deserialize_arguments'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/core.rb:180:in `deserialize_arguments_if_needed'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/execution.rb:44:in `perform_now'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/instrumentation.rb:14:in `block in perform_now'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/instrumentation.rb:25:in `block in instrument'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/notifications.rb:206:in `block in instrument'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/notifications/instrumenter.rb:24:in `instrument'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/notifications.rb:206:in `instrument'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/instrumentation.rb:35:in `instrument'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/instrumentation.rb:14:in `perform_now'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/logging.rb:18:in `block in perform_now'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/tagged_logging.rb:99:in `block in tagged'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/tagged_logging.rb:37:in `tagged'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/tagged_logging.rb:99:in `tagged'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/logging.rb:25:in `tag_logger'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/logging.rb:18:in `perform_now'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/execution.rb:24:in `block in execute'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:118:in `block in run_callbacks'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/railtie.rb:54:in `block (4 levels) in <class:Railtie>'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/execution_wrapper.rb:92:in `wrap'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/reloader.rb:72:in `block in wrap'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/execution_wrapper.rb:92:in `wrap'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/reloader.rb:71:in `wrap'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/railtie.rb:53:in `block (3 levels) in <class:Railtie>'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:127:in `instance_exec'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:127:in `block in run_callbacks'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:138:in `run_callbacks'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/execution.rb:22:in `execute'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/queue_adapters/async_adapter.rb:70:in `perform'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:352:in `run_task'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:343:in `block (3 levels) in create_worker'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:334:in `loop'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:334:in `block (2 levels) in create_worker'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:333:in `catch'
      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:333:in `block in create_worker'

```

### Expected behavior

The tests should just run through

### Actual behavior

The tests get stuck after some while

### System configuration
**Rails version**: 7.0.5
**Ruby version**: 3.2.0
",krebbl,User,0,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48463,22176,48463,Suggested CSP nonce generator doesn't work the first time a page is loaded,open,5,2023-06-13 20:24:17+00:00,2023-09-16 07:20:36+00:00,,"https://github.com/rails/rails/blob/d12f1a2f84128085ee0bdbbbe28df9ec27a9bc64/actiontext/test/dummy/config/initializers/content_security_policy.rb#L20

If a cookie containing the session ID doesn't exist when this suggested nonce generator is executed (usually the first time a page is loaded), then the generated nonce will be blank. This causes problems with turbo frames since the nonce won't be the same on the next request, causing any nonced JS to fail since it won't match the nonce on the page.

Since sessions are lazily initialized, there is no guarantee that the session exists at the time the nonce generator is called. If the session is not yet initialized, referring to its `id` returns `nil`.

An alternative would be something like 

```
config.content_security_policy_nonce_generator = ->(request) { request.session[:nonce] ||= SecureRandom.hex }
```

This will force the session cookie to be set earlier in the request cycle and will populate it with a random number instead of using the session id. 
",olbrich,User,0,actionpack,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/48434,15172605,48434,Add `ActiveRecord.reload_attributes`,open,9,2023-06-09 16:30:33+00:00,2023-12-06 15:22:05+00:00,,"### Motivation / Background

PR #48241 detects when certain auto-populated columns should be appended to a `RETURNING` clause. However, in certain cases it may be necessary for the application to explicitly specify additional columns. e.g. Database Triggers.

This feature was discussed in #45736 and briefly with Matthew Draper in the Discord channel.

### Detail

This PR adds the ability for the application to specify those attributes with the `reload_attributes` class method.

### Additional information

Additionally a very minor edge case was handled. The application could try to assign a value to a virtual column which essentially results in a no-op. The values persisted in the database would be the same regardless. However, in doing so the value from `RETURNING` wasn't being reflected on the instance attributes after create. See the newly added test and removal of the `_read_attribute` check.

Performing this nil check with `_read_attribute` will also not be compatible when `RETURNING` is implemented on `UPDATE`.  As it is expected that the instance's attributes will be prepopulated with non-nil values. (See related PR here: https://github.com/rails/rails/pull/48628)

---

Paging: @nvasilevski",abaldwin88,User,4,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48428,5512772,48428,Remove custom `exec_insert` method from Trilogy adapter,open,0,2023-06-09 01:16:25+00:00,2023-06-12 18:52:17+00:00,,"`Trilogy` adapter has a custom implementation of `exec_insert` method which is a complete duplication of the abstract `exec_insert` with the **only difference**:  Trilogy's exec insert used to return an unwrapped result while abstract implementation returns `ActiveRecord::Result`. Though we believe it goes against the method signature as trilogy result and `AR::Result` do not implement the same interface. Changing the result type to be Active Record result causes only one issue - `last_insert_method` can not fetch the last inserted id value from `ActiveRecord::Result` as it doesn't provide such value.  In order to address it we are introducing a new `ActiveRecord::TrilogyResult` class which is a child class of `Result` with the only difference - it implements `last_insert_id` to be used by the `last_inserted_id` method. The `Result` itself had to be extended to store the reference to the `raw_result` 

### Alternative solutions for `last_inserted_id`

1. Instead of introducing new `TrilogyResult` class we could have added `last_inserted_id` method directly to the `Result` but it doesn't seem correct as not every adapter has such concept as `last_inserted_id`. For example being able to call `last_inserted_id` when using `PostgresqlAdapter` won't make much sense. 
2. We could have done the same what `mysql2` adapter does - reach into `@connection` to get the value:
https://github.com/rails/rails/blob/2a904bf58828e79c10e7838cb5a7550f8a1b5581/activerecord/lib/active_record/connection_adapters/mysql2/database_statements.rb#L69 as Trilogy raw connection also provides `last_insert_id` method. Though it feels much lower-level to reach into the raw connection and relying on `Result` seems to be a much better abstraction",nvasilevski,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48423,15172605,48423,Virtual stored columns should return new values on update,open,2,2023-06-08 14:02:05+00:00,2023-09-23 18:45:59+00:00,,"Follow-up from https://github.com/rails/rails/issues/45736
Same idea except this issue reflects the behavior on `update` rather than on `create`

### Steps to reproduce
Generate a model with a virtual stored column. Using Postgres as the database update a record and check the ActiveRecord attribute of the virtual stored column. It will not have the newly computed value from the database.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem 'pg', '~> 1.4'
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection ""postgresql:///test""
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.integer :counter1, null: false, default: 7
    t.integer :counter2, null: false, default: 7
    t.virtual :counter_sum, type: :integer, as: ""counter1 + counter2"", stored: true
  end
end

class Post < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_virtual_column_value_updated
    post = Post.create!
    post.update!(counter1: 2, counter2: 2)

    assert_equal 4, post.counter_sum
  end
end
```

```
Failure:
BugTest#test_virtual_column_value_updated [test.rb:38]:
Expected: 4
  Actual: 14
```

### Expected behavior
The SQL `UPDATE` statement sent to the database should include a `RETURNING` clause. ActiveRecord will then update the instance attributes on save with the returned values. The behavior should match between create and update.

### Actual behavior
The attribute's value from when the record was last read or inserted is reflected instead.

### System configuration
**Rails version**: edge
**Ruby version**: 3.2.1
**PostgreSQL version**: 14.7",abaldwin88,User,2,activerecord,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/48420,42933,48420,Type of keys returned by grouped count inconsistent after 7.0.5,open,3,2023-06-08 09:36:12+00:00,2023-06-28 19:27:53+00:00,,"### Steps to reproduce
(Also available as a [gist](https://gist.github.com/thefloweringash/3f4deabebb7920fbae3898d175743dc2) with docker-compose configuration).
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true
#
# Requires a postgres database, for example
#
#     createdb group_by_test
#     DATABASE_URL=postgres://localhost/group-by-test ruby ./group-by-test.rb
#
# Also supports checking other Rails versions via the RAILS_VERSION
# environment variable. For example:
#
#     createdb group_by_test
#     RAILS_VERSION=7.0.4.3 DATABASE_URL=postgres://localhost/group-by-test ruby ./group-by-test.rb

begin
  require ""bundler/inline""
rescue LoadError => e
  $stderr.puts ""Bundler version 1.10 or later is required. Please update your Bundler""
  raise e
end

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  if (rails_version = ENV['RAILS_VERSION'])
    gem ""rails"", rails_version
  else
    gem ""rails"", github: ""rails/rails"", branch: ""main""
  end

  gem ""pg""

  gem 'timeout', '=0.3.2' # workaround for bundler/inline
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection
# ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :bookings, force: true
end

class Booking < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def setup
    Booking.create!
  end

  def teardown
    Booking.delete_all
  end

  def test_group_by
    grouped_count =
      Booking
        .group(""tsrange(timestamp '2020-01-01', timestamp '2020-01-02', '[)') "")
        .count(:id)

    assert_equal Range, grouped_count.keys.first.class # passes
  end

  def test_group_by_join
    grouped_count =
      Booking
        .joins(""JOIN (SELECT tsrange(timestamp '2020-01-01', timestamp '2020-01-02', '[)') AS range) ranges ON TRUE"")
        .group('ranges.range')
        .count(:id)

    assert_equal Range, grouped_count.keys.first.class # fails
  end
end
```

### Expected behavior
Ideally the type of the keys would be inferred based on the actual data and be converted to Ruby `Range`s.

### Actual behavior
The type of the keys is `String`.

### System configuration
**Rails version**: 7.0.5

**Ruby version**: 3.2

---

The keys returned from a `.group(...).count(...)` have inconsistent type handling. In my case, I'm using a time range expression. If the expression is directly specified in the `.group(...)` call, the return type is `Range`, as expected. If the expression comes through a join, then the return type is `String`. On Rails 7.0.4.3, both of these returned `Range` keys.

More verbosely:

```ruby
# This produces a hash with Range keys on current master
Booking
  .group(""tsrange(timestamp '2020-01-01', timestamp '2020-01-02', '[)') "")
  .count(:id)

# This produces a hash with String keys on current master
Booking
  .joins(""JOIN (SELECT tsrange(timestamp '2020-01-01', timestamp '2020-01-02', '[)') AS range) ranges ON TRUE"")
  .group('ranges.range')
  .count(:id)
```

Obviously these are reduced examples to show the bug. In the actual code the joined values come from a postgres `generate_series` call.

Possibly related change: https://github.com/rails/rails/pull/46923

---

If I were to speculate, prior to #46923 the case where rails does not know anything about the column would fall through to the type of the returned data. After the change the unknown column's default ""Value"" type is used instead.

Breaking on the expression in `execute_grouped_calculation`

```ruby
        key_types = group_columns.each_with_object({}) do |(aliaz, col_name), types|
          types[aliaz] = col_name.try(:type_caster) ||
            type_for(col_name) do
              calculated_data.column_types.fetch(aliaz, Type.default_value)
            end
        end
```

I can see that
```
col_name.try(:type_caster)
 => #<ActiveModel::Type::Value:0x00000001291ff4a8 @precision=nil, @scale=nil, @limit=nil>

type_for(col_name) do
  calculated_data.column_types.fetch(aliaz, Type.default_value)
end
 => #<ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Range:0x00000001295f9ba8 @subtype=#<ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Timestamp:0x0000000128ef68b0 @precision=nil, @scale=nil, @limit=nil>, @type=:tsrange>
```

The latter is more useful in this case.

I also observed that if the alias of the joined subquery matches the name of an existing table, it will use type information from that table, even if it's unrelated to the current query. This could lead to some surprising results.
",thefloweringash,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/48418,5512772,48418,Raise if `exec_insert` and `insert` are used with an unsupported `returning` value,open,3,2023-06-07 14:44:41+00:00,2023-06-22 19:53:11+00:00,,"`exec_insert` and `insert` methods accept a `returning` argument, however only PostgreSQL adapter fully supports it. This commit adds a validation that raises in case if value passed as `returning` is not supported by the adapter.

Since now Rails doesn't allow using `returning` argument if adapter doesn't support RETURNING statement Rails itself as a caller of this method should explicitly pass `nil` for non-postgresql adapters to preserve the default return value which is the last inserted id


### Implementation details

Since `insert` method eventually calls into `exec_insert` and `exec_insert` calls into `sql_for_insert`  the validation only exists in the `sql_for_insert` method
",nvasilevski,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48393,193936,48393,Support nested array bind parameter for PostgreSQL parameter.,open,13,2023-06-04 12:31:54+00:00,2023-06-06 10:44:04+00:00,,"### Motivation / Background

Add support for multi column where syntax (aka `WHERE (id, user) IN ((1, 'Josef'), (2, 'Jimmy'))`) for PostgreSQL adapter.

```ruby
values = [[1, 'Josef'], [2, 'Jimmy']]
User.where('(id, name) IN (?)', values).to_sql
# => SELECT ""users"".* FROM ""users"" WHERE ((id, name) IN ((1, 'Josef'),(2, 'Jimmy')))
```

currently this raises an exception

```
/app/vendor/bundle/ruby/3.1.0/gems/activerecord-7.0.4.3/lib/active_record/connection_adapters/abstract/quoting.rb:25:in `quote': can't quote Array (TypeError)
```

### Detail

It is possible to chain `OR` conditions like `WHERE (id = 1 AND user = 'Josef') OR (id = 2 AND user = 'Jimmy')`, but in my use case I do need to handle ten thousands of individual values. Per my testing this approach is heavy for PostgreSQL planner and affects planning time according to `EXPLAIN`.

- 1 000 conditions of 2 values combined by OR
  - Planning Time: 280.032 ms
- 10 000 conditions of 2 values combined by OR
  - Planning Time: 27598.735 ms

compared to multi-column WHERE
- 1 000 conditions of 2 values using ""multi-where""
  - Planning Time: 8.722 ms
- 10 000 conditions of 2 values using ""multi-where""
  - Planning Time: 131.082 ms


### Additional information

It is also easier to compose query this way. Using `or` query needs to be composed in iterative way.

```ruby
values = [ [1, 'Josef'], ... ] # array of 10 000 values
scope = User.all

values.each do |value|
  scope = scope.or(User.where(id: value[0], name: value[1])
end

scope.load # execute
```

_I had troubles even with this approach since `or` doesn't work properly when called without starting where chain already on scope. But I'm not 100% sure I wasn't doing something wrong. I had to do following actually._

```ruby
values = [ [1, 'Josef'], ... ] # array of 10 000 values
scope = User.all

# start where chain first
first_value = values.shift 
scope = scope.where(id: first_value[0], name: first_value[1])

# handle rest with or
values.each do |value|
  scope = scope.or(User.where(id: value[0], name: value[1])
end

scope.load # execute
```

If welcomed, this could be later turned into feature of hash version of where arguments and being supported across all adapters just using the most optimised way available.

```ruby
User.where([:id, :name] => [[1, 'Josef'], [2, 'Jimmy']])
# => uses multi-where when supported (PostgreSQL only) or OR chained combinations for the rest
```

### Tip

_for quick local test, I used following patch_

```ruby
module CustomPostgreSQLQuoting
  def quote(value)
    if value.is_a?(Array)
      ""(#{value.map { |v| super(v) }.join(', ')})""
    else
      super
    end
  end
end

ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.prepend(CustomPostgreSQLQuoting)
```

related to https://github.com/rails/rails/pull/47410#issuecomment-1434957200 as well

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",simi,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48390,3414795,48390,Add :public_id_column option to accepts_nested_attributes_for,open,11,2023-06-02 23:25:48+00:00,2023-12-06 02:07:45+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

This Pull Request has been created because I would like to use `accepts_nested_attributes_for` and `fields_for` with a public_id column instead of the PK. `fields_for` doesnt seem to honor `to_param` because it continues to place the PK in the hidden ID field.

### Detail

This Pull Request changes` accepts_nested_attributes_for` and `fields_for` behaviour by adding an additional option to `accepts_nested_attributes_for` called `:public_id_column`

This new argument is intended to allow to specify a public ID column to use for the value of the forms hidden `[id]` input rather than the default public key.

```ruby
class Post < ApplicationRecord
  accepts_nested_attributes_for :comments, public_id_column: :public_id
end
```

When used in views/forms with `fields_for` it should automatically output the following hidden ID field.

```html
<input 
  type=""hidden""
  name=""post[comments_attributes][0][id]"" 
  value=""value-of-the-public_id-column""
  ...etc...
>
```

I chose add an argument to `accepts_nested_attributes_for` because its a lot simpler to add an argument to this method rather than to change the basics of ActiveRecord::Base by adding a new method similar to how `to_param` works. Looking for productive feedback here if we want to take the route of defining a class method or something instead.

### Additional information

Discussion on reddit: https://www.reddit.com/r/rails/comments/13xulzr/how_can_i_use_accepts_nested_attributes_for/

Video walkthrough on how the [`brick` gem ](https://github.com/lorint/brick) is currently hacking in this functionality with `friendly_id`. https://www.reddit.com/r/rails/comments/13z4hfq/hey_uwestonganger_accepts_nested_attributes_for/

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",westonganger,User,1,activerecord,docs,actionview,,,,,,
https://api.github.com/repos/rails/rails/issues/48386,5657035,48386,Add ability to specify resulting key names for `as_json` `:methods` option,open,1,2023-06-02 20:50:53+00:00,2023-06-02 21:18:11+00:00,,"I recently had a need to specify an alternative name for the key when used ActiveModel's `as_json` method with `:methods` option. For example, I have a `User` model and I want to render its `nick` as a `unique_id`.

While this can be achieved by using `alias`/`alias_method` for methods (and `alias_attribute` for attributes) in the model itself, it does not always makes sense to have them in the model, because the name can be from a different domain (vocabulary etc) and so be confusing when defined there.

Now, this is possible with the following syntax:
```ruby
user.as_json(methods: [:permalink, { unique_id: :nick }])
# => { ""id"" => 1, ""name"" => ""Konata Izumi"", ""age"" => 16, ""nick"" => ""kozumi"",
#      ""permalink"" => ""1-konata-izumi"", ""unique_id"" => ""kozumi"" }
```

This works for attributes too:
```ruby
user.as_json(except: [:name], methods: { nickname: :name })
```",fatkodima,User,0,activemodel,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48375,1916144,48375,Server-Timings reported for partials are incorrect (too high) when nested partials are used,open,5,2023-06-02 07:06:49+00:00,2023-10-18 05:43:38+00:00,,"Server Timings reported for partials are longer than the entire request as reported by the browser.

### Steps to reproduce

1. Use an endpoint with a lot of nested-partials.
1. Look at server timings in browser network tabs
2. Observe that the timing for `render_partial.action_view` is longer than the entire duration the browser reports for the request. 
4. Observe that the timing for `render_partial.action_view` is longer than the duration reported in the Rails log

Example:
 Rails might report `Completed 200 OK in 2796ms` but in the Server-Timings you'll see a higher number for `render_partial.action_view` such as 3725.8ms

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

**Note: the test-case requires views.  Please see the repo https://github.com/tgaff/rails-server-timing-issue-demo/tree/main/executable_test_case** or add your own views.
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""rails"", '=7.0.4.3'
  gem ""rack"", ""~> 2.0""
  gem ""debug"", platforms: %i[ mri mingw x64_mingw ]
  gem ""pry""
end

require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  secrets.secret_key_base = ""secret_key_base""
  config.server_timing = true

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    get ""/nested"" => ""test#nested""
    get ""/not_nested"" => ""test#not_nested""
  end
end

class TestController < ActionController::Base
  include Rails.application.routes.url_helpers

  def nested
    self.append_view_path('./views')
    @nesting = true
    render 'index'
  end

  def not_nested
    self.append_view_path('./views')
    @nesting = false
    render 'index'
  end
end

require ""minitest/autorun""
require ""rack/test""

class ServerTimingBugTest < Minitest::Test
  include Rack::Test::Methods

  def test_nested_response_ok
    get ""/nested""
    assert last_response.ok?
  end

  def test_nested_partial_timing_less_than_total_controller
    get ""/nested""
    assert_operator render_partial_timing_dur, :<, process_action_timing_dur, ""partial rendering should be less than total action time""
  end

  def test_not_nested_response_ok
    get ""/not_nested""
    assert last_response.ok?
  end

  def test_not_nested_partial_timing_less_than_total_controller
    get ""/not_nested""
    assert_operator render_partial_timing_dur, :<, process_action_timing_dur, ""partial rendering should be less than total action time""
  end

  private
    def app
      Rails.application
    end

    def reported_server_timings
      last_response.headers[""Server-Timing""]
    end

    def reported_timing_durations
      timings = {}
      reported_server_timings.split(',').each do |entry|
        k, almost_v = entry.strip.split(';')
        timings[k.strip] = almost_v.delete('dur=').to_f
      end
      timings
    end

    def render_partial_timing_dur
      reported_timing_durations['render_partial.action_view']
    end

    def process_action_timing_dur
      reported_timing_durations['process_action.action_controller']
    end
end
```

This is a little easier to understand in the browser where you can easily see the entire request time.  As such I've uploaded a demo app: https://github.com/tgaff/rails-server-timing-issue-demo
The executable test case is also in that repo in a sub-directory.


### Expected behavior
<!-- Tell us what should happen -->
* Server-timings reported for partials should be accurate.
* Server-timings reported for partials should be less than the total request time.


### Actual behavior
<!-- Tell us what happens instead -->
* Server timings reported to chrome, when partials are involved indicate a longer duration than the entirety of the request.

### System configuration
**Rails version**: 7.0.4.3 && main
**Ruby version**:  3.2.0

### screenshot

<img width=""572"" alt=""Screen Shot 2023-06-02 at 3 52 03 PM"" src=""https://github.com/rails/rails/assets/1916144/2ebada20-2d97-4244-9e86-0550a8ca9d71"">

Note in the above request:
* the browser says the request took 13.70 seconds.
* server reported that partials took 23.39 seconds.


#### other info / commentary

* I'm aware of https://github.com/rails/rails/issues/41452 and believe this is a separate issue.
* My guess is that if `_a` render's partial `_b`, then the timing info for `_a` includes `_b`'s render time, but `_b`'s timing is also added in the final sum.
* Reproducible with logging turned off (`ActionView::Base.logger = nil`)
* Manual wristwatch verification of browser total time shows it to be correct-ish.
* Partials aren't processed in parallel are they?",tgaff,User,0,actionpack,actionview,With reproduction steps,,,,,,
https://api.github.com/repos/rails/rails/issues/48372,59744,48372,Rails 6.1.x `rails new; rake assets:precompile` is broken,open,11,2023-06-01 22:32:07+00:00,2023-12-21 21:58:21+00:00,,"### Steps to reproduce

```
mkdir -p /tmp/79de2b03fd57b181232892d89e7e9920; cd /tmp/79de2b03fd57b181232892d89e7e9920
rails _6.1.7.3_ new myapp --database=postgresql
cd myapp
RAILS_ENV=production SECRET_KEY_BASE=asdf bundle exec rake assets:precompile assets:clean
```


### Expected behavior

It precompiles fine

### Actual behavior

```
Compiling...
Compilation failed:
node:internal/process/promises:289
            triggerUncaughtException(err, true /* fromPromise */);
            ^

Error: Cannot find package '@babel/plugin-proposal-private-methods' imported from /private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/babel-virtual-resolve-base.js
    at new NodeError (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/vendor/import-meta-resolve.js:203:5)
    at packageResolve (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/vendor/import-meta-resolve.js:873:9)
    at moduleResolve (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/vendor/import-meta-resolve.js:902:20)
    at defaultResolve (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/vendor/import-meta-resolve.js:985:15)
    at resolve (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/vendor/import-meta-resolve.js:999:12)
    at resolve (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/files/import-meta-resolve.js:13:10)
    at tryImportMetaResolve (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/files/plugins.js:123:45)
    at resolveStandardizedNameForImport (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/files/plugins.js:145:19)
    at resolveStandardizedName (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/files/plugins.js:154:12)
    at loadPlugin (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/files/plugins.js:47:20)
    at loadPlugin.next (<anonymous>)
    at createDescriptor (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/config-descriptors.js:139:16)
    at createDescriptor.next (<anonymous>)
    at step (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/gensync/index.js:261:32)
    at evaluateAsync (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/gensync/index.js:291:5)
    at /private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/gensync/index.js:44:11
    at Array.forEach (<anonymous>)
    at Function.async (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/gensync/index.js:43:15)
    at Function.all (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/gensync/index.js:216:13)
    at Generator.next (<anonymous>)
    at createDescriptors (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/config-descriptors.js:101:41)
    at createDescriptors.next (<anonymous>)
    at createPluginDescriptors (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/config-descriptors.js:98:17)
    at createPluginDescriptors.next (<anonymous>)
    at /private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/gensync-utils/functional.js:21:23
    at Generator.next (<anonymous>)
    at mergeChainOpts (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/config-chain.js:349:34)
    at mergeChainOpts.next (<anonymous>)
    at chainWalker (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/config-chain.js:316:14)
    at chainWalker.next (<anonymous>)
    at loadFileChain (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/config-chain.js:192:24)
    at loadFileChain.next (<anonymous>)
    at buildRootChain (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/config-chain.js:78:27)
    at buildRootChain.next (<anonymous>)
    at loadPrivatePartialConfig (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/partial.js:79:62)
    at loadPrivatePartialConfig.next (<anonymous>) {
  code: 'ERR_MODULE_NOT_FOUND'
}
```

### System configuration
**Rails version**: 6.1.7.3

**Ruby version**: 3.0.6

### Notes

This appears to be happening because webpacker generates a `babel.config.js` https://github.com/rails/webpacker/blob/1cec8408d9c30e458c9f83b0c50ef53a255a4352/lib/install/config/babel.config.js#L57-L60 that includes `plugin-proposal-private-methods`, however it does not add a dependency to `plugin-proposal-private-methods`. Instead, it depends on a package that depends on `plugin-proposal-private-methods`. 

Recently that package was re-named to `plugin-transform-private-methods` https://github.com/babel/babel/pull/15614 and I believe it was released https://github.com/babel/babel/commit/389ecb08ed502cd13671928c1ab9caccb72f0a6f. 

So now when babel tries to execute it reads in the `babel.config.js` file, sees that it needs `plugin-proposal-private-methods`. Tries to load it, but that fails because `plugin-proposal-private-methods` is not installed (since it is no longer a dependency).

A suggested path forward: Update the `babel.config.js` to reference the new file name. Or explicitly depend on all plugins in the `babel.config.js`. Maybe lock down some dependency versions.

To anyone hitting this error in your app you can change the name in your `babel.config.js` like this:

```diff
-       '@babel/plugin-proposal-private-methods',
+       '@babel/plugin-transform-private-methods', 
```

There are more ""proposal"" items in there. As this happens again, people will hit the same bug.

",schneems,User,20,,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48364,425216,48364,Add support using `load_async()` inside `connected_to` block.,open,0,2023-06-01 07:46:37+00:00,2023-06-01 07:46:40+00:00,,"### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created because `load_async()` used ActiveRecord::Relation return value inside the `connected_to` block will immediately back to foreground execution by calling `load` method.


already discussed at https://github.com/rails/rails/issues/48351

### Detail

This Pull Request add support usage of `load_async()` inside the `connected_to` block to asynchronous query execution 
 to specific replica/shard database like below code.

```ruby
@foo = ActiveRecord::Base.connected_to(role: :reading) do
  User.where(id: 1).load_async
end
```

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->
added test case and others in the `connection_handlers_multi_db_test.rb` are passed in my local machine.

```sh
vscode ➜ /workspaces/rails/activerecord (feature/load-async-support-in-connected-to) $ bin/test test/cases/connection_adapters/connection_handlers_multi_db_test.rb
Using sqlite3
Run options: --seed 55330

# Running:

.......................

Finished in 0.342922s, 67.0706 runs/s, 224.5408 assertions/s.
23 runs, 77 assertions, 0 failures, 0 errors, 0 skips
```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",r-plus,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48358,11556013,48358,Signed id with polymorphic name purpose,open,0,2023-05-31 20:17:36+00:00,2023-06-06 15:19:44+00:00,,"### Motivation / Background

This Pull Request has been created because moving an ActiveRecord class makes previously generated signed ids invalid.

### Detail

This Pull Request changes what base purpose is chosen for a signed id and uses `base_class.polymorphic_name` instead of `base_class.name`.
The rationale behind this proposal would be that `polymorphic_name` is the representation of the class/table in external systems.

### Additional information

I am not 100% sure `polymorphic_name` is the best fit, it is convenient because overriding it would solve multiple issues at once (polymorphic relations, signed ids) when having to move an ActiveRecord class.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",alxckn,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48341,149464,48341,Rails cache prefix is not properly configured for isolated caching during parallel tests.,open,21,2023-05-30 05:10:08+00:00,2023-09-30 06:21:01+00:00,,"I've been investigating why I am seeing a lot of transient test failures due to cache collisions with parallelized tests. I thought it was because Rails doesn't update the cache prefix to protect from collisions but after looking at it; it's looking like Rails _tries_ to do that (by appending `Process.pid` and `Thread.current.object_id` to the namespace), but that it isn't working properly.

For the moment I've worked around it by adding namespace delineation myself in the `parallelize_setup` block of the test helper, but it'd be better if Rails handled this automatically so that no-one has to worry about it.

### Steps to reproduce

Replace `test/test_helper.rb` contents with the following:

```ruby
module ActiveSupport
  class TestCase
    # Run tests in parallel with specified workers
    parallelize(workers: :number_of_processors)

    # Setup all fixtures in test/fixtures/*.yml for all tests in alphabetical order.
    fixtures :all

    parallelize_setup do |worker|
      puts ""#{worker.inspect}: #{Rails.cache.options[:namespace]}""
    end

    # Add more helper methods to be used by all tests here...
  end
end
```

### Expected Behavior

The namespaces listed should be unique per worker to isolate the test runners so that they do not collide during parallelization. It should look something like this (assuming that the cache prefix configured is `test:20230518:`, which is what mine is configured to be).


```
6: test:20230518:63512:3580:
5: test:20230518:63513:3580:
0: test:20230518:63514:3580:
3: test:20230518:63515:3580:
7: test:20230518:63516:3580:
4: test:20230518:63517:3580:
1: test:20230518:63518:3580:
2: test:20230518:63519:3580:
```

### Actual Behavior

Instead, the namespaces listed all share identical process identifiers and thread identifiers.

```
6: test:20230518:63512:3580:
5: test:20230518:63512:3580:
0: test:20230518:63512:3580:
3: test:20230518:63512:3580:
7: test:20230518:63512:3580:
4: test:20230518:63512:3580:
1: test:20230518:63512:3580:
2: test:20230518:63512:3580:
```

### System configuration
**Rails version**:

```
% fgrep rails Gemfile.lock
      rails-dom-testing (~> 2.0)
      rails-dom-testing (~> 2.0)
      rails-html-sanitizer (~> 1.0, >= 1.2.0)
      rails-dom-testing (~> 2.0)
      rails-html-sanitizer (~> 1.1, >= 1.2.0)
    importmap-rails (1.1.6)
    rails (7.0.5)
    rails-dom-testing (2.0.3)
    rails-html-sanitizer (1.6.0)
    sentry-rails (5.9.0)
    sprockets-rails (3.4.2)
    tailwindcss-rails (2.0.29-arm64-darwin)
    tailwindcss-rails (2.0.29-x86_64-darwin)
    tailwindcss-rails (2.0.29-x86_64-linux)
    turbo-rails (1.4.0)
  importmap-rails (~> 1.1)
  rails (~> 7.0.5)
  sentry-rails
  sprockets-rails
  tailwindcss-rails (~> 2.0)
  turbo-rails
```

**Ruby version**:

```
% ruby --version
ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin21]
```
",rbroemeling,User,0,activesupport,pinned,,,,,,,
https://api.github.com/repos/rails/rails/issues/48338,36955431,48338,Add rename option to serializable_hash method,open,4,2023-05-30 03:07:36+00:00,2023-09-19 07:40:08+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

Hello contibutors 🤚 thank you for your efforts to keep the project alive.

### Motivation / Background
When I use `as_json` method to make the body of the response, There was one inconvenience.
As per Ruby's convention I usually put a question mark in the name of a method. (ex: has_value?)
It's not a problem inside Ruby, but it causes problems when used in other applications accessing the rails server.
To solve this, I had to manipulate the hash returned by `as_json`, which wasn't very clean.

### Detail
To solve the above problem I add a new option called `rename` to the `serializable_hash` method.
It can be used when you want to rename attributes or methods.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",dongcheolpark,User,0,activemodel,activerecord,,,,,,,
https://api.github.com/repos/rails/rails/issues/48328,277819,48328,Deprecate ActionController::MissingRenderer,open,1,2023-05-29 05:59:17+00:00,2023-05-30 19:34:48+00:00,,"When working on #48327, I noticed the comment for this class references a method which has moved to the [responders gem](https://github.com/heartcombo/responders). Nothing else in Rails uses it internally, so I think we can move it to that gem and deprecate it from Rails.

I've opened a PR to move it in heartcombo/responders#245.

Inspiration for the constant deprecation path came from 3e2552db899160266f175f2fda61e44be258aecd but LMK if there is a better way! :bow:",zzak,User,0,actionpack,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48305,984854,48305,Add syntax for CTE materialization hint to ActiveRecord,open,8,2023-05-26 00:35:36+00:00,2024-01-31 14:37:03+00:00,,"### Motivation / Background

Following on the Arel work in #48261, this commit adds the ability to provide a materialization hint to a CTE in ActiveRecord. To support the hint, a more verbose syntax for CTE values is introduced:

```ruby
Post.with(posts_with_comments: { query: Post.where(""comments_count > ?"", 0), materialized: true })
```

The CTE value is described as a hash that contains a required `:query` key and an optional `:materialized` key. The set of available options could be expanded in the future to accommodate, for example, postgres's various options for recursive CTEs.

### Additional information

I don't know whether there's any appetite within the core team to expose this functionality in AR's public API. But if there is, this approach seemed like the most plausible choice, given the current `#with` interface. That said, I'm more than happy to talk about alternatives.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",97jaz,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48284,52599949,48284,Fixing invert_where method to handle empty where conditions,open,7,2023-05-23 13:35:39+00:00,2023-11-15 18:27:08+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

Currently, when`invert_where` is called without any existing where conditions, it throws an error with invalid query. 
```
Post.invert_where.to_sql
#=> SELECT ""posts"".* FROM ""posts"" WHERE NOT ()
```

modified the `invert_where` to return the receiver as is when there are no `where` conditions to invert. 
```
Post.order(:id).invert_where.to_sql
#=>  ""SELECT \""posts\"".* FROM \""posts\"" ORDER BY \""posts\"".\""id\"" ASC""
```

### Detail

When the method chain of `ActiveRecord_Relation` includes an unintentional method such as `unscope(:where)` and I use invert_where after that, unexpected errors occur.
```
relation = Post.where(id: 2)
relation = relation.unscope(:where)
relation.invert_where
```

Also, this change has some kind of consistency with how `unscope(:where)` behaves when there are no scopes defined, I think 🙇‍♀️ 
```
Post.order(:id).unscope(:where)
#=> ""SELECT \""posts\"".* FROM \""posts\"" ORDER BY \""posts\"".\""id\"" ASC""
```

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [ ] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",a5-stable,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48280,19192189,48280,ActiveRecord: make query timeout errors inherit from the base connection error,open,4,2023-05-23 08:35:46+00:00,2023-05-23 10:57:55+00:00,,"In my experience, to enable efficient handling of exceptions, network clients must clearly categorize their exceptions in two categories:

  - Network/Connection errors: whenever we didn't actually get a response from the server and perhaps the issue is transient and retrying now or later will work. e.g. Timeout, authentication error, DNS error, etc.

  - Client errors: when the client did something wrong, and it's likely a bug in the user code and they should fix something. e.g. SQL Syntax error, unkown column, etc.

Such categorization allows for better automated handling of exceptions, like retrying or not, sending the exception to a reporting service or just emitting a health metric, etc.

Historically Active Record was quite bad at translating the underlying adapter errors into clean errors of its own, and lots of network related errors were translated into `SatementInvalid` as a big catch all.

In 2019 we started better tranlating these errors (https://github.com/rails/rails/pull/36692, https://github.com/rails/rails/pull/36694) but for backward compatibility reasons these new errors still inherited from `StatementInvalid`.

I think now would be a good time to consider fixing this historical cruft.

Note: opening as a draft as this PR isn't necessarily exactly what I want to change, I'm more interested in gathering thoughts from interested parties.

cc @matthewd @eileencodes @rafaelfranca any opinions?
",casperisfine,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48267,75765648,48267,FIX correctly sort records with the in_batches method,open,7,2023-05-21 06:17:51+00:00,2023-06-26 16:15:03+00:00,,"Fixed incorrect sorting using order keyword in in_batches method

<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->
Fix incorrect sorting using order keyword in in_batches method.

example (posts table has id as the primary key)
```
Post.in_batches(order: :desc, use_ranges: false).first.pluck(:id)
:actual => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
:expected  => [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
```

### Additional information
if use_ranges keyword is true, the sorting does not work either because of [this code](https://github.com/rails/rails/blob/55c3066da325703ff7a9524dbdc479b860db3970/activerecord/lib/active_record/relation/batches.rb#LL278), but I am not sure if this is the expected behavior.
### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",TakuyaKurimoto,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48263,419086,48263,Add down only and migrating helpers to migration,open,1,2023-05-20 12:27:00+00:00,2023-07-19 09:30:29+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

In migrations, the `up_only` helper and the `reverting?` predicate allow constraining operations in either direction. Adding `down_only` and `migrating?` allows defining blocks that need to run when reverting, or running one-liners when migrating without using double negatives. Plus, you no longer need to remember which ones exist and which ones don't.

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->
Fixes #48245 

### Detail

This Pull Request adds `down_only` and `migrating?`.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change.
* [x] Commit message has a detailed description of what changed and why.
* [x] Tests are added or updated if you fix a bug or add a feature. (Original methods are not tested)
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",goulvench,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48247,22918438,48247,Introduce Active Record config to enable database queries to be retried,open,1,2023-05-17 15:26:51+00:00,2023-05-22 16:04:21+00:00,,"### Motivation / Background

Certain applications (e.g. Shopify, GitHub), retry all database queries and have been patching `#execute` / `#raw_execute` to change the `allow_retry` kwarg to true. This is brittle. Enabling retries globally should be an option for apps that are willing to accept the risks.

### Additional information

Wondering if it's safe to retry transaction-related db methods (e.g. `#commit_db_transaction`, `#exec_restart_db_transaction`). As it stands, Shopify's retry patch _will_ retry all of these queries, but our retry patch used to be transaction-aware. Should we stick to avoiding retries, even if the the application has configured retries globally, with these methods or are they fine to retry?

### Checklist

Before submitting the PR make sure the following are checked:

* [X] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [X] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [X] Tests are added or updated if you fix a bug or add a feature.
* [X] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.

cc @eileencodes @rafaelfranca ",adrianna-chang-shopify,User,2,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48244,110363331,48244,Fix method name for `InsertAll#keys_including_timestamps`,open,1,2023-05-17 10:32:51+00:00,2023-05-18 00:34:49+00:00,,"

### Motivation / Background

This is what the file said.

 `TODO: Consider renaming this method, as it only conditionally extends keys, not always`, 

so I changed the method name.




### Detail

Removed the `TODO:` and renamed it to the `append_if_exist_keys_including_timestamps`.



### Additional information



### Checklist

Before submitting the PR make sure the following are checked:

* [ ] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",asberel,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48227,272278,48227,Wrong query generated when merging unscoping scopes with eager_loaded associations,open,7,2023-05-15 10:24:54+00:00,2023-08-27 23:11:02+00:00,,"Merging a scope that unscopes a default_scope also unscopes the conditions on eager_loaded associations with the same column name.

### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :users, force: true do |t|
    t.datetime :deleted_at
  end

  create_table :posts, force: true do |t|
    t.integer :user_id
    t.datetime :deleted_at
  end
end

class User < ActiveRecord::Base
  has_many :posts
end

class Post < ActiveRecord::Base
  belongs_to :user
  default_scope -> { where deleted_at: nil }
  scope :with_deleted, -> { unscope(where: :deleted_at) }
end

class BugTest < Minitest::Test
  def test_association_stuff
    active_user = User.create!
    former_user = User.create!(deleted_at: Time.new)

    active_user_post = Post.create!(user: active_user)
    active_user_deleted_post = Post.create!(user: active_user, deleted_at: Time.new)
    former_user_post = Post.create!(user: former_user)
    former_user_deleted_post = Post.create!(user: former_user, deleted_at: Time.new)

    assert_equal [active_user_post, former_user_post].to_set, Post.all.to_set # default_scope
    assert_equal [active_user, former_user].to_set, User.all.to_set

    assert_equal [active_user_post, former_user_post].to_set, Post.eager_load(:user).to_set
    assert_equal 4, Post.with_deleted.eager_load(:user).count


    # only current posts of active user
    assert_equal [active_user_post].to_set, Post.eager_load(:user).where(users: {deleted_at: nil}).to_set

    # all posts of active users - works
    assert_equal [active_user_post, active_user_deleted_post].to_set, Post.with_deleted.eager_load(:user).where(users: {deleted_at: nil}).to_set
    assert_equal [active_user_post, active_user_deleted_post].to_set, Post.unscope(where: :deleted_at).eager_load(:user).where(users: {deleted_at: nil}).to_set

    # with a left join - works
    assert_equal [active_user_post, active_user_deleted_post].to_set, Post.with_deleted.left_outer_joins(:user).merge(User.where(deleted_at: nil)).to_set

    # all posts of active users - doesn't work: removes the deleted_at condition from users
    assert_equal [active_user_post, active_user_deleted_post].to_set, Post.eager_load(:user).where(users: {deleted_at: nil}).merge(Post.with_deleted).to_set
    # all posts of active users - doesn't work: removes the deleted_at condition from users
    assert_equal [active_user_post, active_user_deleted_post].to_set, Post.eager_load(:user).where(users: {deleted_at: nil}).merge(Post.unscope(where: :deleted_at)).to_set
  end
end

```

### Expected behavior
It should generate this SQL
```sql
SELECT ""posts"".""id"" AS t0_r0, ""posts"".""user_id"" AS t0_r1, ""posts"".""deleted_at"" AS t0_r2, 
""users"".""id"" AS t1_r0, ""users"".""deleted_at"" AS t1_r1 
FROM ""posts"" LEFT OUTER JOIN ""users"" ON ""users"".""id"" = ""posts"".""user_id"" WHERE ""users"".""deleted_at"" IS NULL
```

### Actual behavior
But actually generates
```sql
SELECT ""posts"".""id"" AS t0_r0, ""posts"".""user_id"" AS t0_r1, ""posts"".""deleted_at"" AS t0_r2, 
""users"".""id"" AS t1_r0, ""users"".""deleted_at"" AS t1_r1 
FROM ""posts"" LEFT OUTER JOIN ""users"" ON ""users"".""id"" = ""posts"".""user_id""
```
### System configuration
**Rails version**: 7.0.4.3

**Ruby version**: 3.2.2
",pzac,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/48202,277819,48202,Add namelist rake task,open,1,2023-05-12 08:19:42+00:00,2023-10-05 10:42:20+00:00,,"### Motivation / Background

We want a way to be able to audit the public API of Rails, and find things that are missing `:nodoc:`.

This was implemented in rails/sdoc#222, and we're pulling in the latest branch to use it here.

In the future we might want a way to diff this data in some way, for example to provide PRs with feedback that introduce new classes or methods for reviewers to quickly check.
",zzak,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48201,1518299,48201,Allow url_for to prioritize the current route on ambiguous recall.,open,0,2023-05-12 07:27:29+00:00,2023-06-10 01:38:59+00:00,,"

Fix #48013


If two routes end up with the same score when trying to recall the url from url_for, we currently pick the one with highest precedence (order of the route file).

This change bumps the current route (if matched) in front of the others.

The repro for the issue could help understand what this is trying to fix: https://gist.github.com/JoeDupuis/e0f18020c85a05d5188ee35485685387

### Motivation / Background

Fixes #48013

We are already trying to recall the current request with `url_for`, this helps recalling the correct route when there is multiple hit.

Currently, only the router knows which route is served. This adds the current route in the rack env allowing class further in the request to infer things from it.


### Detail

- I don't know if we should merge this. I could see it as confusing if someone is calling url_for in the context of a request vs outside of a request (test or mailer). But then again, [it's also confusing to users if we don't](https://github.com/rails/rails/issues/48013).


### Additional information

A bit of fun trivia. The current (7.0.4.2) guide for `ActionController::UrlFor` mention:


> This module requires the host class to implement env which needs to be Rack-compatible and request which is either an instance of ActionDispatch::Request **or an object that responds to the host, optional_port, protocol, and symbolized_path_parameter methods.**


Which led me to write an initial version of this where I was checking if the request object responds to `current_route` to make sure the code would still work if the request is not an `ActionDispatch::Request`.

Then I noticed while reading the same doc through the code that [this was changed](https://github.com/rails/rails/commit/d69501a3d60f07dc68578278041ed74682084c9a) and I was unnecessarily playing hard mode :man_facepalming: :laughing: 

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",JoeDupuis,User,0,actionpack,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48189,674321,48189,Support more direct upload services by customize HTTP method and respose type,open,1,2023-05-11 09:34:11+00:00,2023-10-16 16:58:55+00:00,,"### Motivation / Background

When building a new Service for ActiveStorage, we got two requirements:

1. We need to direct upload a file with `POST` method instead of `PUT`, and send credential(token), key(filename) and file(binary to upload) with `Content-Type:   multipart/form-data; boundary=<frontier>`, instead of sending them with headers.
2. We are creating a SaaS that make each Tenant has their own Cloud Service configuration, hence it's not possible to write all service configurations into `config/storage.yml`. For now, `ActiveStorage::Blob` has an anonymous validator to check `service_name` has to be declared in `ActiveStorage::Blob.services`, we can't disable this validator.

### Detail

**I think it's better to make them configurable like this:**

```ruby
# write my own service
module ActiveStorage
  class Service::QiniumService < Service

    # declare direct upload with HTTP POST method
    def http_method_for_direct_upload
      'POST'
    end

   # declare direct upload response type, ""text"" or ""json""
    def http_response_type_for_direct_upload
      'json'
    end

    # declare direct upload file as multipart/form-data, the value of ':file' is the form data key to file
    def form_data_for_direct_upload(key, expires_in:, content_type:, content_length:, checksum:, **)
      put_policy = Qinium::PutPolicy.new(config, key: key, expires_in: expires_in)
      put_policy.fsize_limit = content_length.to_i + 1000
      put_policy.mime_limit = content_type
      put_policy.detect_mime = 1
      put_policy.insert_only = 1
      {
        key: key,
        token: put_policy.to_token,
        ':file': 'file'
      }
    end
end
```

With above changes, `ActiveStorage::Service` can support all types of HTTP methods, send token to cloud service with HTTP header or form data.

**change `activestorage/app/models/active_storage/blob.rb` anonymous validator to named one:**

```ruby
  validate do
    if service_name_changed? && service_name.present?
      services.fetch(service_name) do
        errors.add(:service_name, :invalid)
      end
    end
  end
```

changes to 

```ruby
validate :validate_service_name_in_services, if: -> { service_name_changed? && service_name.present? }
private
    def validate_service_name_in_services
      services.fetch(service_name) do
        errors.add(:service_name, :invalid)
      end
    end
```

Now, we can write our own Module prepend to ActiveStorage::Blob, to override `validate_service_name_in_services`, such as:

```ruby
module ActiveStorageSaas::BlobModelMixin
  private
    def validate_service_name_in_services
      # dynamically define service name per TenantStorageService#id, later we can resolve tenant storage
      #   configuration by parsing TenantStorageService:1 to tenant_storage = TenantStorageService.find(1)
      #   tenant_storage.service_name => Real Storage Service Name
      #.  tenant_storage.service_options => options to make instance of Service
      /^TenantStorageService:\d+$/.match?(service_name) || super
    end
end

ActiveSupport.on_load(:active_storage_blob) do
  prepend ActiveStorageSaas::BlobModelMixin
end
```

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

- This is another PR #45442 that has the same requirement to customize HTTP Method
- This is my real project that is working on this PR : https://github.com/xiaohui-zhangxh/activestorage_qinium/blob/main/lib/active_storage/service/qinium_service.rb
- This is my real project that need to make our Tenants have their own storage configurations : https://github.com/xiaohui-zhangxh/activestorage_saas/blob/main/lib/active_storage/service/saas_service.rb
- A duplicate PR #45839 to fix tests errors

",xiaohui-zhangxh,User,0,activestorage,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48179,771968,48179,Add `Object#isolated_copy`,open,2,2023-05-09 16:37:22+00:00,2023-05-10 18:03:32+00:00,,"This adds `Object#isolated_copy` (as a private API) which performs a `deep_dup` unless the object is frozen or a non-anonymous module.  In which case, it simply returns `self`.


TODO:
- [ ] tests
- [ ] update `thread_mattr_accessor` docs

---

@byroot `Module#deep_dup` returning `self` may cause unexpected behavior (see #48178).  What do you think of replacing `Module#deep_dup` with `Module#isolated_copy`?  (In other words, restoring the original behavior of `Module#deep_dup`, and defining `Module#isolated_copy` with the specialized behavior instead.)
",jonathanhefner,User,0,activemodel,activesupport,,,,,,,
https://api.github.com/repos/rails/rails/issues/48139,33079237,48139,Fix active record insert values of type cast and serialize,open,2,2023-05-05 15:28:14+00:00,2023-05-12 03:34:22+00:00,,"### Motivation / Background

This is a problem that has existed since the introduction of [ActiveRecord::InsertAll](https://github.com/rails/rails/pull/35077/files#r260410047).
Initially, `ActiveRecord::InsertAll` used `ActiveRecord::Relation::QueryAttribute#value_for_database` to convert values. As the code evolved, it switched to using `ActiveModel::Type::XXX#serialize` to serialize values. 
This is inconsistent with how attributes are converted in `Model#save`, which uses `ActiveModel::Attribute::FromUser#value_for_database`. 
Therefore, in some cases, data created using `Model#insert` and `Model#create` may be inconsistent. This PR fixes this issue.

### Detail

- Fix value conversion of ActiveRecord::InsertAll::Builder#values_list

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.

cc @boblail @tenderlove @kamipo 

_PS: English is not my native language; please excuse typing errors._",OuYangJinTing,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48132,8878264,48132,Postgresql improvements to create_schema and drop_schema ,open,1,2023-05-04 19:55:09+00:00,2023-05-11 22:36:39+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

We are working a lot with postgresql and schemas. I noticed that the ActiveRecord does not support many options for them. I want to enable possible options while maintaining similar behavior to `create_table` and `drop_table`

### Detail

- Added support of **IF NOT EXISTS** statement in `create_schema`
- Added support for `force: cascade` option in `create_schema` 
- **BREAKING CHANGE** Changed default behavior of `drop_schema`
  - no longer runs **CASCADE** by default
  - supports `force: :cascade` option, similar to `drop_table`
",Adam-Stomski,User,1,activerecord,railties,docs,,,,,,
https://api.github.com/repos/rails/rails/issues/48130,3942920,48130,Fix belongs to with has one association multiple savings,open,8,2023-05-04 17:19:08+00:00,2023-11-13 18:13:34+00:00,,"### Motivation / Background
""Fixes #[48077](https://github.com/rails/rails/issues/48077)""

copy of [PR](https://github.com/rails/rails/pull/48078) that was closed because of wrong rebase

### Detail

When object is saved with `belongs_to` association, that associated to object with `has_one` relation, object actually saved   twice. For example:
```
class Post < ActiveRecord::Base
  belongs_to :user
  belongs_to :poll

  after_commit :test_after_commit
  # after_save :test_after_commit saved_changes here are exists
  after_save :test_after_save

  attr_reader :after_save_counter

  def test_after_commit
    # saved_changes here are blank
    if saved_change_to_release_stage?(to: 'published')
      user.increment(:published_posts_count)
    end
  end

  def test_after_save
    # invokes twice
    @after_save_counter ||= 0
    @after_save_counter += 1
  end
end

class Poll < ActiveRecord::Base
  has_one :post
end

post = Post.new(
  user: user,
  title: 'yoyo',
  release_stage: 'published'
)

post.poll = Poll.new(multiple: true)

post.save
```

First poll object is saved, then AR try to save post from `save_has_one_association`, after that invokes `save` method second time and this second `save` call clears saved_changes.

I decided to add variable that show that object already saving and prevent second save from `save_has_one_association` callback 

",briu,User,0,activerecord,actionmailbox,,,,,,,
https://api.github.com/repos/rails/rails/issues/48117,260602,48117,Support upsert in Postgres temp tables,open,5,2023-05-03 09:19:29+00:00,2023-06-08 14:03:41+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

### Detail

This Pull Request changes the Postgres database adapter. It allows me to create models that are backed by a temporary table and use them just like regular tables. Without this change e.g. `insert_all` and `upsert_all` are not possible.

### Test

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""activerecord"", path: './activerecord'
  gem ""pg""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""postgresql"", url: ""postgres://localhost/rails-issue"") rescue puts 'Please create a DB ""rails-issue"" yourself first'
ActiveRecord::Base.logger = Logger.new(STDOUT)

class Post < ActiveRecord::Base
  def self.with_temp_table(as:)
    transaction do
      connection.create_table(table_name, temporary: true, force: true, as: as)
      yield
    end
  end
end

class BugTest < Minitest::Test
  def test_upsert_in_temp_table

    # Create a model backed by a temp table. Prefill the table with some data from a query.
    Post.with_temp_table(as: ""select 1 as id, 'foo' as some_column"") do
      # Upserts require a unique constraint
      Post.connection.add_index(Post.table_name, :id, unique: true)

      assert_equal Post.new(id: 1, some_column: 'foo'), Post.sole

      # The following line fails on master with:
      #
      #   ActiveRecord::StatementInvalid: PG::SyntaxError: ERROR:  syntax error at or near "")""
      #   LINE 1: ...id"",""some_column"") VALUES (1, 'bar') ON CONFLICT () DO UPDAT...
      #
      # The temp table, including all indices, constraints, etc are not 'seen'
      # by Rails. The PostgreSQL adapter only considers stuff in the schemas
      # returned by current_schemas(false). The temporary namespace
      # 'pg_temp_xyz' is excluded.
      #
      # See https://www.postgresql.org/docs/15/functions-info.html
      #
      #   current_schemas ( include_implicit boolean ) → name[]
      #
      #   Returns an array of the names of all schemas presently in the
      #   effective search path, in their priority order. (Items in the current
      #   search_path setting that do not correspond to existing, searchable
      #   schemas are omitted.) If the Boolean argument is true, then
      #   implicitly-searched system schemas such as pg_catalog are included in
      #   the result.
      #
      # If you include implicit tables, via current_schemas(true), the
      # temporary table is found, but that is also true for the other system
      # schemas that we don't want.
      #
      # Luckily Postgres provides a means to find the temp schema name via:
      #
      #   pg_my_temp_schema () → oid
      #
      #   Returns the OID of the current session's temporary schema, or zero if
      #   it has none (because it has not created any temporary tables).
      #
      # If we add that to the search path, then temp tables work just like
      # regular tables.
      Post.upsert_all([{ id: 1, some_column: 'bar' }], unique_by: :id)

      assert_equal Post.new(id: 1, some_column: 'bar'), Post.sole
    end
  end
end
```

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",rschellhorn,User,0,activerecord,actioncable,,,,,,,
https://api.github.com/repos/rails/rails/issues/48114,13070410,48114,Add `:limit` to `validates_numericality_of`,open,1,2023-05-02 19:09:43+00:00,2023-05-14 08:21:19+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

This Pull Request has been created because Rails doesn't provide by default a way to validate if a number is within the database limit. That's problematic when one is trying to store an ID to another table without foreign key since one would need to manually add the logic for this validation, possibly using `validates_numericality_of` range.

```ruby
MAX_EIGHT_BYTES_SIGNED_NUMBER = 2**63 - 1
private_constant :MAX_EIGHT_BYTES_SIGNED_NUMBER

# It should store a valid database record; thus, it should not be negative and it can go up to the maximum value
# supported by the column, which is using the default bigint type size of 8 bytes.
VALID_ID_RANGE = (..MAX_EIGHT_BYTES_SIGNED_NUMBER)
private_constant :VALID_ID_RANGE

validates :model_id, numericality: { in: VALID_ID_RANGE }
```

### Detail

This Pull Request changes `ActiveRecord::Validations::NumericalityValidator` to support a new value for the `in:` option: `:limit`.

`:limit` will verify the column's SQL type metadata limit to create a range with it. If the value is a `virtual attribute`, an exception is raised. If the column doesn't have a `limit` value set, the validation will be ignored.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",edaroit,User,1,activemodel,activerecord,,,,,,,
https://api.github.com/repos/rails/rails/issues/48077,3942920,48077,has_one associated object saved twice and clears saved_changes ,open,1,2023-04-27 08:34:19+00:00,2023-11-13 18:10:58+00:00,,"### Steps to reproduce
```
begin
  require ""bundler/inline""
rescue LoadError => e
  $stderr.puts ""Bundler version 1.10 or later is required. Please update your Bundler""
  raise e
end

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :users do |t|
    t.integer :published_posts_count, default: 0
    t.timestamps
  end

  create_table :posts do |t|
    t.integer :user_id
    t.integer :poll_id
    t.string :title
    t.string :status, default: 'unreleased'
    t.datetime :release_at
    t.timestamps
  end

  create_table :polls do |t|
    t.boolean :multiple
    t.timestamps
  end
end

class User < ActiveRecord::Base
  has_many :posts
end

class Post < ActiveRecord::Base
  belongs_to :user
  belongs_to :poll

  after_commit :test_after_commit
  # after_save :test_after_commit saved_changes here are exists
  after_save :test_after_save

  attr_reader :after_save_counter

  def test_after_commit
    # saved_changes here are blank
    if saved_change_to_status?(to: 'published')
      user.increment(:published_posts_count)
    end
  end

  def test_after_save
    # invokes twice when saved with belongs_to association
    @after_save_counter ||= 0
    @after_save_counter += 1
  end
end

class Poll < ActiveRecord::Base
  has_one :post
end

class BugTest < Minitest::Test
  def setup
    Post.destroy_all
    Poll.destroy_all
  end

  def test_creating_post_with_poll_and_poll_options
    user = User.create

    post = Post.new(
      user: user,
      title: 'yoyo',
      status: 'published'
    )

    post.poll = Poll.new(multiple: true)

    post.save

    # after_save invokes twice
    assert_equal 2, post.after_save_counter
    assert_equal 1, user.published_posts_count
  end

  def test_creating_post_with_poll_only
    user = User.create

    post = Post.new(user: user, title: 'yoyo', status: 'published')
    post.save

    # after_save invokes once as expected
    assert_equal 1, post.after_save_counter
    assert_equal 1, user.published_posts_count
  end
end
```

### Expected behavior
`post.saved_changes` are available in `after_commit` callback, also after_save callback invokes only once

### Actual behavior
`post.saved_changes` are blank in `after_commit` callback

### System configuration
**Rails version**: main branch

**Ruby version**:  `ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin21]`
",briu,User,0,activerecord,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/48073,1516722,48073,Add system tests screenshots rotation,open,7,2023-04-26 19:35:59+00:00,2023-04-27 18:39:03+00:00,,"### Motivation / Background

The `tmp/screenshots` (or `Capybara.save_path`) folder can grow pretty quickly, especially when you try to debug/profile/de-flaky system tests. The life a screenshot (or HTML snapshot) is short: we either check it right after the failure or don't pay attention to it at all. Thus, it makes sense to automatically clean up older screenshots to keep the folder's size under control and don't waste local disk space.

### Detail

This Pull Request introduces a new method, `ActionDispatch::SystemTesting.rotate_screenshots(ttl: Numeric)`, to trigger the rotation.

### Additional information

Current implementation is not automatic. The main reason why we can not invoke this method right on the module load (like we do with the `.start_application`) is that it relies on the `Capybara.save_path` value that may be configured after we loaded the system testing code.

I think, making this feature ON by default makes sense, and I see two ways to proceed:

1) Just add the `ActionDispatch::SystemTesting.rotate_screenshots` line to the generated `test_helper.rb` and encourage developers to update their existing applications to add this line.

2) Consider introducing a _before suite hook_ (as a separate feature, similar to RSpec's `config.before(:suite)`), and use it to handle screenshots rotation. Suggested API: `ActiveSupport::Testing.run_before_suite(&block)`. I think, we can put the execution of these hooks into the `testing/autorun` file (or, maybe, there is a better option?).

I like option 2, but that would require some amount of work/time. Probably, we can start with 1) for 7.1 and think about further improvements for the next release.

/cc @eileencodes 

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",palkan,User,5,actionpack,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48064,28561,48064,Guides top navigation like Rails homepage,open,2,2023-04-25 21:19:49+00:00,2023-05-19 23:31:32+00:00,,"This makes the top navigation of guides more similar to the Rails homepage by using the same fonts, styling and logo as the Rails homepage.

The ""home"" and ""Contribute"" links in the secondary navigation are removed, as these are directly visible in the top navigation.

### Before
<img width=""880"" alt=""image"" src=""https://user-images.githubusercontent.com/28561/234406068-0e42434f-295b-467b-9d53-160a7cdc35b3.png"">
<img width=""497"" alt=""image"" src=""https://user-images.githubusercontent.com/28561/234406166-3e3e74cd-4a16-4718-ae88-12dbf2d34a29.png"">
<img width=""517"" alt=""image"" src=""https://user-images.githubusercontent.com/28561/234406437-338b01d6-d359-4a1f-8892-0ba379a7fcb0.png"">

### After

<img width=""879"" alt=""image"" src=""https://user-images.githubusercontent.com/28561/234405966-7233644d-8b32-412d-b6be-e39353c300e4.png"">
<img width=""515"" alt=""image"" src=""https://user-images.githubusercontent.com/28561/234406308-7b3213e9-81e0-4d79-a09f-3c75c41ddc01.png"">
<img width=""518"" alt=""image"" src=""https://user-images.githubusercontent.com/28561/234406371-6898b6ee-b49d-42a2-bdba-c1eea071eab6.png"">


### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",p8,User,1,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/48057,119972,48057,tmp:create creates the same dirs that tmp:clear removes,open,4,2023-04-25 00:34:01+00:00,2023-04-27 19:44:56+00:00,,"After running tmp:clear, tmp:create should ensure the same folders that are cleared are created.

### Motivation / Background

This Pull Request has been created because the current tmp:clear and tmp:create tasks are opposites of each other, but do not currently affect the same directories. `tmp:clear` presently clears cache, sockets, screenshots and storage, but `tmp:create` only creates the directories for cache, sockets, and pids.

Thus there is some incongruency between `tmp:clear` and `tmp:create`. Running `tmp:create`, for instance, does not result in a `tmp/storage/` directory and thus any ActiveStorage tests must create the directory themselves.


### Detail

This Pull Request changes the `tmp:create` rake task to additional ensure screenshots and storage directories are created.

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.",jasonkarns,User,0,railties,docs,,,,,,,
https://api.github.com/repos/rails/rails/issues/48041,277819,48041,Bump karma and dependencies,open,4,2023-04-24 01:13:06+00:00,2023-04-27 21:39:07+00:00,,"My only question is how does the global `yarn.lock` file get updated?
https://github.com/rails/rails/blob/main/yarn.lock

There is also a problem with `karma-sauce-launcher` with 4.0.0 that we will want to avoid specifically:
https://github.com/karma-runner/karma-sauce-launcher/issues/190",zzak,User,0,actionview,actioncable,,,,,,,
https://api.github.com/repos/rails/rails/issues/48032,277819,48032,Improve SauceLabs connection handling for CI,open,0,2023-04-23 10:22:34+00:00,2023-04-23 10:22:38+00:00,,"When debugging the SauceLabs integration in my local CI environment, I discovered this option for connection logs.

Also, the example from the karma-sauce-launcher recommends adding this check for the environment variables: https://github.com/karma-runner/karma-sauce-launcher/blob/69dcb822a45d29e57297b0eda7af4123ae55aafd/examples/karma.conf-ci.js#L2-L5

Even though we hard code the SauceLabs connection info for CI, that doesn't guarantee it will always be there in the same place, or work.",zzak,User,0,actionview,actioncable,,,,,,,
https://api.github.com/repos/rails/rails/issues/47984,4841167,47984,Active storage proxy setting filename,open,0,2023-04-19 09:16:06+00:00,2023-04-19 09:16:10+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

The current version of the guides states that we can set proxying for ActiveStorage. However, it mentions that this is set in config/initializers/active_storage.rb

This file does not seem to exist, so I suggest that this config is set in one of the environment files. In the case of proxying it makes sense to set this in config/environments/production.rb.

Alternatively it could be set in config/application.rb

This Pull Request has been created because it fixes a small error in the ActiveStorage guides.

### Detail

This Pull Request changes `config/initializers/active_storage.rb` to `config/environments/production.rb` in https://edgeguides.rubyonrails.org/active_storage_overview.html#proxy-mode

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",neudabei,User,0,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47969,5059927,47969,Permit frozen models to be validated,open,0,2023-04-18 00:40:01+00:00,2023-04-26 12:46:15+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

Recently stumbled upon `composed_of` and started to use it to model a concept. One nice thing about it I noticed was i could isolate all logic related to that value object outside of a model, like for example validations. Take for example:

```ruby
class HourlyRate
  include ActiveModel::Validations

  attr_reader :rate

  validates :rate, numericality: { greater_than_or_equal_to: 0 }

  def initialize(rate)
    @rate = rate
  end
end

class Person < ApplicationRecord
  composed_of :hourly_rate, mapping: [%w[hourly_rate rate]]

  validates_associated :hourly_rate
end
```

With this setup you can validate existing people no problem, but if you change the hourly_rate you run into issues.

### Detail

When you set a value using `composed_of` the value is frozen (see: https://github.com/rails/rails/blob/main/activerecord/lib/active_record/aggregations.rb#L279). But when you try to validate the object is raises a `FrozenError: can't modify frozen Person`. This is due to it trying to set the `errors` instance variable and keeping track of `validation_context`. My $0.02 is that validating shouldn't be seen as altering an object so these changes retain existing public API while making validation possible on frozen object.

This is done by memoizing errors prior to freezing, and moving the validation context into a separate object that can be altered during validation and memoizing that object prior to freezing.

### Additional information

I did find a related issue that was a blast from the past https://github.com/rails/rails/issues/1513. It looks to have been closed on the belief that `composed_of` was on its way out which turned out to not be the case.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",npezza93,User,1,activemodel,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47961,4896702,47961,Specify maximum compatible Ruby version for Rails 5,open,5,2023-04-17 12:47:56+00:00,2023-05-18 10:46:57+00:00,,"This is important to note because the section goes on to say ""Upgrade to the latest Ruby you can first, and then upgrade Rails.""

### Checklist
Before submitting the PR make sure the following are checked:
- [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
- [x]  Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: [Fix #issue-number]",chris-hewitt,User,0,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47927,5657035,47927,Fix filtering params for encrypted attributes when using child models or nested parameters,open,0,2023-04-12 19:40:24+00:00,2023-04-12 20:23:09+00:00,,"Fixes https://github.com/rails/rails/issues/47913 (see there for the problem description and investigation details).

cc @jorgemanrubia ",fatkodima,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47926,637855,47926,ignore (mrsk) deployment configuration,open,0,2023-04-12 19:20:06+00:00,2023-05-13 01:53:23+00:00,,"### Summary

This pull request adds `/config/deploy.yml` to dockerignore template file.

### Motivation / Background

This aforementioned file is used by [mrsk](https://github.com/mrsked/mrsk).

It is sensible to ignore this file by default for several reasons:

- The file may contain sensitive information about the infrastructure setup.
- Changing this configuration file triggers an unnecessary container rebuild.

",ncreuschling,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47913,79126438,47913,Automatic Filtering Params Named as Encrypted Columns does not filter params of child models or when params are nested,open,3,2023-04-11 05:20:58+00:00,2023-04-12 21:01:47+00:00,,"Found two unexpected behaviors w/r/t automatic filtering of encrypted columns. Encrypted columns are configured to be [automatically filtered in Rails logs](https://edgeguides.rubyonrails.org/action_controller_overview.html#parameters-filtering) BUT
1. models that inherit from a model with encrypted columns do not have the corresponding parameters filtered in the Rails logs
2. when a model with encrypted columns is passed as_nested_paramaters, the parameters are not filtered in the Rails logs

## Case 1: inheritance
### Steps to reproduce
```ruby
class User < ActiveRecord::Base
  encrypts(:email)
end

class SpecialUser < User
end
```
post with params: {email: 'secret@shh.com'} 

### Expected behavior
email value would be filtered out in logs for User & SpecialUser

### Actual behavior
params for User will get correctly filtered in the logs, e.g. `Parameters: {""user""=>{""email""=>""[FILTERED]""}}`
params for Special will not e.g. `Parameters: {""special_user""=>{""email""=>""secret@shh.com""}}`

## Case 2: nested parameters
```ruby
class User < ActiveRecord::Base
  encrypts(:email)

  belongs_to :organization
end

class Organization < ActiveRecord::Base
  has_one :user
  accepts_nested_attributes_for :user
end
```
post to organizations with params: {users_attributes: {new0: {email: 'secret@shh.com'}}}

### Expected behavior
email value would be filtered out in Rail logs

### Actual behavior
email not filtered out e.g. `Parameters: {""organization""=>{""user_attributes""=>{""email""=>""secret@shh.com""}}}`

### System configuration
**Rails version**: Rails 7.0.4.3

**Ruby version**: ruby 3.2.1 (2023-02-08 revision 31819e82c8) [arm64-darwin21]

## Why Issue?
To address issues, one can explicitly add `special_user.email` & `user_attributes.email` to filtered parameters, but it was definitely unexpected for me that nested attributes & child models were not being filtered in the logs. If this is the intended behavior I think there should at least be a warning in the docs.

## Why Happening?
Both behaviors stem from the how encrypts add the encrypted columns to `application.config.filter_parameters`:
https://github.com/rails/rails/blob/7c41d97ccbff2feb98544de784cabdc9714773f8/activerecord/lib/active_record/encryption/configurable.rb#L52-L58
in the example above, when User encrypts(:email), 'user.email' will be added to `application.config.filter_parameters` and so will not match & filter `{""special_user"" => {""email""=>""secret@shh.com""}}` or `{""user_attributes""=>{""email""=> ""secret@shh.com""}}`

### my chill-enough local fix
I was able to generate the behavior I wanted with
```ruby
class ApplicationRecord < ActiveRecord::Base
  self.abstract_class = true

  extend MyFilteredParams
end

module MyFilteredParams
  def encrypts(*names, **options)
    Rails.application.config.filter_parameters += names.map { |x| /^#{x}$/ }
    super
  end
end
```
super for MyFilteredParams.encrypts: https://github.com/rails/rails/blob/b96ddea5f0b4ff8ed6e9dfe4df62f7571b147b11/activerecord/lib/active_record/encryption/encryptable_record.rb#L45-L53

This adds '/^email$/' to filter parameters, not scoped to anything, so it would correctly filter logs `{""special_user"" => {""email""=>""[FILTERED]""}}` or `{""user_attributes""=>{""email""=> ""[FILTERED]""}}` 
BUT
it would also filter any attribute 'email' on any model. For my purposes that's chill because I'd rather over- than under-filter, but it's not a perfect solution. 
",annettemmm,User,0,attached PR,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47900,1518902,47900,Add `COPY .. TO` to read queries for PostgreSQL,open,3,2023-04-09 20:05:59+00:00,2023-05-16 21:32:44+00:00,,"### Motivation / Background

Fixes https://github.com/rails/rails/issues/47870

It was pointed out in the report that

> COPY moves data between PostgreSQL tables and standard file-system files. COPY TO copies the contents of a table to a file, while COPY FROM copies data from a file to a table (appending the data to whatever is in the table already). COPY TO can also copy the results of a SELECT query.

### Detail

Using COPY .. TO with a read only connection should not be a problem because we do not write to the database but only read the records that will be written somewhere else.

This change adds the regex `/copy.*to/i` to the list of read only markers for postgres. I decided to use a regex here so that we can also make sure that `COPY .. FROM` cannot be used with a read only connection.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* ~[ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.~
",nickborromeo,User,1,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47895,5965113,47895,"find_each have different behavior for different batch_size, with illegitimate has_one association",open,3,2023-04-08 13:07:39+00:00,2023-08-04 21:11:41+00:00,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end

  create_table :comments, force: true do |t|
  end

  create_table :post_comments, force: true do |t|
    t.integer :post_id
    t.integer :comment_id
  end
end

class Post < ActiveRecord::Base
  has_one :post_comment, dependent: :destroy
  has_one :comment, through: :post_comment
end

class PostComment < ActiveRecord::Base
  belongs_to :post, dependent: :destroy
  belongs_to :comment, dependent: :destroy
end

class Comment < ActiveRecord::Base
  has_many :post_comments
  has_many :post, through: :post_comments
end

class BugTest < Minitest::Test
  def setup
    bad_post = Post.create!
    comment = Comment.create!
    # bad_post has inlegitimate has_one association with post_comment and comment
    2.times { PostComment.create!(post: bad_post, comment: comment) }

    3.times do
      post = Post.create!
      comment = Comment.create!
      PostComment.create!(post: post, comment: comment)
    end
  end

  def teardown
    Post.destroy_all
  end

  def test_post_find_each_l000_ok
    assert_equal 4, Post.includes({ post_comment: :post }, :comment).where(comments: { id: 1.. }).find_each.to_a.count
  end

  def test_post_find_each_2_ng
    assert_equal 4, Post.includes({ post_comment: :post }, :comment).where(comments: { id: 1.. }).find_each(batch_size: 2).to_a.count
  end
end

```

### Expected behavior
<!-- Tell us what should happen -->
Both test case pass or fail.

I'm not sure this is a bug or not since there is multiple records in the database for has_one association.
This is hard to notice since things work fine when record volume is small with respect to batch_size.
Some mechanism like warning is desirable even if this is not a bug.

### Actual behavior
<!-- Tell us what happens instead -->
Only `test_post_find_each_l000_ok` pass.

### System configuration
**Rails version**:

**Ruby version**: 3.1.2
",yskkin,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/47894,5657035,47894,Add `pluck_each` and `pluck_in_batches` batching methods,open,1,2023-04-08 11:12:06+00:00,2023-05-16 11:14:32+00:00,,"Example:
```ruby
Person.pluck_in_batches(:name, :email) do |batch|
  jobs = batch.map { |name, email| PartyReminderJob.new(name, email) }
  ActiveJob.perform_all_later(jobs)
end

Person.pluck_each(:email) do |email|
  PartyMailer.with(email: email).welcome_email.deliver_later
end
```

Plucking in batches is a very popular feature I saw many projects reimplement themselves to gain some performance.
I saw this in 2 my previous projects, in OSS projects (was able to find in [mastodon](https://github.com/mastodon/mastodon/blob/main/lib/active_record/batches.rb)), a few popular [gems](https://rubygems.org/search?query=pluck).

## Benchmarks

Tested on a table with 50M records. 
Compared to the recently introduced [optimization](https://github.com/rails/rails/pull/45414) for range batching.

```sql
CREATE TABLE users (id bigserial PRIMARY KEY, val integer);
INSERT INTO users (val) SELECT floor(random() * 30 + 1)::int FROM generate_series(1, 50000000) AS i;
ANALYZE users;
```

### Whole table batching

Using ranges:
```ruby
start = Process.clock_gettime(Process::CLOCK_MONOTONIC)
User.in_batches(use_ranges: true) do |batch|
  batch.pluck(:id, :val)
end

elapsed = Process.clock_gettime(Process::CLOCK_MONOTONIC) - start
puts ""Elapsed: #{elapsed}s""
```

`Elapsed: 209.20533800008707s`

Plucking in batches:
```ruby
start = Process.clock_gettime(Process::CLOCK_MONOTONIC)
User.pluck_in_batches(:id, :val) { }
elapsed = Process.clock_gettime(Process::CLOCK_MONOTONIC) - start
puts ""Elapsed: #{elapsed}s""
```

`Elapsed: 113.7704949999461s` 🔥 

### Batching with conditions

Using ranges:
```ruby
start = Process.clock_gettime(Process::CLOCK_MONOTONIC)
User.where(""val = 21"").in_batches(use_ranges: true) do |batch|
  batch.pluck(:id, :val)
end
elapsed = Process.clock_gettime(Process::CLOCK_MONOTONIC) - start
puts ""Elapsed: #{elapsed}s""
```

`Elapsed: 28.136486999923363s`

No ranges:
```ruby
start = Process.clock_gettime(Process::CLOCK_MONOTONIC)
User.where(""val = 21"").in_batches do |batch|
  batch.pluck(:id, :val)
end
elapsed = Process.clock_gettime(Process::CLOCK_MONOTONIC) - start
puts ""Elapsed: #{elapsed}s""
```

`Elapsed: 39.96518399997149s`

Plucking in batches:
```ruby
start = Process.clock_gettime(Process::CLOCK_MONOTONIC)
User.where(""val = 21"").pluck_in_batches(:id, :val) do |batch|
end
elapsed = Process.clock_gettime(Process::CLOCK_MONOTONIC) - start
puts ""Elapsed: #{elapsed}s""
```

`Elapsed: 16.415813000057824s` 🔥 

These numbers are for the db on my local machine. The improvement will be much larger in production due to simpler queries and SQL queries reduction by half.

Also, implementing this feature would make https://github.com/rails/rails/pull/47466 unneeded.

The logic in `pluck_in_batches` looks similar to `in_batches`, but trying to dry it (extracting similar logic into helper methods or trying to reuse `pluck_in_batches` inside `in_batches`) will make the code more complex and less understandable.

cc @nvasilevski (as we discussed it in https://discuss.rubyonrails.org/t/yield-record-ids-to-in-batches-block/81102) ",fatkodima,User,21,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47882,44326005,47882,"""Run pending migrations"" button does not respect multiple migration paths",open,6,2023-04-07 00:09:35+00:00,2023-12-18 17:41:14+00:00,,"The ActionableError page to run pending migrations does not respect multiple migration paths that are otherwise respected by `bin/rails db:migrate`. 

We first became aware of this at my company because we use [packwerk](https://github.com/Shopify/packwerk) and [packs-rails](https://github.com/rubyatscale/packs-rails) to help modularize our Rails monolith app. When breaking the app apart into packs, it helps to have migrations live in the same pack as the models that they represent. We used the suggestions in [this issue](https://github.com/rubyatscale/packs-rails/issues/25) to dynamically add all the packs' migration paths to the application config. 

The `bin/rails db:migrate` command respects the application config changes, but the <kbd>Run pending migrations</kbd> button does not. 

This lack of feature parity between the CLI command and the UI button is confusing for developers and can lead to teams having different development environments depending on whether they ran the command or clicked the button.

I'd be happy to work on a PR to fix this 🙂 

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
1. Create new app
2. Create migration, e.g., generate a model with `bin/rails generate model Article title:string body:text`
3. Create a subdirectory where you would like other migrations to live, e.g., `packs/stories/db/migrate`
4. Create another migration and move it to that subdir. e.g., `bin/rails generate model Longform title:string body:text`
     and move xxxxx_create_longforms.rb from `db/migrate` -> `packs/stories/db/migrate`
5. Inside of your `Application` class in `config/application.rb` add the following line:
    ```rb
     config.paths[""db/migrate""] << ""packs/stories/db/migrate""
    ```
7. Check your migration status: `bin/rails db:migrate:status`
  a. See that you have 2 pending migrations
    ![Screenshot 2023-04-07 at 11 07 55 AM](https://user-images.githubusercontent.com/44326005/230656787-e6983592-e102-4e17-bd6a-0e574f3b84df.png)
8. Start Rails server and go to http://127.0.0.1:3000
  a. See that the ActionableError only tells you about one of your migrations
    ![Screenshot 2023-04-06 at 4 45 20 PM](https://user-images.githubusercontent.com/44326005/230513437-192e0009-8b20-4937-afa4-c5f003ea3484.png)
9. Run migrations with `bin/rails db:migrate`
  a. See that BOTH migrations are run
10. Rollback the migrations: `STEP=2 bin/rails db:rollback`
11. Restart Rails server and run migrations from the <kbd>Run pending migrations</kbd> button in the browser
  a. See that only the one migration in `db/migrate` gets run 


### Expected behavior
<!-- Tell us what should happen -->
- The actionable error page should list _all_ pending migrations that `bin/rails db:migrate:status` lists
- Clicking the <kbd>Run pending migrations</kbd> button should run all migrations that `bin/rails db:migrate` does

### Actual behavior
<!-- Tell us what happens instead -->
- The actionable error page only lists migrations under the top-level `db/migrate` directory, no matter how the application is configured.
- Clicking the <kbd>Run pending migrations</kbd> button only runs migrations located in top-level `db/migrate` directory

### System configuration
**Rails version**: 6.x, 7.x, `main` branch

**Ruby version**: 3.1.2, 3.2.0, 3.2.1
",aedwardg,User,1,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/47874,6646409,47874,✨ Add `trim_empty_fractional` to `ActiveSupport::NumberHelper.number_to_currency`,open,9,2023-04-05 23:54:29+00:00,2023-10-20 09:57:34+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

If I am wrong or this should be closed, please correct or let me know.

One issue that I've found when working with `ActiveSupport::NumberHelper.number_to_currency` was that it lacks support for truncating whole numbers.

Here's an example of what I think could be useful:

```
$30.05 => $30.05
$30.10 => $30.10
$30.00 => $30 # Doesn't exist today
```

I looked on Stackoverflow [here](https://stackoverflow.com/questions/11661592/rails-number-to-currency-delete-trailing-zeros) and the best answer came from supporting precision based on `round`. I'm not a big fan of that because under the hood, rounding is already done for `number_to_currency`, if anything, we should allow for whole number truncation.

**Note** I can also add a `CHANGELOG` if we think this is a viable path forward 🙇🏽‍♂️ 

### Detail

This Pull Request changes how `number_to_currency` works and adds a new parameter `strip_final_zeros`. I'd gladly accept feedback, parameter rename, and more tests if needed.

### Additional information

An alternative solution can be found in StackOverflow link above, but essentially: [here](https://stackoverflow.com/a/11661630/3788419).

```ruby
num = 30.00
number_to_currency(num, :precision => (num.round == num) ? 0 : 2)
  => $30

num = 30.05
number_to_currency(num, :precision => (num.round == num) ? 0 : 2)
  => $30.05
```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",danielvdao,User,0,activesupport,needs feedback,,,,,,,
https://api.github.com/repos/rails/rails/issues/47870,2786571,47870,COPY ... TO cannot be executed on a readonly database connection (postgresql),open,3,2023-04-05 16:11:29+00:00,2023-04-21 18:20:36+00:00,,"### Steps to reproduce
```
ActiveRecord::Base.connected_to(role: :reading) { ActiveRecord::Base.connection.execute('COPY (SELECT id FROM users WHERE id = 1) TO example.csv WITH CSV HEADER') }
#=> ActiveRecord::ReadOnlyError: Write query attempted while in readonly mode:
```

I guess the issue is that the regex simply considers COPY statements not read. But while COPY .. FROM _is_ a write query, COPY .. TO is not. It writes to a file in the filesystem, but only reads from the DB.

### Expected behavior
No error should be raised, the query should run.

### Actual behavior
`ActiveRecord::ReadOnlyError: Write query attempted while in readonly mode:` is raised

### System configuration
**Rails version**: 6.1.6.1 (but as far as I can tell the regex for rails 7 has the same issue)

**Ruby version**: 3.0.4p208
",kholbekj,User,0,activerecord,attached PR,PostgreSQL,,,,,,
https://api.github.com/repos/rails/rails/issues/47861,7397857,47861,Allows the default env key of `RAILS_MASTER_KEY` to be configurable by using `config.credentials.env_key` and `--env-key`.,open,1,2023-04-04 21:01:09+00:00,2023-05-15 22:49:30+00:00,,"Allows the default env key of `RAILS_MASTER_KEY` to be configurable by using `config.credentials.env_key` and `--env-key`.

### Motivation / Background

Rails uses a default key name: `RAILS_MASTER_KEY`, which is currently not configurable.

At Apple, we’re [working](https://developer.apple.com/news/?id=1o9zxsxl) to remove and replace non-inclusive language across our applications.

https://support.apple.com/guide/applestyleguide/m-apsg72b28652/1.0/web/1.0#apdef6d37bb5

> The term master can have oppressive associations, even when used in a technological context. For this reason, avoid using master when referring to the following:

This is an important objective for our team which uses Rails.

### Detail

Solved this by allowing the default key of `RAILS_MASTER_KEY` to be configurable by using `config.credentials.env_key`.

The Rails Credentials Command now respects this option as well:

```ruby
# ./config/application.rb
config.credentials.env_key = 'RAILS_MAIN_KEY'
# RAILS_MAIN_KEY=""*******"" rails credentials:edit
# RAILS_MAIN_KEY=""*******"" rails credentials:show

# ./config/environments/production.rb
config.credentials.env_key = 'RAILS_PROD_KEY'
# RAILS_PROD_KEY=""*******"" rails credentials:edit --environment production
# RAILS_PROD_KEY=""*******"" rails credentials:show --environment production

# ./config/environments/development.rb
config.credentials.env_key = 'RAILS_DEV_KEY'
# RAILS_DEV_KEY=""*******"" rails credentials:edit --environment development
# RAILS_DEV_KEY=""*******"" rails credentials:show --environment development
```

In addition, when using the `rails encrypted:edit`, you can also pass in an option for `--env-key` to override the name of default env key.

```bash
RAILS_MAIN_KEY=""*******"" rails encrypted:edit config/encrypted_file.yml.enc --env-key=""RAILS_MAIN_KEY""
RAILS_MAIN_KEY=""*******"" rails encrypted:show config/encrypted_file.yml.enc --env-key=""RAILS_MAIN_KEY""
```

### Additional information

Other approaches:

Modifying `RAILS_MASTER_KEY` to something like `RAILS_PRIMARY_KEY`, or `RAILS_MAIN_KEY`.

Opted not to take this approach, in an effort to not create a breaking change and minimize amount of impact for existing applications.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",arianf,User,0,railties,needs feedback,docs,,,,,,
https://api.github.com/repos/rails/rails/issues/47809,1505137,47809,load_async on associations does not load the association,open,5,2023-03-29 22:00:33+00:00,2024-01-13 11:45:22+00:00,,"### Steps to reproduce

If you have a model called User that `has_many` notes for example,
``` ruby
class User < ApplicationRecord
  has_many :notes, dependent: :destroy, as: :notable
end
```

``` ruby
class Note < ApplicationRecord
  belongs_to :notable, polymorphic: true
end
```

and you then load the `notes` association using `load_async`,

``` ruby
user = User.find(1)
user.notes.load_async
user.notes.loaded? # false
sleep 3
puts user.notes # Kicks off another SELECT query
```

the asynchronously loaded data is not used on subsequent requests to the association.

The only way to get the async loaded association to be used is to save the result of `load_async` to a variable, and the result is then only usable from that variable rather than the association itself:
``` ruby
user = User.find(1)
notes = user.notes.load_async
notes.loaded? # true
sleep 3
puts notes # uses the async results
```

### Expected behavior
I would expect `user.notes` to use the result of the async load rather than kicking off another query, and I would expect `user.notes.loaded?` to be true after the call to `user.notes.load_async`.

### Actual behavior
It kicks off another query when accessing the association and `user.notes.loaded?` is false after `user.notes.load_async`.

### System configuration
**Rails version**: 7.0.4.3

**Ruby version**: 3.1.3
",mikerobe,User,2,activerecord,pinned,,,,,,,
https://api.github.com/repos/rails/rails/issues/47804,19192189,47804,Unify shapes of ActiveModel::Attributes,open,13,2023-03-29 12:10:15+00:00,2023-10-27 10:28:35+00:00,,"`if defined?(@ivar)` a performance anti-pattern in Ruby 3.2+ even more so with YJIT.

This pattern cause the object shape to be inconsistent which slow downs instance variable access.

```
ruby 3.2.1 (2023-02-08 revision 31819e82c8) [arm64-darwin22]
       #value (orig):  1811240.2 i/s
        #value (opt):  2045238.9 i/s - 1.13x  faster
```

```
ruby 3.2.1 (2023-02-08 revision 31819e82c8) +YJIT [arm64-darwin22]
       #value (orig):  4379180.3 i/s
        #value (opt):  6347280.7 i/s - 1.45x  faster
```

Benchmark: https://gist.github.com/casperisfine/872f0a486b5ccdf90d9feb830c76d9ad

### Backward compatibility

There is a big backward compatibility concern here, and I'm not sure we can actually make this change safety.

Until https://github.com/rails/rails/pull/47747, when you serialized an `ActiveRecord::Base` instance, lots of `ActiveModel::Attribute` instances would be serialized with it. Which means this optimization would break any instance serialized with an older Rails.

Currently the PR is only enabling the optimization if you switched to the new AR Marshal format, but:

  - You can switch to that format and still deserialize old payloads, this PR would break that.
  - Active Record may not be the only way these are serialized. We may break more stuff.

I can't think of any decent way to do this optimization while still retaining perfect backward/forward compatibility...

cc @tenderlove, I wonder if you have opinions here.",casperisfine,User,0,activemodel,activerecord,,,,,,,
https://api.github.com/repos/rails/rails/issues/47798,277819,47798,Support custom autocomplete for hidden fields,open,2,2023-03-28 23:03:02+00:00,2023-09-23 10:49:47+00:00,,"See:

* https://github.com/rails/rails/issues/46405#issuecomment-1472365329
* https://github.com/rails/rails/pull/43280
* https://github.com/rails/rails/issues/46470",zzak,User,1,actionview,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47756,1518902,47756,Generalize check for foreign keys when checking for the inverse of a record,open,0,2023-03-24 00:34:33+00:00,2023-04-24 21:19:20+00:00,,"### Motivation / Background

Fixes https://github.com/rails/rails/issues/47574

It was reported that when you have an association that uses a scope, querying for inverses do not correctly return the same object.

@andrewberls provided the reproduction steps in the issue that was filed.

### Detail
It turns out, when rails needs to check if the foreign key matches the record in `matches_foreign_key?` it uses the `id` of the record. This works majority of the time but unfortunately does not work when the foreign key is not an `id` but something else like a `token` or a `uuid`.

This change updates the check to call `association_primary_key` from the reflection to properly match the record.


### Additional information

A check for `polymorphic?` needed to be added because when the change was ran against the whole ActiveRecord suite, there were tests that failed with the following trace 

```
ArgumentError: Polymorphic associations do not support computing the class.
    /Users/nickborromeo/nickborromeo/rails/activerecord/lib/active_record/reflection.rb:447:in `compute_class'
    /Users/nickborromeo/nickborromeo/rails/activerecord/lib/active_record/reflection.rb:406:in `klass'
    /Users/nickborromeo/nickborromeo/rails/activerecord/lib/active_record/reflection.rb:787:in `association_primary_key'
    /Users/nickborromeo/nickborromeo/rails/activerecord/lib/active_record/associations/association.rb:387:in `matches_foreign_key?'
    /Users/nickborromeo/nickborromeo/rails/activerecord/lib/active_record/associations/association.rb:375:in `inversable?'
    /Users/nickborromeo/nickborromeo/rails/activerecord/lib/active_record/associations/association.rb:143:in `inversed_from_queries'
    /Users/nickborromeo/nickborromeo/rails/activerecord/lib/active_record/associations/association.rb:126:in `set_inverse_instance_from_queries'
    /Users/nickborromeo/nickborromeo/rails/activerecord/lib/active_record/association_relation.rb:45:in `block in exec_queries'
```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* ~[ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.~
",nickborromeo,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47755,8269566,47755,Update prevents_write docs,open,2,2023-03-23 23:07:51+00:00,2024-01-17 01:10:53+00:00,,"### Motivation / Background

<!--
Describe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?
If you are fixing a specific issue, include ""Fixes #ISSUE"" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.
-->

I noticed that the comment about the `READ_QUERY` was backwards (it's a list of allowed queries, not blocked queries) and that `role: :reading` always sets `prevents_writes: true`.  I've removed the reference to `READ_QUERY` because it's a private constant.

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->
Let me know if you folks would prefer these commits to be squished or split to different PRs.

Demo for `prevents_writes` always being set for `:reading`:
```ruby
> ActiveRecord::Base.connected_to(role: :primary) { ActiveRecord::Base.current_preventing_writes }
false
> ActiveRecord::Base.connected_to(role: :primary, prevent_writes: true) { ActiveRecord::Base.current_preventing_writes }
true
> ActiveRecord::Base.connected_to(role: :reading) { ActiveRecord::Base.current_preventing_writes }
true
> ActiveRecord::Base.connected_to(role: :reading, prevent_writes: false) { ActiveRecord::Base.current_preventing_writes }
true
```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] ~~CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and~~ documentation changes should not be included.",AlexMooney,User,0,activerecord,docs,activestorage,,,,,,
https://api.github.com/repos/rails/rails/issues/47751,246692,47751,ActiveRecord::Relation#async_pending? for introspecting async relations,open,25,2023-03-23 13:56:58+00:00,2023-03-28 08:27:08+00:00,,"Add `pending?` predicate to `ActiveRecord::Relation` that returns `true` if the relation is pending on the background thread pool; otherwise, returns `false`.

### Motivation / Background

This Pull Request has been created because there is currently no way to tell if an asynchronous `ActiveRecord::Relation` has actually loaded, since `loaded?` returns `true` even if the future is still pending.

An alternative approach might be to update the `loading?` predicate to return `false` when a future result is still pending. That would be a breaking change, and I don't know what else it might impact.

### Detail

This Pull Request adds a `pending?` predicate that returns `true` if the future result is pending; otherwise, returns `false`.

### Additional information

This change is based on [this discussion](https://discuss.rubyonrails.org/t/is-there-a-way-to-check-of-an-async-database-query-has-actually-loaded/82538).

I tried to write a test but wasn’t able to work out how to artificially slow an SQLite query to the point where it would still be pending by the time we check the predicate. There doesn’t seem to be a way to make an SQLite query sleep so let me know if you have any suggestions on how to do this.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",joeldrapper,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47745,277819,47745,TimeWithZone#today? should respect non UTC timezones,open,0,2023-03-23 05:38:32+00:00,2023-03-23 05:38:36+00:00,,"This attempts to fix the bug identified in #46361

---

It seems like the test should also change, since it was failing on my machine (+09:00).",zzak,User,1,activesupport,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47727,28561,47727,"Rename ""Mail"" to ""Mail extensions"" in API sidebar",open,2,2023-03-21 21:15:18+00:00,2023-03-22 09:53:25+00:00,,"Similar to the ""Core extensions"" we should move the documentation of the extensions to `Mail` to ""Mail extensions"".
This also move both ""Core extensions"" and ""Mail extensions"" to the bottom of the list, as these are both less important than the main frameworks like ActiveSupport and ActiveRecord.

### Before
<img width=""299"" alt=""image"" src=""https://user-images.githubusercontent.com/28561/226742634-0a253650-9d06-4c6f-8ae0-54b54c0fcb9b.png"">

### After
<img width=""300"" alt=""image"" src=""https://user-images.githubusercontent.com/28561/226742487-552660e8-6499-4b41-a8a5-b5fbf9e50574.png"">

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",p8,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47726,101123,47726,Route constraints with an array do not allow building a path only parsing a path.,open,6,2023-03-21 20:16:22+00:00,2023-08-20 14:45:11+00:00,,"### Steps to reproduce
```ruby
# Given a route like this.
MyApplication::Application.routes.draw do
    get '/download/:platform' => 'download#platform',
        constraints: {
          platform: %w[windows linux macos],
        },
        as: :download_platform
end
```

### Expected behavior
Routing test (rspec)
```ruby
expect(get(""/download/windows"")).to route_to('download#platform',
                                                         platform: platform)
```

url building test (rspec)
```ruby
def some_function(platform)
    download_platform_path(platform: platform)
end

expect(some_function('windows')).to eq(download_platform_path('windows'))
```

### Actual behavior
The routing spec passes, but the url building test fails with a `No route matches ... possible unmatched constraints: [:platform]` error.

However,

If I change the constraint to this
```ruby
MyApplication::Application.routes.draw do
    get '/download/:platform' => 'download#platform',
        constraints: {
          platform: /(windows|linux|macos)/,
        },
        as: :download_platform
end
```

both pass correctly.

### System configuration
**Rails version**: 2.7.3

**Ruby version**: 6.0.5
",urkle,User,0,actionpack,attached PR,,,,,,,
https://api.github.com/repos/rails/rails/issues/47719,509837,47719,Add `test:prepare` to `bin/setup` template for new apps,open,0,2023-03-20 21:19:38+00:00,2023-03-25 18:26:35+00:00,,"Suggested by @etiennebarrie [here](https://github.com/rails/rails/pull/47210#issuecomment-1476420481), I think this is a good idea. This way if you clone a repo and want to run a single test, you will be able to successfully do so if you ran `bin/setup` first (which is a good idea as it also tries to set up everything else you need).

Note that this does *not* also call `db:test:prepare`, as that is called automatically when you run your tests (see [here](https://github.com/rails/rails/pull/46664#issuecomment-1379522169)).",ghiculescu,User,2,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47713,7331511,47713,Use Thor for built-in stats task,open,2,2023-03-20 15:07:17+00:00,2023-03-27 08:33:33+00:00,,"### Motivation / Background

Currently, we use both Thor and Rake for `bin/rails` commands. We eventually want to get all the built-ins task promoted to Thor Commands. This migrates the `stats` task to Thor.

### Detail



### Additional information



### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",JuanVqz,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47707,567626,47707,Replace deprecated use of Event.initevent has been deprecated with Event constructor in activestorage.js,open,0,2023-03-17 20:51:13+00:00,2023-03-18 19:28:30+00:00,,"
### Motivation / Background

Usage of `Event.initevent` has been deprecated - https://developer.mozilla.org/en-US/docs/web/api/event/initevent

Replace and make use of `Event` constructor instead- https://developer.mozilla.org/en-US/docs/Web/API/Event/Event

### Detail

- Replace usage of `Event.initevent` and ` document.createEvent(""Event"")`  with simplified `Event` constructor instead
- Pass down same options to constructor as before
- Also runs yarn build to update current builds of AS.js and esm modules

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",vipulnsward,User,0,activestorage,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47705,52599949,47705,Add methods to ActiveRecord::Store's dirty API,open,5,2023-03-17 14:11:55+00:00,2023-11-12 15:24:08+00:00,,"<!--
Thanks for contributing to Rails!

Please do not make *Draft* pull requests, as they still send
notifications to everyone watching the Rails repo.

Create a pull request when it is ready for review and feedback
from the Rails team :).

If your pull request affects documentation or any non-code
changes, guidelines for those changes are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)

About this template

The following template aims to help contributors write a good description for their pull requests.
We'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.

Feel free to discard it if you need to (e.g. when you just fix a typo). -->

### Motivation / Background

ActiveRecord provides corresponding methods for `attribute_changed?` and `attribute_change`, namely `will_save_change_to_attribute?` and `attribute_to_be_saved`, respectively. These methods are named in a way that makes them easy to use in callbacks.

These are not defined in ActiveRecord::Store. To promote consistency, I propose adding alias methods to ActiveRecord::Store that would allow the use of these naming conventions.


### Checklist

Before submitting the PR make sure the following are checked:

* [ ] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [ ] Tests are added or updated if you fix a bug or add a feature.
* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",a5-stable,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47699,3387,47699,Weird interaction between AS::Concern and Module#ancestors,open,8,2023-03-16 21:13:11+00:00,2023-08-29 21:05:45+00:00,,"If you throw this file into an application:

```ruby
# app/models/foo.rb
module Foo
  extend ActiveSupport::Concern
end

module Bar
  extend ActiveSupport::Concern
  include Foo
  p ancestors
end
```

The command `bin/rails r Foo` prints `[Bar]`, but it should be `[Bar, Foo]`. You get the correct result if `Foo` does not extend `AS::Concern`.",fxn,User,0,pinned,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47698,28561,47698,Use Thor for built-in tmp task,open,1,2023-03-16 21:03:32+00:00,2023-03-21 10:55:45+00:00,,"Currently we use both Thor and Rake for `bin/rails` commands. We eventually want to get all the built-ins task promoted to Thor Commands. This migrates the `tmp` task to Thor.

As `tmp` directories are sometimes hidden by editors, I've used `temp` instead.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",p8,User,2,railties,docs,activestorage,actionmailbox,actiontext,,,,
https://api.github.com/repos/rails/rails/issues/47695,894561,47695,AR's before_last_save tracking wrong for nested callback,open,3,2023-03-16 18:41:47+00:00,2023-07-02 15:46:59+00:00,,"Nested callback executions in ActiveRecord (ex: a after_save does a update, which trigger another chain of callbacks) have a weird (IMO wrong) interaction with the `saved_change_to_*?`, `saved_changes`, `*_before_last_save` and friends.

The behavior changed in Rails 5.1. Rails 5.0's behavior was more intuitive.

### Steps to reproduce

( I got repro scripts below )

0) A model with 2 attributes, ex: `name` and `foo`

1) Have a after_save (or any other after_something) that does an update to `foo` of the model (with a condition, so that you don't get infinite recursion). Ex: `update(foo: 1) if foo != 1`

2) Have another after_save (called after the one in (1)) which checks if the other attribute was changed. Ex: `$saw_saved_change_to_name = true if saved_change_to_name?`

3) Create an instance setting only the name: Ex: `Post.create(name: 'hi')`

The second callback will never see `saved_change_to_name?` as true, because the first callback, triggering anothere save, fully overwrites the tracking.

I added a print of the saved_changes in the test to show what's going on. There is a failing script for main and 5.1, and a passing one for 5.0.

Here is the failing case in main:
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3"", '~> 1.4'
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.text :name
    t.integer :foo
  end
end

class Post < ActiveRecord::Base
  after_save :set_foo_after_save
  after_save :check_saved_change_to_name

  def set_foo_after_save
    update(foo: 1) if foo != 1
  end

  def check_saved_change_to_name
    puts ""* Saved changes: #{saved_changes}""
    $saw_saved_change_to_name = true if saved_change_to_name?
  end
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!(name: 'hi')

    assert($saw_saved_change_to_name)
  end
end
```
```
* Saved changes: {""foo""=>[nil, 1]}
* Saved changes: {""foo""=>[nil, 1]}
Expected nil to be truthy
```

Here is the failing case in 5.1:
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""5.1.7""
  gem ""sqlite3"", '1.3.13'
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.text :name
    t.integer :foo
  end
end

class Post < ActiveRecord::Base
  after_save :set_foo_after_save
  after_save :check_saved_change_to_name_after_save

  def set_foo_after_save
    update(foo: 1) if foo != 1
  end

  def check_saved_change_to_name_after_save
    puts ""* Saved changes: #{saved_changes}""
    $saw_saved_change_to_name = true if saved_change_to_name?
  end
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!(name: 'hi')

    assert($saw_saved_change_to_name)
  end
end
```
```
* Saved changes: {""foo""=>[nil, 1]}
* Saved changes: {""foo""=>[nil, 1]}
Expected nil to be truthy
```

And here is the passing case in 5.0, which was before Rails switched to `saved_change_to_*?` and friends:
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""5.0.7.2""
  gem ""sqlite3"", '1.3.13'
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.text :name
    t.integer :foo
  end
end

class Post < ActiveRecord::Base
  after_create :set_foo_after_save
  after_save :check_saved_change_to_name_after_save

  def set_foo_after_save
    update(foo: 1) if foo != 1
  end

  def check_saved_change_to_name_after_save
    puts ""* Saved changes: #{changes}""
    $saw_saved_change_to_name = true if name_changed?
  end
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!(name: 'hi')

    assert($saw_saved_change_to_name)
  end
end
```
```
* Saved changes: {""id""=>[nil, 1], ""name""=>[nil, ""hi""], ""foo""=>[nil, 1]}
* Saved changes: {}
Passes the test
```


### Expected behavior

I expect a  `after_*` callback that reacts to `saved_change_to_*?` to be called at least once with said change of `true` when the attribute gets changed.

### Actual behavior

The callback never gets called with `saved_change_to_name?` being `true` because the nested change 

In my opinion, the priority should be on handling the 1st expected behavior

This means that if I make code with such a callback, everything could work, and someone doing a nested update in a different callback could completely break the first callback.

### System configuration
**Rails version**: 5.1, main

**Ruby version**: 2.4 and 3.1
",MaxLap,User,0,activerecord,With reproduction steps,,,,,,,
https://api.github.com/repos/rails/rails/issues/47686,19192189,47686,Add `ActiveRecord::Base.extend_relations`,open,0,2023-03-16 07:42:57+00:00,2023-03-16 07:43:01+00:00,,"Ref: https://github.com/rails/rails/pull/47314 (fixes what I believe to be the most common use case).

Based on what I could see, a very common use case for extending (in our code base at least) is akin to:

```ruby
class MyModel < AR::Base
  default_scope { extending(MutationGuard::Relation) }
end
```

This use case would be much better served by directly including that module in all the relation delegators.

@rafaelfranca @jhawthorn @matthewd any opinion?",casperisfine,User,0,activerecord,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47654,277819,47654,Add `rake guides:lint` task that raises error for broken anchors,open,1,2023-03-13 06:25:01+00:00,2023-03-14 02:20:02+00:00,,"The guides generator would previous print an warning when it finds a broken anchor link during page generation.

This task uses that ability and raises an exception when that occurs.

For example:

```
Generating configuring.md as configuring.html
*** BROKEN LINK: #config-active-record-default-column-serialize, perhaps you meant #config-active-record-default-column-serializer.
*** BROKEN LINK: #config-active-record-encryption-hash-digest-class, perhaps you meant #config-active-record-automatic-scope-inversing.
Generating form_helpers.md as form_helpers.html
Generating command_line.md as command_line.html
*** BROKEN LINK: #fixme, perhaps you meant #.
Generating 5_2_release_notes.md as 5_2_release_notes.html
Generating 7_1_release_notes.md as 7_1_release_notes.html
[WARN] BROKEN LINK(s): association_basics.md: #bi-drectional-associations
[WARN] BROKEN LINK(s): configuring.md: #config-active-record-default-column-serialize, #config-active-record-encryption-hash-digest-class
[WARN] BROKEN LINK(s): command_line.md: #fixme
rake aborted!
Command failed with status (1): [/Users/zzak/.rubies/ruby-3.3.0/bin/ruby -E...]
```

",zzak,User,0,docs,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47646,28561,47646,Use Thor for built-in Time zone tasks,open,4,2023-03-12 18:23:32+00:00,2023-03-18 16:00:08+00:00,,"Currently we use both Thor and Rake for `bin/rails` commands.
We eventually want to get all the built-in tasks promoted to Thor Commands.

This migrates the `time:zones` tasks to Thor.

This also fixes passing `US` or `-8` as an argument, as the Rake implementation was broken. The arguments have to be passed without square brackets though.

The existing description has the following example, but it doesn't work:
```bash
bin/rails time:zones[-8]
no matches found: time:zones[-8]
```

With this PR we can pass `-8`:

```bash
bin/rails time:zones -8

* UTC -08:00 *
Pacific Time (US & Canada)
Tijuana

```

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",p8,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47634,28561,47634,Lazy require dependencies in Rails commands,open,6,2023-03-10 20:30:28+00:00,2023-03-13 18:42:08+00:00,,"Some commands only require dependencies when the command is performed,
while others require them in advance.
By only requiring the dependencies when needed we can speed up other
commands, as they don't need to load these files.

### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",p8,User,0,railties,,,,,,,,
https://api.github.com/repos/rails/rails/issues/47623,28561,47623,Introduce `bin/rails clear` command for clearing logs,open,8,2023-03-09 21:34:01+00:00,2023-04-01 20:31:08+00:00,,"Currently we use both Thor and Rake for `bin/rails` commands.
We eventually want to get all the built-in tasks promoted to Thor Commands:
https://github.com/rails/rails/pull/47610#issuecomment-1461520271
This migrates the `log:clear` task to Thor.

Currently logs and the tmp directory can be cleared with a single invocation:

```bash
bin/rails log:clear tmp:clear
```

With Thor we can't run multiple commands with a single invocation, as
additional commands will be seen as arguments to the first command.

This introduces a single `clear` command that will combine the existing
`log:clear` and `tmp:clear` commands. For now it's limited to clearing logs:

```bash
bin/rails clear --logs
```

The `--logs` option also supports passing `all` or a list of environments:

```bash
bin/rails log:clear --logs all # similar to `bin/rails log:clear LOGS=all`
bin/rails log:clear --logs development test # similar to `bin/rails log:clear LOGS=development,test`
```

Thor doesn't support Rake's FileList, so for truncating all log files we
use a glob pattern and filter out directories.


### Checklist

Before submitting the PR make sure the following are checked:

* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [x] Tests are added or updated if you fix a bug or add a feature.
* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",p8,User,0,railties,docs,activestorage,actionmailbox,actiontext,,,,
https://api.github.com/repos/rails/rails/issues/47620,4628,47620,Add more guidance for people who are creating their first Rails app,open,7,2023-03-09 20:51:48+00:00,2023-03-29 14:27:31+00:00,,"### Motivation / Background

I tweeted at https://twitter.com/bradgessler/status/1630655637096108032 that with relatively low effort, Rails could be more welcoming to new folks if we can give them a little more guidance. I expanded on that thought a bit with the post at https://fly.io/ruby-dispatch/little-gestures-of-confidence/.

Both of those links should be sufficient to describe the motivation and background.

### Detail

Adds a blurb to `rails new` that tells people to boot the server or enter `rails help`

```
$ rails new hello-rails
# stuff happens...
Appending: pin ""@hotwired/stimulus-loading"", to: ""stimulus-loading.js"", preload: true
      append  config/importmap.rb
Pin all controllers
Appending: pin_all_from ""app/javascript/controllers"", under: ""controllers""
      append  config/importmap.rb

Rails project created and dependencies installed.

Now switch to the directory where the Rails app was created:

  $ cd hello-rails

Then boot the development server:

  $ ./bin/rails server

You can always get help by running:

  $ ./bin/rails help
```

Adds a blurb to the rails welcome screen that tells people where they can find their code:

<img width=""1185"" alt=""image"" src=""https://user-images.githubusercontent.com/4628/224154034-71fa4ab1-eeea-4e32-b18b-d4795594c6c5.png"">

### Additional information

<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->

### Checklist

Before submitting the PR make sure the following are checked:

* [X] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.
* [X] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`
* [X] Tests are added or updated if you fix a bug or add a feature.
* [X] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.
",bradgessler,User,12,railties,,,,,,,,
